
LCDprint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e1c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003fc8  08003fc8  00013fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fec  08003fec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003fec  08003fec  00013fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ff4  08003ff4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ff4  08003ff4  00013ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ff8  08003ff8  00013ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000007f4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000800  20000800  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011909  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002223  00000000  00000000  00031988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e58  00000000  00000000  00033bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b3b  00000000  00000000  00034a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024978  00000000  00000000  00035543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011a5d  00000000  00000000  00059ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dc798  00000000  00000000  0006b918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003d78  00000000  00000000  001480b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0014be28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003fb0 	.word	0x08003fb0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003fb0 	.word	0x08003fb0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <_LCD_SendInternal>:
#define LCD_I2C_TIMEOUT 200

#define COLUMNS 16
#define ROWS 2

HAL_StatusTypeDef _LCD_SendInternal(LCD_HandleTypeDef *dev, uint8_t data, uint8_t flags) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af02      	add	r7, sp, #8
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	460b      	mov	r3, r1
 80004f2:	70fb      	strb	r3, [r7, #3]
 80004f4:	4613      	mov	r3, r2
 80004f6:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef res;
    for(int i=0;i<5;i++) {
 80004f8:	2300      	movs	r3, #0
 80004fa:	613b      	str	r3, [r7, #16]
 80004fc:	e010      	b.n	8000520 <_LCD_SendInternal+0x38>
        res = HAL_I2C_IsDeviceReady(dev->i2c, dev->i2c_addr, 1, LCD_I2C_TIMEOUT);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	6858      	ldr	r0, [r3, #4]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	b299      	uxth	r1, r3
 8000508:	23c8      	movs	r3, #200	; 0xc8
 800050a:	2201      	movs	r2, #1
 800050c:	f001 fdf8 	bl	8002100 <HAL_I2C_IsDeviceReady>
 8000510:	4603      	mov	r3, r0
 8000512:	75fb      	strb	r3, [r7, #23]
        if(res == HAL_OK)
 8000514:	7dfb      	ldrb	r3, [r7, #23]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d006      	beq.n	8000528 <_LCD_SendInternal+0x40>
    for(int i=0;i<5;i++) {
 800051a:	693b      	ldr	r3, [r7, #16]
 800051c:	3301      	adds	r3, #1
 800051e:	613b      	str	r3, [r7, #16]
 8000520:	693b      	ldr	r3, [r7, #16]
 8000522:	2b04      	cmp	r3, #4
 8000524:	ddeb      	ble.n	80004fe <_LCD_SendInternal+0x16>
 8000526:	e000      	b.n	800052a <_LCD_SendInternal+0x42>
            break;
 8000528:	bf00      	nop
    }
    if(res!=HAL_OK) {
 800052a:	7dfb      	ldrb	r3, [r7, #23]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <_LCD_SendInternal+0x4c>
    	return res;
 8000530:	7dfb      	ldrb	r3, [r7, #23]
 8000532:	e04b      	b.n	80005cc <_LCD_SendInternal+0xe4>
    }


    uint8_t up = data & 0xF0;
 8000534:	78fb      	ldrb	r3, [r7, #3]
 8000536:	f023 030f 	bic.w	r3, r3, #15
 800053a:	73fb      	strb	r3, [r7, #15]
    uint8_t lo = (data << 4) & 0xF0;
 800053c:	78fb      	ldrb	r3, [r7, #3]
 800053e:	011b      	lsls	r3, r3, #4
 8000540:	73bb      	strb	r3, [r7, #14]
    uint8_t backlight = dev->backlight_enable?BACKLIGHT:0;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	7a1b      	ldrb	r3, [r3, #8]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <_LCD_SendInternal+0x66>
 800054a:	2308      	movs	r3, #8
 800054c:	e000      	b.n	8000550 <_LCD_SendInternal+0x68>
 800054e:	2300      	movs	r3, #0
 8000550:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|backlight|PIN_EN;
 8000552:	7bfa      	ldrb	r2, [r7, #15]
 8000554:	78bb      	ldrb	r3, [r7, #2]
 8000556:	4313      	orrs	r3, r2
 8000558:	b2da      	uxtb	r2, r3
 800055a:	7b7b      	ldrb	r3, [r7, #13]
 800055c:	4313      	orrs	r3, r2
 800055e:	b2db      	uxtb	r3, r3
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	b2db      	uxtb	r3, r3
 8000566:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|backlight;
 8000568:	7bfa      	ldrb	r2, [r7, #15]
 800056a:	78bb      	ldrb	r3, [r7, #2]
 800056c:	4313      	orrs	r3, r2
 800056e:	b2da      	uxtb	r2, r3
 8000570:	7b7b      	ldrb	r3, [r7, #13]
 8000572:	4313      	orrs	r3, r2
 8000574:	b2db      	uxtb	r3, r3
 8000576:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|backlight|PIN_EN;
 8000578:	7bba      	ldrb	r2, [r7, #14]
 800057a:	78bb      	ldrb	r3, [r7, #2]
 800057c:	4313      	orrs	r3, r2
 800057e:	b2da      	uxtb	r2, r3
 8000580:	7b7b      	ldrb	r3, [r7, #13]
 8000582:	4313      	orrs	r3, r2
 8000584:	b2db      	uxtb	r3, r3
 8000586:	f043 0304 	orr.w	r3, r3, #4
 800058a:	b2db      	uxtb	r3, r3
 800058c:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|backlight;
 800058e:	7bba      	ldrb	r2, [r7, #14]
 8000590:	78bb      	ldrb	r3, [r7, #2]
 8000592:	4313      	orrs	r3, r2
 8000594:	b2da      	uxtb	r2, r3
 8000596:	7b7b      	ldrb	r3, [r7, #13]
 8000598:	4313      	orrs	r3, r2
 800059a:	b2db      	uxtb	r3, r3
 800059c:	72fb      	strb	r3, [r7, #11]

    //TODO send data_arr to the device
    res = HAL_I2C_Master_Transmit(dev->i2c, dev->i2c_addr, data_arr, sizeof(data_arr), LCD_I2C_TIMEOUT);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6858      	ldr	r0, [r3, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	b299      	uxth	r1, r3
 80005a8:	f107 0208 	add.w	r2, r7, #8
 80005ac:	23c8      	movs	r3, #200	; 0xc8
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	2304      	movs	r3, #4
 80005b2:	f001 fca7 	bl	8001f04 <HAL_I2C_Master_Transmit>
 80005b6:	4603      	mov	r3, r0
 80005b8:	75fb      	strb	r3, [r7, #23]
    if(res != HAL_OK) {
 80005ba:	7dfb      	ldrb	r3, [r7, #23]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <_LCD_SendInternal+0xdc>
        return res;
 80005c0:	7dfb      	ldrb	r3, [r7, #23]
 80005c2:	e003      	b.n	80005cc <_LCD_SendInternal+0xe4>
    }


    HAL_Delay(LCD_DELAY_MS); //delay afterwards to not overwhelm display
 80005c4:	2005      	movs	r0, #5
 80005c6:	f000 fd61 	bl	800108c <HAL_Delay>
    return res;
 80005ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3718      	adds	r7, #24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_LCD_SendCommand>:

HAL_StatusTypeDef _LCD_SendCommand(LCD_HandleTypeDef *dev, uint8_t cmd) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	70fb      	strb	r3, [r7, #3]
    return _LCD_SendInternal(dev, cmd, 0);
 80005e0:	78fb      	ldrb	r3, [r7, #3]
 80005e2:	2200      	movs	r2, #0
 80005e4:	4619      	mov	r1, r3
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f7ff ff7e 	bl	80004e8 <_LCD_SendInternal>
 80005ec:	4603      	mov	r3, r0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <_LCD_SendData>:

HAL_StatusTypeDef _LCD_SendData(LCD_HandleTypeDef *dev, uint8_t data) {
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b082      	sub	sp, #8
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
 80005fe:	460b      	mov	r3, r1
 8000600:	70fb      	strb	r3, [r7, #3]
    return _LCD_SendInternal(dev, data, PIN_RS);
 8000602:	78fb      	ldrb	r3, [r7, #3]
 8000604:	2201      	movs	r2, #1
 8000606:	4619      	mov	r1, r3
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff ff6d 	bl	80004e8 <_LCD_SendInternal>
 800060e:	4603      	mov	r3, r0
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <LCD_Print>:

#define RETURN_IF_NOT_OK if(status!=HAL_OK)return status;

HAL_StatusTypeDef LCD_Print(LCD_HandleTypeDef *dev, const char *str) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
    while(*str) {
 8000622:	e00f      	b.n	8000644 <LCD_Print+0x2c>
    	status = _LCD_SendData(dev, (uint8_t)(*str));
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	4619      	mov	r1, r3
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f7ff ffe3 	bl	80005f6 <_LCD_SendData>
 8000630:	4603      	mov	r3, r0
 8000632:	73fb      	strb	r3, [r7, #15]
        RETURN_IF_NOT_OK;
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <LCD_Print+0x26>
 800063a:	7bfb      	ldrb	r3, [r7, #15]
 800063c:	e007      	b.n	800064e <LCD_Print+0x36>
        str++;
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	3301      	adds	r3, #1
 8000642:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d1eb      	bne.n	8000624 <LCD_Print+0xc>
    }
    return HAL_OK;
 800064c:	2300      	movs	r3, #0
}
 800064e:	4618      	mov	r0, r3
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <LCD_Begin>:
    RETURN_IF_NOT_OK;
    status = LCD_Print(dev, " !!! ");
    return status;
}

HAL_StatusTypeDef LCD_Begin(LCD_HandleTypeDef *dev) {
 8000656:	b580      	push	{r7, lr}
 8000658:	b084      	sub	sp, #16
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
	dev->backlight_enable=true;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2201      	movs	r2, #1
 8000662:	721a      	strb	r2, [r3, #8]
	HAL_StatusTypeDef status;

    // 4-bit mode, 2 lines, 5x7 format
    status = _LCD_SendCommand(dev, 0b00110000);
 8000664:	2130      	movs	r1, #48	; 0x30
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f7ff ffb4 	bl	80005d4 <_LCD_SendCommand>
 800066c:	4603      	mov	r3, r0
 800066e:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <LCD_Begin+0x24>
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	e01c      	b.n	80006b4 <LCD_Begin+0x5e>

    // display & cursor home (keep this!)
    status = _LCD_SendCommand(dev, 0b00000010);
 800067a:	2102      	movs	r1, #2
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f7ff ffa9 	bl	80005d4 <_LCD_SendCommand>
 8000682:	4603      	mov	r3, r0
 8000684:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <LCD_Begin+0x3a>
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	e011      	b.n	80006b4 <LCD_Begin+0x5e>

    // display on, right shift, underline off, blink off
    status = _LCD_SendCommand(dev, 0b00001100);
 8000690:	210c      	movs	r1, #12
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f7ff ff9e 	bl	80005d4 <_LCD_SendCommand>
 8000698:	4603      	mov	r3, r0
 800069a:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <LCD_Begin+0x50>
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	e006      	b.n	80006b4 <LCD_Begin+0x5e>

    // clear display (optional here)
    status = _LCD_SendCommand(dev, 0b00000001);
 80006a6:	2101      	movs	r1, #1
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f7ff ff93 	bl	80005d4 <_LCD_SendCommand>
 80006ae:	4603      	mov	r3, r0
 80006b0:	73fb      	strb	r3, [r7, #15]
    return status;
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c2:	f000 fc71 	bl	8000fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c6:	f000 f81f 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ca:	f000 f96d 	bl	80009a8 <MX_GPIO_Init>
  MX_ETH_Init();
 80006ce:	f000 f885 	bl	80007dc <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006d2:	f000 f911 	bl	80008f8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006d6:	f000 f939 	bl	800094c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 80006da:	f000 f8cd 	bl	8000878 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  LCD_HandleTypeDef lcd_handle;
  lcd_handle.i2c_addr = LCD_DEFAULT_ADDR; // Set the LCD I2C address
 80006de:	234e      	movs	r3, #78	; 0x4e
 80006e0:	713b      	strb	r3, [r7, #4]
  lcd_handle.i2c = &hi2c2;               // Use the I2C2 handle
 80006e2:	4b07      	ldr	r3, [pc, #28]	; (8000700 <main+0x44>)
 80006e4:	60bb      	str	r3, [r7, #8]
  lcd_handle.backlight_enable = true;
 80006e6:	2301      	movs	r3, #1
 80006e8:	733b      	strb	r3, [r7, #12]
  LCD_Begin(&lcd_handle);
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ffb2 	bl	8000656 <LCD_Begin>

  LCD_Print(&lcd_handle, "Hello World");
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	4903      	ldr	r1, [pc, #12]	; (8000704 <main+0x48>)
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff ff8e 	bl	8000618 <LCD_Print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <main+0x40>
 80006fe:	bf00      	nop
 8000700:	20000250 	.word	0x20000250
 8000704:	08003fc8 	.word	0x08003fc8

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	; 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0320 	add.w	r3, r7, #32
 8000712:	2230      	movs	r2, #48	; 0x30
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f003 fc1e 	bl	8003f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <SystemClock_Config+0xcc>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	4a27      	ldr	r2, [pc, #156]	; (80007d4 <SystemClock_Config+0xcc>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	; 0x40
 800073c:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <SystemClock_Config+0xcc>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <SystemClock_Config+0xd0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <SystemClock_Config+0xd0>)
 8000752:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <SystemClock_Config+0xd0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000764:	2301      	movs	r3, #1
 8000766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000768:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000772:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000778:	2304      	movs	r3, #4
 800077a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800077c:	23a8      	movs	r3, #168	; 0xa8
 800077e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000780:	2302      	movs	r3, #2
 8000782:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000784:	2307      	movs	r3, #7
 8000786:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 0320 	add.w	r3, r7, #32
 800078c:	4618      	mov	r0, r3
 800078e:	f002 f987 	bl	8002aa0 <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000798:	f000 f9c2 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	230f      	movs	r3, #15
 800079e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a0:	2302      	movs	r3, #2
 80007a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	2105      	movs	r1, #5
 80007ba:	4618      	mov	r0, r3
 80007bc:	f002 fbe8 	bl	8002f90 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007c6:	f000 f9ab 	bl	8000b20 <Error_Handler>
  }
}
 80007ca:	bf00      	nop
 80007cc:	3750      	adds	r7, #80	; 0x50
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <MX_ETH_Init+0x84>)
 80007e2:	4a20      	ldr	r2, [pc, #128]	; (8000864 <MX_ETH_Init+0x88>)
 80007e4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007e6:	4b20      	ldr	r3, [pc, #128]	; (8000868 <MX_ETH_Init+0x8c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <MX_ETH_Init+0x8c>)
 80007ee:	2280      	movs	r2, #128	; 0x80
 80007f0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007f2:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_ETH_Init+0x8c>)
 80007f4:	22e1      	movs	r2, #225	; 0xe1
 80007f6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_ETH_Init+0x8c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_ETH_Init+0x8c>)
 8000800:	2200      	movs	r2, #0
 8000802:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_ETH_Init+0x8c>)
 8000806:	2200      	movs	r2, #0
 8000808:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <MX_ETH_Init+0x84>)
 800080c:	4a16      	ldr	r2, [pc, #88]	; (8000868 <MX_ETH_Init+0x8c>)
 800080e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_ETH_Init+0x84>)
 8000812:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000816:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_ETH_Init+0x84>)
 800081a:	4a14      	ldr	r2, [pc, #80]	; (800086c <MX_ETH_Init+0x90>)
 800081c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <MX_ETH_Init+0x84>)
 8000820:	4a13      	ldr	r2, [pc, #76]	; (8000870 <MX_ETH_Init+0x94>)
 8000822:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000824:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_ETH_Init+0x84>)
 8000826:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800082a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800082c:	480c      	ldr	r0, [pc, #48]	; (8000860 <MX_ETH_Init+0x84>)
 800082e:	f000 fd37 	bl	80012a0 <HAL_ETH_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000838:	f000 f972 	bl	8000b20 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800083c:	2238      	movs	r2, #56	; 0x38
 800083e:	2100      	movs	r1, #0
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_ETH_Init+0x98>)
 8000842:	f003 fb89 	bl	8003f58 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_ETH_Init+0x98>)
 8000848:	2221      	movs	r2, #33	; 0x21
 800084a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_ETH_Init+0x98>)
 800084e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000852:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <MX_ETH_Init+0x98>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200001a0 	.word	0x200001a0
 8000864:	40028000 	.word	0x40028000
 8000868:	200007f4 	.word	0x200007f4
 800086c:	20000100 	.word	0x20000100
 8000870:	20000060 	.word	0x20000060
 8000874:	20000028 	.word	0x20000028

08000878 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800087c:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <MX_I2C2_Init+0x74>)
 800087e:	4a1c      	ldr	r2, [pc, #112]	; (80008f0 <MX_I2C2_Init+0x78>)
 8000880:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000882:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_I2C2_Init+0x74>)
 8000884:	4a1b      	ldr	r2, [pc, #108]	; (80008f4 <MX_I2C2_Init+0x7c>)
 8000886:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <MX_I2C2_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_I2C2_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_I2C2_Init+0x74>)
 8000896:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800089a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <MX_I2C2_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_I2C2_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a8:	4b10      	ldr	r3, [pc, #64]	; (80008ec <MX_I2C2_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_I2C2_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008b4:	480d      	ldr	r0, [pc, #52]	; (80008ec <MX_I2C2_Init+0x74>)
 80008b6:	f001 f9e1 	bl	8001c7c <HAL_I2C_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008c0:	f000 f92e 	bl	8000b20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008c4:	2100      	movs	r1, #0
 80008c6:	4809      	ldr	r0, [pc, #36]	; (80008ec <MX_I2C2_Init+0x74>)
 80008c8:	f001 ff51 	bl	800276e <HAL_I2CEx_ConfigAnalogFilter>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80008d2:	f000 f925 	bl	8000b20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008d6:	2100      	movs	r1, #0
 80008d8:	4804      	ldr	r0, [pc, #16]	; (80008ec <MX_I2C2_Init+0x74>)
 80008da:	f001 ff84 	bl	80027e6 <HAL_I2CEx_ConfigDigitalFilter>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80008e4:	f000 f91c 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000250 	.word	0x20000250
 80008f0:	40005800 	.word	0x40005800
 80008f4:	000186a0 	.word	0x000186a0

080008f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <MX_USART3_UART_Init+0x50>)
 8000900:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 8000904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000908:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 8000930:	f002 fd4e 	bl	80033d0 <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800093a:	f000 f8f1 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200002a4 	.word	0x200002a4
 8000948:	40004800 	.word	0x40004800

0800094c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000952:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000956:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095a:	2204      	movs	r2, #4
 800095c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000960:	2202      	movs	r2, #2
 8000962:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096c:	2202      	movs	r2, #2
 800096e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000972:	2201      	movs	r2, #1
 8000974:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000984:	2201      	movs	r2, #1
 8000986:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000990:	f001 ff68 	bl	8002864 <HAL_PCD_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800099a:	f000 f8c1 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200002e8 	.word	0x200002e8

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08c      	sub	sp, #48	; 0x30
 80009ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	61bb      	str	r3, [r7, #24]
 80009c2:	4b53      	ldr	r3, [pc, #332]	; (8000b10 <MX_GPIO_Init+0x168>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a52      	ldr	r2, [pc, #328]	; (8000b10 <MX_GPIO_Init+0x168>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b50      	ldr	r3, [pc, #320]	; (8000b10 <MX_GPIO_Init+0x168>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	61bb      	str	r3, [r7, #24]
 80009d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
 80009de:	4b4c      	ldr	r3, [pc, #304]	; (8000b10 <MX_GPIO_Init+0x168>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a4b      	ldr	r2, [pc, #300]	; (8000b10 <MX_GPIO_Init+0x168>)
 80009e4:	f043 0320 	orr.w	r3, r3, #32
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b49      	ldr	r3, [pc, #292]	; (8000b10 <MX_GPIO_Init+0x168>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0320 	and.w	r3, r3, #32
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b45      	ldr	r3, [pc, #276]	; (8000b10 <MX_GPIO_Init+0x168>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a44      	ldr	r2, [pc, #272]	; (8000b10 <MX_GPIO_Init+0x168>)
 8000a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b42      	ldr	r3, [pc, #264]	; (8000b10 <MX_GPIO_Init+0x168>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b3e      	ldr	r3, [pc, #248]	; (8000b10 <MX_GPIO_Init+0x168>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a3d      	ldr	r2, [pc, #244]	; (8000b10 <MX_GPIO_Init+0x168>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b3b      	ldr	r3, [pc, #236]	; (8000b10 <MX_GPIO_Init+0x168>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	4b37      	ldr	r3, [pc, #220]	; (8000b10 <MX_GPIO_Init+0x168>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a36      	ldr	r2, [pc, #216]	; (8000b10 <MX_GPIO_Init+0x168>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b34      	ldr	r3, [pc, #208]	; (8000b10 <MX_GPIO_Init+0x168>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b30      	ldr	r3, [pc, #192]	; (8000b10 <MX_GPIO_Init+0x168>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a2f      	ldr	r2, [pc, #188]	; (8000b10 <MX_GPIO_Init+0x168>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b2d      	ldr	r3, [pc, #180]	; (8000b10 <MX_GPIO_Init+0x168>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <MX_GPIO_Init+0x168>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a28      	ldr	r2, [pc, #160]	; (8000b10 <MX_GPIO_Init+0x168>)
 8000a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <MX_GPIO_Init+0x168>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a88:	4822      	ldr	r0, [pc, #136]	; (8000b14 <MX_GPIO_Init+0x16c>)
 8000a8a:	f001 f8dd 	bl	8001c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2140      	movs	r1, #64	; 0x40
 8000a92:	4821      	ldr	r0, [pc, #132]	; (8000b18 <MX_GPIO_Init+0x170>)
 8000a94:	f001 f8d8 	bl	8001c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	481b      	ldr	r0, [pc, #108]	; (8000b1c <MX_GPIO_Init+0x174>)
 8000ab0:	f000 ff1e 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ab4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	4811      	ldr	r0, [pc, #68]	; (8000b14 <MX_GPIO_Init+0x16c>)
 8000ace:	f000 ff0f 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ad2:	2340      	movs	r3, #64	; 0x40
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480b      	ldr	r0, [pc, #44]	; (8000b18 <MX_GPIO_Init+0x170>)
 8000aea:	f000 ff01 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aee:	2380      	movs	r3, #128	; 0x80
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_GPIO_Init+0x170>)
 8000b02:	f000 fef5 	bl	80018f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b06:	bf00      	nop
 8000b08:	3730      	adds	r7, #48	; 0x30
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020400 	.word	0x40020400
 8000b18:	40021800 	.word	0x40021800
 8000b1c:	40020800 	.word	0x40020800

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <Error_Handler+0x8>
	...

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b40:	6453      	str	r3, [r2, #68]	; 0x44
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800

08000b7c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08e      	sub	sp, #56	; 0x38
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a55      	ldr	r2, [pc, #340]	; (8000cf0 <HAL_ETH_MspInit+0x174>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	f040 80a4 	bne.w	8000ce8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
 8000ba4:	4b53      	ldr	r3, [pc, #332]	; (8000cf4 <HAL_ETH_MspInit+0x178>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	4a52      	ldr	r2, [pc, #328]	; (8000cf4 <HAL_ETH_MspInit+0x178>)
 8000baa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bae:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb0:	4b50      	ldr	r3, [pc, #320]	; (8000cf4 <HAL_ETH_MspInit+0x178>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bb8:	623b      	str	r3, [r7, #32]
 8000bba:	6a3b      	ldr	r3, [r7, #32]
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
 8000bc0:	4b4c      	ldr	r3, [pc, #304]	; (8000cf4 <HAL_ETH_MspInit+0x178>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	4a4b      	ldr	r2, [pc, #300]	; (8000cf4 <HAL_ETH_MspInit+0x178>)
 8000bc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bca:	6313      	str	r3, [r2, #48]	; 0x30
 8000bcc:	4b49      	ldr	r3, [pc, #292]	; (8000cf4 <HAL_ETH_MspInit+0x178>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bd4:	61fb      	str	r3, [r7, #28]
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
 8000bdc:	4b45      	ldr	r3, [pc, #276]	; (8000cf4 <HAL_ETH_MspInit+0x178>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	4a44      	ldr	r2, [pc, #272]	; (8000cf4 <HAL_ETH_MspInit+0x178>)
 8000be2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000be6:	6313      	str	r3, [r2, #48]	; 0x30
 8000be8:	4b42      	ldr	r3, [pc, #264]	; (8000cf4 <HAL_ETH_MspInit+0x178>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bf0:	61bb      	str	r3, [r7, #24]
 8000bf2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	4b3e      	ldr	r3, [pc, #248]	; (8000cf4 <HAL_ETH_MspInit+0x178>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	4a3d      	ldr	r2, [pc, #244]	; (8000cf4 <HAL_ETH_MspInit+0x178>)
 8000bfe:	f043 0304 	orr.w	r3, r3, #4
 8000c02:	6313      	str	r3, [r2, #48]	; 0x30
 8000c04:	4b3b      	ldr	r3, [pc, #236]	; (8000cf4 <HAL_ETH_MspInit+0x178>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	2300      	movs	r3, #0
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	4b37      	ldr	r3, [pc, #220]	; (8000cf4 <HAL_ETH_MspInit+0x178>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c18:	4a36      	ldr	r2, [pc, #216]	; (8000cf4 <HAL_ETH_MspInit+0x178>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c20:	4b34      	ldr	r3, [pc, #208]	; (8000cf4 <HAL_ETH_MspInit+0x178>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	4b30      	ldr	r3, [pc, #192]	; (8000cf4 <HAL_ETH_MspInit+0x178>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	4a2f      	ldr	r2, [pc, #188]	; (8000cf4 <HAL_ETH_MspInit+0x178>)
 8000c36:	f043 0302 	orr.w	r3, r3, #2
 8000c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3c:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <HAL_ETH_MspInit+0x178>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c40:	f003 0302 	and.w	r3, r3, #2
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	4b29      	ldr	r3, [pc, #164]	; (8000cf4 <HAL_ETH_MspInit+0x178>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	4a28      	ldr	r2, [pc, #160]	; (8000cf4 <HAL_ETH_MspInit+0x178>)
 8000c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c56:	6313      	str	r3, [r2, #48]	; 0x30
 8000c58:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <HAL_ETH_MspInit+0x178>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c64:	2332      	movs	r3, #50	; 0x32
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c74:	230b      	movs	r3, #11
 8000c76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	481e      	ldr	r0, [pc, #120]	; (8000cf8 <HAL_ETH_MspInit+0x17c>)
 8000c80:	f000 fe36 	bl	80018f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c84:	2386      	movs	r3, #134	; 0x86
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c94:	230b      	movs	r3, #11
 8000c96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4817      	ldr	r0, [pc, #92]	; (8000cfc <HAL_ETH_MspInit+0x180>)
 8000ca0:	f000 fe26 	bl	80018f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ca4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb6:	230b      	movs	r3, #11
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	480f      	ldr	r0, [pc, #60]	; (8000d00 <HAL_ETH_MspInit+0x184>)
 8000cc2:	f000 fe15 	bl	80018f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cc6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd8:	230b      	movs	r3, #11
 8000cda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4808      	ldr	r0, [pc, #32]	; (8000d04 <HAL_ETH_MspInit+0x188>)
 8000ce4:	f000 fe04 	bl	80018f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ce8:	bf00      	nop
 8000cea:	3738      	adds	r7, #56	; 0x38
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40028000 	.word	0x40028000
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020800 	.word	0x40020800
 8000cfc:	40020000 	.word	0x40020000
 8000d00:	40020400 	.word	0x40020400
 8000d04:	40021800 	.word	0x40021800

08000d08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a19      	ldr	r2, [pc, #100]	; (8000d8c <HAL_I2C_MspInit+0x84>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d12b      	bne.n	8000d82 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <HAL_I2C_MspInit+0x88>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <HAL_I2C_MspInit+0x88>)
 8000d34:	f043 0320 	orr.w	r3, r3, #32
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <HAL_I2C_MspInit+0x88>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0320 	and.w	r3, r3, #32
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d46:	2303      	movs	r3, #3
 8000d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d4a:	2312      	movs	r3, #18
 8000d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d52:	2303      	movs	r3, #3
 8000d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d56:	2304      	movs	r3, #4
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <HAL_I2C_MspInit+0x8c>)
 8000d62:	f000 fdc5 	bl	80018f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <HAL_I2C_MspInit+0x88>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <HAL_I2C_MspInit+0x88>)
 8000d70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_I2C_MspInit+0x88>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d82:	bf00      	nop
 8000d84:	3728      	adds	r7, #40	; 0x28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40005800 	.word	0x40005800
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40021400 	.word	0x40021400

08000d98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a19      	ldr	r2, [pc, #100]	; (8000e1c <HAL_UART_MspInit+0x84>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d12c      	bne.n	8000e14 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <HAL_UART_MspInit+0x88>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a17      	ldr	r2, [pc, #92]	; (8000e20 <HAL_UART_MspInit+0x88>)
 8000dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <HAL_UART_MspInit+0x88>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <HAL_UART_MspInit+0x88>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a10      	ldr	r2, [pc, #64]	; (8000e20 <HAL_UART_MspInit+0x88>)
 8000de0:	f043 0308 	orr.w	r3, r3, #8
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <HAL_UART_MspInit+0x88>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0308 	and.w	r3, r3, #8
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000df2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e04:	2307      	movs	r3, #7
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <HAL_UART_MspInit+0x8c>)
 8000e10:	f000 fd6e 	bl	80018f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e14:	bf00      	nop
 8000e16:	3728      	adds	r7, #40	; 0x28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40004800 	.word	0x40004800
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020c00 	.word	0x40020c00

08000e28 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e48:	d13f      	bne.n	8000eca <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <HAL_PCD_MspInit+0xac>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a20      	ldr	r2, [pc, #128]	; (8000ed4 <HAL_PCD_MspInit+0xac>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <HAL_PCD_MspInit+0xac>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e66:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e78:	230a      	movs	r3, #10
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	4815      	ldr	r0, [pc, #84]	; (8000ed8 <HAL_PCD_MspInit+0xb0>)
 8000e84:	f000 fd34 	bl	80018f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480e      	ldr	r0, [pc, #56]	; (8000ed8 <HAL_PCD_MspInit+0xb0>)
 8000e9e:	f000 fd27 	bl	80018f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <HAL_PCD_MspInit+0xac>)
 8000ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <HAL_PCD_MspInit+0xac>)
 8000ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eac:	6353      	str	r3, [r2, #52]	; 0x34
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_PCD_MspInit+0xac>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_PCD_MspInit+0xac>)
 8000eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ebe:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <HAL_PCD_MspInit+0xac>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000eca:	bf00      	nop
 8000ecc:	3728      	adds	r7, #40	; 0x28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40020000 	.word	0x40020000

08000edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <NMI_Handler+0x4>

08000ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <MemManage_Handler+0x4>

08000eee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f28:	f000 f890 	bl	800104c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <SystemInit+0x20>)
 8000f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f3a:	4a05      	ldr	r2, [pc, #20]	; (8000f50 <SystemInit+0x20>)
 8000f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f8c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f58:	480d      	ldr	r0, [pc, #52]	; (8000f90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f5a:	490e      	ldr	r1, [pc, #56]	; (8000f94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f5c:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f60:	e002      	b.n	8000f68 <LoopCopyDataInit>

08000f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f66:	3304      	adds	r3, #4

08000f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f6c:	d3f9      	bcc.n	8000f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f70:	4c0b      	ldr	r4, [pc, #44]	; (8000fa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f74:	e001      	b.n	8000f7a <LoopFillZerobss>

08000f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f78:	3204      	adds	r2, #4

08000f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f7c:	d3fb      	bcc.n	8000f76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f7e:	f7ff ffd7 	bl	8000f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f82:	f002 fff1 	bl	8003f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f86:	f7ff fb99 	bl	80006bc <main>
  bx  lr    
 8000f8a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f8c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f98:	08003ffc 	.word	0x08003ffc
  ldr r2, =_sbss
 8000f9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fa0:	20000800 	.word	0x20000800

08000fa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa4:	e7fe      	b.n	8000fa4 <ADC_IRQHandler>
	...

08000fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <HAL_Init+0x40>)
 8000fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <HAL_Init+0x40>)
 8000fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_Init+0x40>)
 8000fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 f931 	bl	8001238 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f000 f808 	bl	8000fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fdc:	f7ff fda6 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023c00 	.word	0x40023c00

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_InitTick+0x54>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_InitTick+0x58>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001002:	fbb3 f3f1 	udiv	r3, r3, r1
 8001006:	fbb2 f3f3 	udiv	r3, r2, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f93b 	bl	8001286 <HAL_SYSTICK_Config>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e00e      	b.n	8001038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d80a      	bhi.n	8001036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001020:	2200      	movs	r2, #0
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f000 f911 	bl	800124e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <HAL_InitTick+0x5c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	e000      	b.n	8001038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000000 	.word	0x20000000
 8001044:	20000008 	.word	0x20000008
 8001048:	20000004 	.word	0x20000004

0800104c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x20>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_IncTick+0x24>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <HAL_IncTick+0x24>)
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000008 	.word	0x20000008
 8001070:	200007fc 	.word	0x200007fc

08001074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <HAL_GetTick+0x14>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	200007fc 	.word	0x200007fc

0800108c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001094:	f7ff ffee 	bl	8001074 <HAL_GetTick>
 8001098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a4:	d005      	beq.n	80010b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <HAL_Delay+0x44>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010b2:	bf00      	nop
 80010b4:	f7ff ffde 	bl	8001074 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d8f7      	bhi.n	80010b4 <HAL_Delay+0x28>
  {
  }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000008 	.word	0x20000008

080010d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f0:	4013      	ands	r3, r2
 80010f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001106:	4a04      	ldr	r2, [pc, #16]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	60d3      	str	r3, [r2, #12]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <__NVIC_GetPriorityGrouping+0x18>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	f003 0307 	and.w	r3, r3, #7
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	2b00      	cmp	r3, #0
 800114a:	db0a      	blt.n	8001162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	b2da      	uxtb	r2, r3
 8001150:	490c      	ldr	r1, [pc, #48]	; (8001184 <__NVIC_SetPriority+0x4c>)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	0112      	lsls	r2, r2, #4
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	440b      	add	r3, r1
 800115c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001160:	e00a      	b.n	8001178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4908      	ldr	r1, [pc, #32]	; (8001188 <__NVIC_SetPriority+0x50>)
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	3b04      	subs	r3, #4
 8001170:	0112      	lsls	r2, r2, #4
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	440b      	add	r3, r1
 8001176:	761a      	strb	r2, [r3, #24]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000e100 	.word	0xe000e100
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f1c3 0307 	rsb	r3, r3, #7
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	bf28      	it	cs
 80011aa:	2304      	movcs	r3, #4
 80011ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3304      	adds	r3, #4
 80011b2:	2b06      	cmp	r3, #6
 80011b4:	d902      	bls.n	80011bc <NVIC_EncodePriority+0x30>
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3b03      	subs	r3, #3
 80011ba:	e000      	b.n	80011be <NVIC_EncodePriority+0x32>
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	f04f 32ff 	mov.w	r2, #4294967295
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43da      	mvns	r2, r3
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	401a      	ands	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d4:	f04f 31ff 	mov.w	r1, #4294967295
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa01 f303 	lsl.w	r3, r1, r3
 80011de:	43d9      	mvns	r1, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	4313      	orrs	r3, r2
         );
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3724      	adds	r7, #36	; 0x24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3b01      	subs	r3, #1
 8001200:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001204:	d301      	bcc.n	800120a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001206:	2301      	movs	r3, #1
 8001208:	e00f      	b.n	800122a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120a:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <SysTick_Config+0x40>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001212:	210f      	movs	r1, #15
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	f7ff ff8e 	bl	8001138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <SysTick_Config+0x40>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001222:	4b04      	ldr	r3, [pc, #16]	; (8001234 <SysTick_Config+0x40>)
 8001224:	2207      	movs	r2, #7
 8001226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	e000e010 	.word	0xe000e010

08001238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff47 	bl	80010d4 <__NVIC_SetPriorityGrouping>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800124e:	b580      	push	{r7, lr}
 8001250:	b086      	sub	sp, #24
 8001252:	af00      	add	r7, sp, #0
 8001254:	4603      	mov	r3, r0
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
 800125a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001260:	f7ff ff5c 	bl	800111c <__NVIC_GetPriorityGrouping>
 8001264:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	68b9      	ldr	r1, [r7, #8]
 800126a:	6978      	ldr	r0, [r7, #20]
 800126c:	f7ff ff8e 	bl	800118c <NVIC_EncodePriority>
 8001270:	4602      	mov	r2, r0
 8001272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff5d 	bl	8001138 <__NVIC_SetPriority>
}
 800127e:	bf00      	nop
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffb0 	bl	80011f4 <SysTick_Config>
 8001294:	4603      	mov	r3, r0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e06c      	b.n	800138c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d106      	bne.n	80012ca <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2223      	movs	r2, #35	; 0x23
 80012c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff fc59 	bl	8000b7c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	4b31      	ldr	r3, [pc, #196]	; (8001394 <HAL_ETH_Init+0xf4>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	4a30      	ldr	r2, [pc, #192]	; (8001394 <HAL_ETH_Init+0xf4>)
 80012d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d8:	6453      	str	r3, [r2, #68]	; 0x44
 80012da:	4b2e      	ldr	r3, [pc, #184]	; (8001394 <HAL_ETH_Init+0xf4>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012e6:	4b2c      	ldr	r3, [pc, #176]	; (8001398 <HAL_ETH_Init+0xf8>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	4a2b      	ldr	r2, [pc, #172]	; (8001398 <HAL_ETH_Init+0xf8>)
 80012ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80012f0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012f2:	4b29      	ldr	r3, [pc, #164]	; (8001398 <HAL_ETH_Init+0xf8>)
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	4927      	ldr	r1, [pc, #156]	; (8001398 <HAL_ETH_Init+0xf8>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001300:	4b25      	ldr	r3, [pc, #148]	; (8001398 <HAL_ETH_Init+0xf8>)
 8001302:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	6812      	ldr	r2, [r2, #0]
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800131a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800131c:	f7ff feaa 	bl	8001074 <HAL_GetTick>
 8001320:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001322:	e011      	b.n	8001348 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001324:	f7ff fea6 	bl	8001074 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001332:	d909      	bls.n	8001348 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2204      	movs	r2, #4
 8001338:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	22e0      	movs	r2, #224	; 0xe0
 8001340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e021      	b.n	800138c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1e4      	bne.n	8001324 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 f958 	bl	8001610 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 f9ff 	bl	8001764 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 fa55 	bl	8001816 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	461a      	mov	r2, r3
 8001372:	2100      	movs	r1, #0
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f9bd 	bl	80016f4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2210      	movs	r2, #16
 8001386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40023800 	.word	0x40023800
 8001398:	40013800 	.word	0x40013800

0800139c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4b51      	ldr	r3, [pc, #324]	; (80014f8 <ETH_SetMACConfig+0x15c>)
 80013b2:	4013      	ands	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	7c1b      	ldrb	r3, [r3, #16]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d102      	bne.n	80013c4 <ETH_SetMACConfig+0x28>
 80013be:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013c2:	e000      	b.n	80013c6 <ETH_SetMACConfig+0x2a>
 80013c4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	7c5b      	ldrb	r3, [r3, #17]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d102      	bne.n	80013d4 <ETH_SetMACConfig+0x38>
 80013ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013d2:	e000      	b.n	80013d6 <ETH_SetMACConfig+0x3a>
 80013d4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013d6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	7fdb      	ldrb	r3, [r3, #31]
 80013e2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80013e4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	7f92      	ldrb	r2, [r2, #30]
 80013f0:	2a00      	cmp	r2, #0
 80013f2:	d102      	bne.n	80013fa <ETH_SetMACConfig+0x5e>
 80013f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013f8:	e000      	b.n	80013fc <ETH_SetMACConfig+0x60>
 80013fa:	2200      	movs	r2, #0
                        macconf->Speed |
 80013fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	7f1b      	ldrb	r3, [r3, #28]
 8001402:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001404:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800140a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	791b      	ldrb	r3, [r3, #4]
 8001410:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001412:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	f892 2020 	ldrb.w	r2, [r2, #32]
 800141a:	2a00      	cmp	r2, #0
 800141c:	d102      	bne.n	8001424 <ETH_SetMACConfig+0x88>
 800141e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001422:	e000      	b.n	8001426 <ETH_SetMACConfig+0x8a>
 8001424:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001426:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	7bdb      	ldrb	r3, [r3, #15]
 800142c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800142e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001434:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800143c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800143e:	4313      	orrs	r3, r2
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001456:	2001      	movs	r0, #1
 8001458:	f7ff fe18 	bl	800108c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001472:	4013      	ands	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800147a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001482:	2a00      	cmp	r2, #0
 8001484:	d101      	bne.n	800148a <ETH_SetMACConfig+0xee>
 8001486:	2280      	movs	r2, #128	; 0x80
 8001488:	e000      	b.n	800148c <ETH_SetMACConfig+0xf0>
 800148a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800148c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001492:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800149a:	2a01      	cmp	r2, #1
 800149c:	d101      	bne.n	80014a2 <ETH_SetMACConfig+0x106>
 800149e:	2208      	movs	r2, #8
 80014a0:	e000      	b.n	80014a4 <ETH_SetMACConfig+0x108>
 80014a2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80014a4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80014ac:	2a01      	cmp	r2, #1
 80014ae:	d101      	bne.n	80014b4 <ETH_SetMACConfig+0x118>
 80014b0:	2204      	movs	r2, #4
 80014b2:	e000      	b.n	80014b6 <ETH_SetMACConfig+0x11a>
 80014b4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80014be:	2a01      	cmp	r2, #1
 80014c0:	d101      	bne.n	80014c6 <ETH_SetMACConfig+0x12a>
 80014c2:	2202      	movs	r2, #2
 80014c4:	e000      	b.n	80014c8 <ETH_SetMACConfig+0x12c>
 80014c6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014c8:	4313      	orrs	r3, r2
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014e0:	2001      	movs	r0, #1
 80014e2:	f7ff fdd3 	bl	800108c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	619a      	str	r2, [r3, #24]
}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	ff20810f 	.word	0xff20810f

080014fc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	4b3d      	ldr	r3, [pc, #244]	; (800160c <ETH_SetDMAConfig+0x110>)
 8001516:	4013      	ands	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	7b1b      	ldrb	r3, [r3, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d102      	bne.n	8001528 <ETH_SetDMAConfig+0x2c>
 8001522:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001526:	e000      	b.n	800152a <ETH_SetDMAConfig+0x2e>
 8001528:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	7b5b      	ldrb	r3, [r3, #13]
 800152e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001530:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	7f52      	ldrb	r2, [r2, #29]
 8001536:	2a00      	cmp	r2, #0
 8001538:	d102      	bne.n	8001540 <ETH_SetDMAConfig+0x44>
 800153a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800153e:	e000      	b.n	8001542 <ETH_SetDMAConfig+0x46>
 8001540:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001542:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	7b9b      	ldrb	r3, [r3, #14]
 8001548:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800154a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001550:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	7f1b      	ldrb	r3, [r3, #28]
 8001556:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001558:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	7f9b      	ldrb	r3, [r3, #30]
 800155e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001560:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001566:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800156e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001570:	4313      	orrs	r3, r2
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	4313      	orrs	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001580:	461a      	mov	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001592:	2001      	movs	r0, #1
 8001594:	f7ff fd7a 	bl	800108c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015a0:	461a      	mov	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	791b      	ldrb	r3, [r3, #4]
 80015aa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015b0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80015b6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015bc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015c4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80015c6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015ce:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015d4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6812      	ldr	r2, [r2, #0]
 80015da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015e2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015f0:	2001      	movs	r0, #1
 80015f2:	f7ff fd4b 	bl	800108c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015fe:	461a      	mov	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6013      	str	r3, [r2, #0]
}
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	f8de3f23 	.word	0xf8de3f23

08001610 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b0a6      	sub	sp, #152	; 0x98
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001618:	2301      	movs	r3, #1
 800161a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800161e:	2301      	movs	r3, #1
 8001620:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001624:	2300      	movs	r3, #0
 8001626:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800162e:	2301      	movs	r3, #1
 8001630:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800163a:	2301      	movs	r3, #1
 800163c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800164c:	2300      	movs	r3, #0
 800164e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001656:	2300      	movs	r3, #0
 8001658:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001672:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001676:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001678:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800167c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001684:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001688:	4619      	mov	r1, r3
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fe86 	bl	800139c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001690:	2301      	movs	r3, #1
 8001692:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001694:	2301      	movs	r3, #1
 8001696:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001698:	2301      	movs	r3, #1
 800169a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800169e:	2301      	movs	r3, #1
 80016a0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80016b6:	2301      	movs	r3, #1
 80016b8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80016bc:	2301      	movs	r3, #1
 80016be:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80016c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016c4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80016c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016ca:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80016cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80016d2:	2301      	movs	r3, #1
 80016d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	4619      	mov	r1, r3
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ff08 	bl	80014fc <ETH_SetDMAConfig>
}
 80016ec:	bf00      	nop
 80016ee:	3798      	adds	r7, #152	; 0x98
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3305      	adds	r3, #5
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	3204      	adds	r2, #4
 800170c:	7812      	ldrb	r2, [r2, #0]
 800170e:	4313      	orrs	r3, r2
 8001710:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <ETH_MACAddressConfig+0x68>)
 8001716:	4413      	add	r3, r2
 8001718:	461a      	mov	r2, r3
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3303      	adds	r3, #3
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	061a      	lsls	r2, r3, #24
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3302      	adds	r3, #2
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	041b      	lsls	r3, r3, #16
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3301      	adds	r3, #1
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	4313      	orrs	r3, r2
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	7812      	ldrb	r2, [r2, #0]
 800173e:	4313      	orrs	r3, r2
 8001740:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <ETH_MACAddressConfig+0x6c>)
 8001746:	4413      	add	r3, r2
 8001748:	461a      	mov	r2, r3
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	6013      	str	r3, [r2, #0]
}
 800174e:	bf00      	nop
 8001750:	371c      	adds	r7, #28
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40028040 	.word	0x40028040
 8001760:	40028044 	.word	0x40028044

08001764 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	e03e      	b.n	80017f0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68d9      	ldr	r1, [r3, #12]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	440b      	add	r3, r1
 8001782:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2200      	movs	r2, #0
 800178e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2200      	movs	r2, #0
 800179a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	3206      	adds	r2, #6
 80017a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d80c      	bhi.n	80017d4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68d9      	ldr	r1, [r3, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	440b      	add	r3, r1
 80017cc:	461a      	mov	r2, r3
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	e004      	b.n	80017de <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	461a      	mov	r2, r3
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	3301      	adds	r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d9bd      	bls.n	8001772 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68da      	ldr	r2, [r3, #12]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001808:	611a      	str	r2, [r3, #16]
}
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001816:	b480      	push	{r7}
 8001818:	b085      	sub	sp, #20
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	e046      	b.n	80018b2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6919      	ldr	r1, [r3, #16]
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	440b      	add	r3, r1
 8001834:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2200      	movs	r2, #0
 8001840:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2200      	movs	r2, #0
 800184c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	2200      	movs	r2, #0
 8001852:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2200      	movs	r2, #0
 8001858:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001860:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001868:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001876:	68b9      	ldr	r1, [r7, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	3212      	adds	r2, #18
 800187e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d80c      	bhi.n	80018a2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6919      	ldr	r1, [r3, #16]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	440b      	add	r3, r1
 800189a:	461a      	mov	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	e004      	b.n	80018ac <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	461a      	mov	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	3301      	adds	r3, #1
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d9b5      	bls.n	8001824 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691a      	ldr	r2, [r3, #16]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e2:	60da      	str	r2, [r3, #12]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b089      	sub	sp, #36	; 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	e177      	b.n	8001bfc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800190c:	2201      	movs	r2, #1
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	429a      	cmp	r2, r3
 8001926:	f040 8166 	bne.w	8001bf6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	2b01      	cmp	r3, #1
 8001934:	d005      	beq.n	8001942 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800193e:	2b02      	cmp	r3, #2
 8001940:	d130      	bne.n	80019a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	2203      	movs	r2, #3
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	68da      	ldr	r2, [r3, #12]
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001978:	2201      	movs	r2, #1
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	091b      	lsrs	r3, r3, #4
 800198e:	f003 0201 	and.w	r2, r3, #1
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d017      	beq.n	80019e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	2203      	movs	r2, #3
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d123      	bne.n	8001a34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	08da      	lsrs	r2, r3, #3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3208      	adds	r2, #8
 80019f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	220f      	movs	r2, #15
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	691a      	ldr	r2, [r3, #16]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	08da      	lsrs	r2, r3, #3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3208      	adds	r2, #8
 8001a2e:	69b9      	ldr	r1, [r7, #24]
 8001a30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	2203      	movs	r2, #3
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 0203 	and.w	r2, r3, #3
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 80c0 	beq.w	8001bf6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	4b66      	ldr	r3, [pc, #408]	; (8001c14 <HAL_GPIO_Init+0x324>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	4a65      	ldr	r2, [pc, #404]	; (8001c14 <HAL_GPIO_Init+0x324>)
 8001a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a84:	6453      	str	r3, [r2, #68]	; 0x44
 8001a86:	4b63      	ldr	r3, [pc, #396]	; (8001c14 <HAL_GPIO_Init+0x324>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a92:	4a61      	ldr	r2, [pc, #388]	; (8001c18 <HAL_GPIO_Init+0x328>)
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	089b      	lsrs	r3, r3, #2
 8001a98:	3302      	adds	r3, #2
 8001a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	220f      	movs	r2, #15
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a58      	ldr	r2, [pc, #352]	; (8001c1c <HAL_GPIO_Init+0x32c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d037      	beq.n	8001b2e <HAL_GPIO_Init+0x23e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a57      	ldr	r2, [pc, #348]	; (8001c20 <HAL_GPIO_Init+0x330>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d031      	beq.n	8001b2a <HAL_GPIO_Init+0x23a>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a56      	ldr	r2, [pc, #344]	; (8001c24 <HAL_GPIO_Init+0x334>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d02b      	beq.n	8001b26 <HAL_GPIO_Init+0x236>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a55      	ldr	r2, [pc, #340]	; (8001c28 <HAL_GPIO_Init+0x338>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d025      	beq.n	8001b22 <HAL_GPIO_Init+0x232>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a54      	ldr	r2, [pc, #336]	; (8001c2c <HAL_GPIO_Init+0x33c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d01f      	beq.n	8001b1e <HAL_GPIO_Init+0x22e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a53      	ldr	r2, [pc, #332]	; (8001c30 <HAL_GPIO_Init+0x340>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d019      	beq.n	8001b1a <HAL_GPIO_Init+0x22a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a52      	ldr	r2, [pc, #328]	; (8001c34 <HAL_GPIO_Init+0x344>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d013      	beq.n	8001b16 <HAL_GPIO_Init+0x226>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a51      	ldr	r2, [pc, #324]	; (8001c38 <HAL_GPIO_Init+0x348>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d00d      	beq.n	8001b12 <HAL_GPIO_Init+0x222>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a50      	ldr	r2, [pc, #320]	; (8001c3c <HAL_GPIO_Init+0x34c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d007      	beq.n	8001b0e <HAL_GPIO_Init+0x21e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a4f      	ldr	r2, [pc, #316]	; (8001c40 <HAL_GPIO_Init+0x350>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d101      	bne.n	8001b0a <HAL_GPIO_Init+0x21a>
 8001b06:	2309      	movs	r3, #9
 8001b08:	e012      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b0a:	230a      	movs	r3, #10
 8001b0c:	e010      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b0e:	2308      	movs	r3, #8
 8001b10:	e00e      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b12:	2307      	movs	r3, #7
 8001b14:	e00c      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b16:	2306      	movs	r3, #6
 8001b18:	e00a      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b1a:	2305      	movs	r3, #5
 8001b1c:	e008      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b1e:	2304      	movs	r3, #4
 8001b20:	e006      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b22:	2303      	movs	r3, #3
 8001b24:	e004      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e002      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	f002 0203 	and.w	r2, r2, #3
 8001b36:	0092      	lsls	r2, r2, #2
 8001b38:	4093      	lsls	r3, r2
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b40:	4935      	ldr	r1, [pc, #212]	; (8001c18 <HAL_GPIO_Init+0x328>)
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	3302      	adds	r3, #2
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b4e:	4b3d      	ldr	r3, [pc, #244]	; (8001c44 <HAL_GPIO_Init+0x354>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b72:	4a34      	ldr	r2, [pc, #208]	; (8001c44 <HAL_GPIO_Init+0x354>)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b78:	4b32      	ldr	r3, [pc, #200]	; (8001c44 <HAL_GPIO_Init+0x354>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b9c:	4a29      	ldr	r2, [pc, #164]	; (8001c44 <HAL_GPIO_Init+0x354>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ba2:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <HAL_GPIO_Init+0x354>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bc6:	4a1f      	ldr	r2, [pc, #124]	; (8001c44 <HAL_GPIO_Init+0x354>)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <HAL_GPIO_Init+0x354>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bf0:	4a14      	ldr	r2, [pc, #80]	; (8001c44 <HAL_GPIO_Init+0x354>)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	61fb      	str	r3, [r7, #28]
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	2b0f      	cmp	r3, #15
 8001c00:	f67f ae84 	bls.w	800190c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	3724      	adds	r7, #36	; 0x24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40013800 	.word	0x40013800
 8001c1c:	40020000 	.word	0x40020000
 8001c20:	40020400 	.word	0x40020400
 8001c24:	40020800 	.word	0x40020800
 8001c28:	40020c00 	.word	0x40020c00
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40021400 	.word	0x40021400
 8001c34:	40021800 	.word	0x40021800
 8001c38:	40021c00 	.word	0x40021c00
 8001c3c:	40022000 	.word	0x40022000
 8001c40:	40022400 	.word	0x40022400
 8001c44:	40013c00 	.word	0x40013c00

08001c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	807b      	strh	r3, [r7, #2]
 8001c54:	4613      	mov	r3, r2
 8001c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c58:	787b      	ldrb	r3, [r7, #1]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c5e:	887a      	ldrh	r2, [r7, #2]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c64:	e003      	b.n	8001c6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c66:	887b      	ldrh	r3, [r7, #2]
 8001c68:	041a      	lsls	r2, r3, #16
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	619a      	str	r2, [r3, #24]
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e12b      	b.n	8001ee6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d106      	bne.n	8001ca8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff f830 	bl	8000d08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2224      	movs	r2, #36	; 0x24
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0201 	bic.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ce0:	f001 fb4e 	bl	8003380 <HAL_RCC_GetPCLK1Freq>
 8001ce4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4a81      	ldr	r2, [pc, #516]	; (8001ef0 <HAL_I2C_Init+0x274>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d807      	bhi.n	8001d00 <HAL_I2C_Init+0x84>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4a80      	ldr	r2, [pc, #512]	; (8001ef4 <HAL_I2C_Init+0x278>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	bf94      	ite	ls
 8001cf8:	2301      	movls	r3, #1
 8001cfa:	2300      	movhi	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	e006      	b.n	8001d0e <HAL_I2C_Init+0x92>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4a7d      	ldr	r2, [pc, #500]	; (8001ef8 <HAL_I2C_Init+0x27c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	bf94      	ite	ls
 8001d08:	2301      	movls	r3, #1
 8001d0a:	2300      	movhi	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e0e7      	b.n	8001ee6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4a78      	ldr	r2, [pc, #480]	; (8001efc <HAL_I2C_Init+0x280>)
 8001d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1e:	0c9b      	lsrs	r3, r3, #18
 8001d20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	4a6a      	ldr	r2, [pc, #424]	; (8001ef0 <HAL_I2C_Init+0x274>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d802      	bhi.n	8001d50 <HAL_I2C_Init+0xd4>
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	e009      	b.n	8001d64 <HAL_I2C_Init+0xe8>
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d56:	fb02 f303 	mul.w	r3, r2, r3
 8001d5a:	4a69      	ldr	r2, [pc, #420]	; (8001f00 <HAL_I2C_Init+0x284>)
 8001d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d60:	099b      	lsrs	r3, r3, #6
 8001d62:	3301      	adds	r3, #1
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	495c      	ldr	r1, [pc, #368]	; (8001ef0 <HAL_I2C_Init+0x274>)
 8001d80:	428b      	cmp	r3, r1
 8001d82:	d819      	bhi.n	8001db8 <HAL_I2C_Init+0x13c>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1e59      	subs	r1, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d92:	1c59      	adds	r1, r3, #1
 8001d94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d98:	400b      	ands	r3, r1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00a      	beq.n	8001db4 <HAL_I2C_Init+0x138>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	1e59      	subs	r1, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dac:	3301      	adds	r3, #1
 8001dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db2:	e051      	b.n	8001e58 <HAL_I2C_Init+0x1dc>
 8001db4:	2304      	movs	r3, #4
 8001db6:	e04f      	b.n	8001e58 <HAL_I2C_Init+0x1dc>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d111      	bne.n	8001de4 <HAL_I2C_Init+0x168>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	1e58      	subs	r0, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6859      	ldr	r1, [r3, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	440b      	add	r3, r1
 8001dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	bf0c      	ite	eq
 8001ddc:	2301      	moveq	r3, #1
 8001dde:	2300      	movne	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	e012      	b.n	8001e0a <HAL_I2C_Init+0x18e>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	1e58      	subs	r0, r3, #1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6859      	ldr	r1, [r3, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	0099      	lsls	r1, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf0c      	ite	eq
 8001e04:	2301      	moveq	r3, #1
 8001e06:	2300      	movne	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_I2C_Init+0x196>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e022      	b.n	8001e58 <HAL_I2C_Init+0x1dc>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10e      	bne.n	8001e38 <HAL_I2C_Init+0x1bc>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1e58      	subs	r0, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6859      	ldr	r1, [r3, #4]
 8001e22:	460b      	mov	r3, r1
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	440b      	add	r3, r1
 8001e28:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e36:	e00f      	b.n	8001e58 <HAL_I2C_Init+0x1dc>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	1e58      	subs	r0, r3, #1
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6859      	ldr	r1, [r3, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	0099      	lsls	r1, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e4e:	3301      	adds	r3, #1
 8001e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	6809      	ldr	r1, [r1, #0]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69da      	ldr	r2, [r3, #28]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6911      	ldr	r1, [r2, #16]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68d2      	ldr	r2, [r2, #12]
 8001e92:	4311      	orrs	r1, r2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	000186a0 	.word	0x000186a0
 8001ef4:	001e847f 	.word	0x001e847f
 8001ef8:	003d08ff 	.word	0x003d08ff
 8001efc:	431bde83 	.word	0x431bde83
 8001f00:	10624dd3 	.word	0x10624dd3

08001f04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	460b      	mov	r3, r1
 8001f12:	817b      	strh	r3, [r7, #10]
 8001f14:	4613      	mov	r3, r2
 8001f16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f18:	f7ff f8ac 	bl	8001074 <HAL_GetTick>
 8001f1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b20      	cmp	r3, #32
 8001f28:	f040 80e0 	bne.w	80020ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2319      	movs	r3, #25
 8001f32:	2201      	movs	r2, #1
 8001f34:	4970      	ldr	r1, [pc, #448]	; (80020f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 fa92 	bl	8002460 <I2C_WaitOnFlagUntilTimeout>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f42:	2302      	movs	r3, #2
 8001f44:	e0d3      	b.n	80020ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d101      	bne.n	8001f54 <HAL_I2C_Master_Transmit+0x50>
 8001f50:	2302      	movs	r3, #2
 8001f52:	e0cc      	b.n	80020ee <HAL_I2C_Master_Transmit+0x1ea>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d007      	beq.n	8001f7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f042 0201 	orr.w	r2, r2, #1
 8001f78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2221      	movs	r2, #33	; 0x21
 8001f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2210      	movs	r2, #16
 8001f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	893a      	ldrh	r2, [r7, #8]
 8001faa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4a50      	ldr	r2, [pc, #320]	; (80020fc <HAL_I2C_Master_Transmit+0x1f8>)
 8001fba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fbc:	8979      	ldrh	r1, [r7, #10]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	6a3a      	ldr	r2, [r7, #32]
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 f9ca 	bl	800235c <I2C_MasterRequestWrite>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e08d      	b.n	80020ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001fe8:	e066      	b.n	80020b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	6a39      	ldr	r1, [r7, #32]
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 fb0c 	bl	800260c <I2C_WaitOnTXEFlagUntilTimeout>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00d      	beq.n	8002016 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d107      	bne.n	8002012 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002010:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e06b      	b.n	80020ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	781a      	ldrb	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002030:	b29b      	uxth	r3, r3
 8002032:	3b01      	subs	r3, #1
 8002034:	b29a      	uxth	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203e:	3b01      	subs	r3, #1
 8002040:	b29a      	uxth	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b04      	cmp	r3, #4
 8002052:	d11b      	bne.n	800208c <HAL_I2C_Master_Transmit+0x188>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002058:	2b00      	cmp	r3, #0
 800205a:	d017      	beq.n	800208c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	781a      	ldrb	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	1c5a      	adds	r2, r3, #1
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002076:	b29b      	uxth	r3, r3
 8002078:	3b01      	subs	r3, #1
 800207a:	b29a      	uxth	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002084:	3b01      	subs	r3, #1
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	6a39      	ldr	r1, [r7, #32]
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 fafc 	bl	800268e <I2C_WaitOnBTFFlagUntilTimeout>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00d      	beq.n	80020b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d107      	bne.n	80020b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e01a      	b.n	80020ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d194      	bne.n	8001fea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	e000      	b.n	80020ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80020ec:	2302      	movs	r3, #2
  }
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	00100002 	.word	0x00100002
 80020fc:	ffff0000 	.word	0xffff0000

08002100 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08a      	sub	sp, #40	; 0x28
 8002104:	af02      	add	r7, sp, #8
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	607a      	str	r2, [r7, #4]
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	460b      	mov	r3, r1
 800210e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002110:	f7fe ffb0 	bl	8001074 <HAL_GetTick>
 8002114:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002116:	2300      	movs	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b20      	cmp	r3, #32
 8002124:	f040 8111 	bne.w	800234a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	2319      	movs	r3, #25
 800212e:	2201      	movs	r2, #1
 8002130:	4988      	ldr	r1, [pc, #544]	; (8002354 <HAL_I2C_IsDeviceReady+0x254>)
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 f994 	bl	8002460 <I2C_WaitOnFlagUntilTimeout>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800213e:	2302      	movs	r3, #2
 8002140:	e104      	b.n	800234c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <HAL_I2C_IsDeviceReady+0x50>
 800214c:	2302      	movs	r3, #2
 800214e:	e0fd      	b.n	800234c <HAL_I2C_IsDeviceReady+0x24c>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b01      	cmp	r3, #1
 8002164:	d007      	beq.n	8002176 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f042 0201 	orr.w	r2, r2, #1
 8002174:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002184:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2224      	movs	r2, #36	; 0x24
 800218a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4a70      	ldr	r2, [pc, #448]	; (8002358 <HAL_I2C_IsDeviceReady+0x258>)
 8002198:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021a8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f952 	bl	8002460 <I2C_WaitOnFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00d      	beq.n	80021de <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021d0:	d103      	bne.n	80021da <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021d8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e0b6      	b.n	800234c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021de:	897b      	ldrh	r3, [r7, #10]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021ec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80021ee:	f7fe ff41 	bl	8001074 <HAL_GetTick>
 80021f2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b02      	cmp	r3, #2
 8002200:	bf0c      	ite	eq
 8002202:	2301      	moveq	r3, #1
 8002204:	2300      	movne	r3, #0
 8002206:	b2db      	uxtb	r3, r3
 8002208:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002218:	bf0c      	ite	eq
 800221a:	2301      	moveq	r3, #1
 800221c:	2300      	movne	r3, #0
 800221e:	b2db      	uxtb	r3, r3
 8002220:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002222:	e025      	b.n	8002270 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002224:	f7fe ff26 	bl	8001074 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d302      	bcc.n	800223a <HAL_I2C_IsDeviceReady+0x13a>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d103      	bne.n	8002242 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	22a0      	movs	r2, #160	; 0xa0
 800223e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b02      	cmp	r3, #2
 800224e:	bf0c      	ite	eq
 8002250:	2301      	moveq	r3, #1
 8002252:	2300      	movne	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002266:	bf0c      	ite	eq
 8002268:	2301      	moveq	r3, #1
 800226a:	2300      	movne	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2ba0      	cmp	r3, #160	; 0xa0
 800227a:	d005      	beq.n	8002288 <HAL_I2C_IsDeviceReady+0x188>
 800227c:	7dfb      	ldrb	r3, [r7, #23]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d102      	bne.n	8002288 <HAL_I2C_IsDeviceReady+0x188>
 8002282:	7dbb      	ldrb	r3, [r7, #22]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0cd      	beq.n	8002224 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2220      	movs	r2, #32
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b02      	cmp	r3, #2
 800229c:	d129      	bne.n	80022f2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	2319      	movs	r3, #25
 80022ca:	2201      	movs	r2, #1
 80022cc:	4921      	ldr	r1, [pc, #132]	; (8002354 <HAL_I2C_IsDeviceReady+0x254>)
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 f8c6 	bl	8002460 <I2C_WaitOnFlagUntilTimeout>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e036      	b.n	800234c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e02c      	b.n	800234c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002300:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800230a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	2319      	movs	r3, #25
 8002312:	2201      	movs	r2, #1
 8002314:	490f      	ldr	r1, [pc, #60]	; (8002354 <HAL_I2C_IsDeviceReady+0x254>)
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f8a2 	bl	8002460 <I2C_WaitOnFlagUntilTimeout>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e012      	b.n	800234c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	3301      	adds	r3, #1
 800232a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	429a      	cmp	r2, r3
 8002332:	f4ff af32 	bcc.w	800219a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2220      	movs	r2, #32
 800233a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800234a:	2302      	movs	r3, #2
  }
}
 800234c:	4618      	mov	r0, r3
 800234e:	3720      	adds	r7, #32
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	00100002 	.word	0x00100002
 8002358:	ffff0000 	.word	0xffff0000

0800235c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af02      	add	r7, sp, #8
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	460b      	mov	r3, r1
 800236a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2b08      	cmp	r3, #8
 8002376:	d006      	beq.n	8002386 <I2C_MasterRequestWrite+0x2a>
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d003      	beq.n	8002386 <I2C_MasterRequestWrite+0x2a>
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002384:	d108      	bne.n	8002398 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	e00b      	b.n	80023b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	2b12      	cmp	r3, #18
 800239e:	d107      	bne.n	80023b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 f84f 	bl	8002460 <I2C_WaitOnFlagUntilTimeout>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00d      	beq.n	80023e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023d6:	d103      	bne.n	80023e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e035      	b.n	8002450 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023ec:	d108      	bne.n	8002400 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023ee:	897b      	ldrh	r3, [r7, #10]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	461a      	mov	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023fc:	611a      	str	r2, [r3, #16]
 80023fe:	e01b      	b.n	8002438 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002400:	897b      	ldrh	r3, [r7, #10]
 8002402:	11db      	asrs	r3, r3, #7
 8002404:	b2db      	uxtb	r3, r3
 8002406:	f003 0306 	and.w	r3, r3, #6
 800240a:	b2db      	uxtb	r3, r3
 800240c:	f063 030f 	orn	r3, r3, #15
 8002410:	b2da      	uxtb	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	490e      	ldr	r1, [pc, #56]	; (8002458 <I2C_MasterRequestWrite+0xfc>)
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 f875 	bl	800250e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e010      	b.n	8002450 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800242e:	897b      	ldrh	r3, [r7, #10]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	4907      	ldr	r1, [pc, #28]	; (800245c <I2C_MasterRequestWrite+0x100>)
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 f865 	bl	800250e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	00010008 	.word	0x00010008
 800245c:	00010002 	.word	0x00010002

08002460 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	4613      	mov	r3, r2
 800246e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002470:	e025      	b.n	80024be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002478:	d021      	beq.n	80024be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800247a:	f7fe fdfb 	bl	8001074 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d302      	bcc.n	8002490 <I2C_WaitOnFlagUntilTimeout+0x30>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d116      	bne.n	80024be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2220      	movs	r2, #32
 800249a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f043 0220 	orr.w	r2, r3, #32
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e023      	b.n	8002506 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	0c1b      	lsrs	r3, r3, #16
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d10d      	bne.n	80024e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	43da      	mvns	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	4013      	ands	r3, r2
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	bf0c      	ite	eq
 80024da:	2301      	moveq	r3, #1
 80024dc:	2300      	movne	r3, #0
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	461a      	mov	r2, r3
 80024e2:	e00c      	b.n	80024fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	43da      	mvns	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	4013      	ands	r3, r2
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	bf0c      	ite	eq
 80024f6:	2301      	moveq	r3, #1
 80024f8:	2300      	movne	r3, #0
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	429a      	cmp	r2, r3
 8002502:	d0b6      	beq.n	8002472 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b084      	sub	sp, #16
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	607a      	str	r2, [r7, #4]
 800251a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800251c:	e051      	b.n	80025c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800252c:	d123      	bne.n	8002576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800253c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002546:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2220      	movs	r2, #32
 8002552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f043 0204 	orr.w	r2, r3, #4
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e046      	b.n	8002604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257c:	d021      	beq.n	80025c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800257e:	f7fe fd79 	bl	8001074 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	429a      	cmp	r2, r3
 800258c:	d302      	bcc.n	8002594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d116      	bne.n	80025c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2220      	movs	r2, #32
 800259e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f043 0220 	orr.w	r2, r3, #32
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e020      	b.n	8002604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	0c1b      	lsrs	r3, r3, #16
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d10c      	bne.n	80025e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	43da      	mvns	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	4013      	ands	r3, r2
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	bf14      	ite	ne
 80025de:	2301      	movne	r3, #1
 80025e0:	2300      	moveq	r3, #0
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	e00b      	b.n	80025fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	43da      	mvns	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	4013      	ands	r3, r2
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf14      	ite	ne
 80025f8:	2301      	movne	r3, #1
 80025fa:	2300      	moveq	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d18d      	bne.n	800251e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002618:	e02d      	b.n	8002676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 f878 	bl	8002710 <I2C_IsAcknowledgeFailed>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e02d      	b.n	8002686 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002630:	d021      	beq.n	8002676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002632:	f7fe fd1f 	bl	8001074 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	429a      	cmp	r2, r3
 8002640:	d302      	bcc.n	8002648 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d116      	bne.n	8002676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2220      	movs	r2, #32
 8002652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f043 0220 	orr.w	r2, r3, #32
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e007      	b.n	8002686 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002680:	2b80      	cmp	r3, #128	; 0x80
 8002682:	d1ca      	bne.n	800261a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800269a:	e02d      	b.n	80026f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 f837 	bl	8002710 <I2C_IsAcknowledgeFailed>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e02d      	b.n	8002708 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b2:	d021      	beq.n	80026f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b4:	f7fe fcde 	bl	8001074 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d302      	bcc.n	80026ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d116      	bne.n	80026f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	f043 0220 	orr.w	r2, r3, #32
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e007      	b.n	8002708 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	2b04      	cmp	r3, #4
 8002704:	d1ca      	bne.n	800269c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002726:	d11b      	bne.n	8002760 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002730:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	f043 0204 	orr.w	r2, r3, #4
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b20      	cmp	r3, #32
 8002782:	d129      	bne.n	80027d8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2224      	movs	r2, #36	; 0x24
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0201 	bic.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0210 	bic.w	r2, r2, #16
 80027aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e000      	b.n	80027da <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80027d8:	2302      	movs	r3, #2
  }
}
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b085      	sub	sp, #20
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b20      	cmp	r3, #32
 80027fe:	d12a      	bne.n	8002856 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2224      	movs	r2, #36	; 0x24
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0201 	bic.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002820:	89fb      	ldrh	r3, [r7, #14]
 8002822:	f023 030f 	bic.w	r3, r3, #15
 8002826:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	b29a      	uxth	r2, r3
 800282c:	89fb      	ldrh	r3, [r7, #14]
 800282e:	4313      	orrs	r3, r2
 8002830:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	89fa      	ldrh	r2, [r7, #14]
 8002838:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f042 0201 	orr.w	r2, r2, #1
 8002848:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	e000      	b.n	8002858 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002856:	2302      	movs	r3, #2
  }
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002866:	b08f      	sub	sp, #60	; 0x3c
 8002868:	af0a      	add	r7, sp, #40	; 0x28
 800286a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e10f      	b.n	8002a96 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d106      	bne.n	8002896 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7fe fac9 	bl	8000e28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2203      	movs	r2, #3
 800289a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d102      	bne.n	80028b0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f001 f8ae 	bl	8003a16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	687e      	ldr	r6, [r7, #4]
 80028c2:	466d      	mov	r5, sp
 80028c4:	f106 0410 	add.w	r4, r6, #16
 80028c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80028d8:	1d33      	adds	r3, r6, #4
 80028da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028dc:	6838      	ldr	r0, [r7, #0]
 80028de:	f001 f839 	bl	8003954 <USB_CoreInit>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0d0      	b.n	8002a96 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2100      	movs	r1, #0
 80028fa:	4618      	mov	r0, r3
 80028fc:	f001 f89c 	bl	8003a38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002900:	2300      	movs	r3, #0
 8002902:	73fb      	strb	r3, [r7, #15]
 8002904:	e04a      	b.n	800299c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002906:	7bfa      	ldrb	r2, [r7, #15]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4413      	add	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	333d      	adds	r3, #61	; 0x3d
 8002916:	2201      	movs	r2, #1
 8002918:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800291a:	7bfa      	ldrb	r2, [r7, #15]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	333c      	adds	r3, #60	; 0x3c
 800292a:	7bfa      	ldrb	r2, [r7, #15]
 800292c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800292e:	7bfa      	ldrb	r2, [r7, #15]
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	b298      	uxth	r0, r3
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	3344      	adds	r3, #68	; 0x44
 8002942:	4602      	mov	r2, r0
 8002944:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002946:	7bfa      	ldrb	r2, [r7, #15]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	3340      	adds	r3, #64	; 0x40
 8002956:	2200      	movs	r2, #0
 8002958:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800295a:	7bfa      	ldrb	r2, [r7, #15]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	3348      	adds	r3, #72	; 0x48
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800296e:	7bfa      	ldrb	r2, [r7, #15]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	334c      	adds	r3, #76	; 0x4c
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002982:	7bfa      	ldrb	r2, [r7, #15]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	3354      	adds	r3, #84	; 0x54
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	3301      	adds	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
 800299c:	7bfa      	ldrb	r2, [r7, #15]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d3af      	bcc.n	8002906 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a6:	2300      	movs	r3, #0
 80029a8:	73fb      	strb	r3, [r7, #15]
 80029aa:	e044      	b.n	8002a36 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4413      	add	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80029be:	2200      	movs	r2, #0
 80029c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029c2:	7bfa      	ldrb	r2, [r7, #15]
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80029d4:	7bfa      	ldrb	r2, [r7, #15]
 80029d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029d8:	7bfa      	ldrb	r2, [r7, #15]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4413      	add	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a04:	7bfa      	ldrb	r2, [r7, #15]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a1a:	7bfa      	ldrb	r2, [r7, #15]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	3301      	adds	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
 8002a36:	7bfa      	ldrb	r2, [r7, #15]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d3b5      	bcc.n	80029ac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	603b      	str	r3, [r7, #0]
 8002a46:	687e      	ldr	r6, [r7, #4]
 8002a48:	466d      	mov	r5, sp
 8002a4a:	f106 0410 	add.w	r4, r6, #16
 8002a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a5e:	1d33      	adds	r3, r6, #4
 8002a60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a62:	6838      	ldr	r0, [r7, #0]
 8002a64:	f001 f834 	bl	8003ad0 <USB_DevInit>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2202      	movs	r2, #2
 8002a72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e00d      	b.n	8002a96 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f001 f9ff 	bl	8003e92 <USB_DevDisconnect>

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002aa0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e267      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d075      	beq.n	8002baa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002abe:	4b88      	ldr	r3, [pc, #544]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d00c      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aca:	4b85      	ldr	r3, [pc, #532]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d112      	bne.n	8002afc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ad6:	4b82      	ldr	r3, [pc, #520]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ade:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ae2:	d10b      	bne.n	8002afc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae4:	4b7e      	ldr	r3, [pc, #504]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d05b      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x108>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d157      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e242      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b04:	d106      	bne.n	8002b14 <HAL_RCC_OscConfig+0x74>
 8002b06:	4b76      	ldr	r3, [pc, #472]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a75      	ldr	r2, [pc, #468]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	e01d      	b.n	8002b50 <HAL_RCC_OscConfig+0xb0>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b1c:	d10c      	bne.n	8002b38 <HAL_RCC_OscConfig+0x98>
 8002b1e:	4b70      	ldr	r3, [pc, #448]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a6f      	ldr	r2, [pc, #444]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	4b6d      	ldr	r3, [pc, #436]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a6c      	ldr	r2, [pc, #432]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	e00b      	b.n	8002b50 <HAL_RCC_OscConfig+0xb0>
 8002b38:	4b69      	ldr	r3, [pc, #420]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a68      	ldr	r2, [pc, #416]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	4b66      	ldr	r3, [pc, #408]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a65      	ldr	r2, [pc, #404]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d013      	beq.n	8002b80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b58:	f7fe fa8c 	bl	8001074 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b60:	f7fe fa88 	bl	8001074 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b64      	cmp	r3, #100	; 0x64
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e207      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b72:	4b5b      	ldr	r3, [pc, #364]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0xc0>
 8002b7e:	e014      	b.n	8002baa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b80:	f7fe fa78 	bl	8001074 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b88:	f7fe fa74 	bl	8001074 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b64      	cmp	r3, #100	; 0x64
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e1f3      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b9a:	4b51      	ldr	r3, [pc, #324]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0xe8>
 8002ba6:	e000      	b.n	8002baa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d063      	beq.n	8002c7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bb6:	4b4a      	ldr	r3, [pc, #296]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 030c 	and.w	r3, r3, #12
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00b      	beq.n	8002bda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bc2:	4b47      	ldr	r3, [pc, #284]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d11c      	bne.n	8002c08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bce:	4b44      	ldr	r3, [pc, #272]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d116      	bne.n	8002c08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bda:	4b41      	ldr	r3, [pc, #260]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x152>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d001      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e1c7      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf2:	4b3b      	ldr	r3, [pc, #236]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4937      	ldr	r1, [pc, #220]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c06:	e03a      	b.n	8002c7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d020      	beq.n	8002c52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c10:	4b34      	ldr	r3, [pc, #208]	; (8002ce4 <HAL_RCC_OscConfig+0x244>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c16:	f7fe fa2d 	bl	8001074 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c1e:	f7fe fa29 	bl	8001074 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e1a8      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c30:	4b2b      	ldr	r3, [pc, #172]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0f0      	beq.n	8002c1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3c:	4b28      	ldr	r3, [pc, #160]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4925      	ldr	r1, [pc, #148]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	600b      	str	r3, [r1, #0]
 8002c50:	e015      	b.n	8002c7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c52:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <HAL_RCC_OscConfig+0x244>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7fe fa0c 	bl	8001074 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c60:	f7fe fa08 	bl	8001074 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e187      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c72:	4b1b      	ldr	r3, [pc, #108]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d036      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d016      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c92:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <HAL_RCC_OscConfig+0x248>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c98:	f7fe f9ec 	bl	8001074 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ca0:	f7fe f9e8 	bl	8001074 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e167      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x200>
 8002cbe:	e01b      	b.n	8002cf8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cc0:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <HAL_RCC_OscConfig+0x248>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc6:	f7fe f9d5 	bl	8001074 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ccc:	e00e      	b.n	8002cec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cce:	f7fe f9d1 	bl	8001074 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d907      	bls.n	8002cec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e150      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	42470000 	.word	0x42470000
 8002ce8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cec:	4b88      	ldr	r3, [pc, #544]	; (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1ea      	bne.n	8002cce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 8097 	beq.w	8002e34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d06:	2300      	movs	r3, #0
 8002d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d0a:	4b81      	ldr	r3, [pc, #516]	; (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10f      	bne.n	8002d36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	4b7d      	ldr	r3, [pc, #500]	; (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	4a7c      	ldr	r2, [pc, #496]	; (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d24:	6413      	str	r3, [r2, #64]	; 0x40
 8002d26:	4b7a      	ldr	r3, [pc, #488]	; (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d32:	2301      	movs	r3, #1
 8002d34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d36:	4b77      	ldr	r3, [pc, #476]	; (8002f14 <HAL_RCC_OscConfig+0x474>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d118      	bne.n	8002d74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d42:	4b74      	ldr	r3, [pc, #464]	; (8002f14 <HAL_RCC_OscConfig+0x474>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a73      	ldr	r2, [pc, #460]	; (8002f14 <HAL_RCC_OscConfig+0x474>)
 8002d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d4e:	f7fe f991 	bl	8001074 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d56:	f7fe f98d 	bl	8001074 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e10c      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d68:	4b6a      	ldr	r3, [pc, #424]	; (8002f14 <HAL_RCC_OscConfig+0x474>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d106      	bne.n	8002d8a <HAL_RCC_OscConfig+0x2ea>
 8002d7c:	4b64      	ldr	r3, [pc, #400]	; (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d80:	4a63      	ldr	r2, [pc, #396]	; (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	6713      	str	r3, [r2, #112]	; 0x70
 8002d88:	e01c      	b.n	8002dc4 <HAL_RCC_OscConfig+0x324>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b05      	cmp	r3, #5
 8002d90:	d10c      	bne.n	8002dac <HAL_RCC_OscConfig+0x30c>
 8002d92:	4b5f      	ldr	r3, [pc, #380]	; (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d96:	4a5e      	ldr	r2, [pc, #376]	; (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d9e:	4b5c      	ldr	r3, [pc, #368]	; (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da2:	4a5b      	ldr	r2, [pc, #364]	; (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6713      	str	r3, [r2, #112]	; 0x70
 8002daa:	e00b      	b.n	8002dc4 <HAL_RCC_OscConfig+0x324>
 8002dac:	4b58      	ldr	r3, [pc, #352]	; (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db0:	4a57      	ldr	r2, [pc, #348]	; (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002db2:	f023 0301 	bic.w	r3, r3, #1
 8002db6:	6713      	str	r3, [r2, #112]	; 0x70
 8002db8:	4b55      	ldr	r3, [pc, #340]	; (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbc:	4a54      	ldr	r2, [pc, #336]	; (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002dbe:	f023 0304 	bic.w	r3, r3, #4
 8002dc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d015      	beq.n	8002df8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dcc:	f7fe f952 	bl	8001074 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd2:	e00a      	b.n	8002dea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd4:	f7fe f94e 	bl	8001074 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e0cb      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dea:	4b49      	ldr	r3, [pc, #292]	; (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0ee      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x334>
 8002df6:	e014      	b.n	8002e22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df8:	f7fe f93c 	bl	8001074 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dfe:	e00a      	b.n	8002e16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e00:	f7fe f938 	bl	8001074 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e0b5      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e16:	4b3e      	ldr	r3, [pc, #248]	; (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1ee      	bne.n	8002e00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e22:	7dfb      	ldrb	r3, [r7, #23]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d105      	bne.n	8002e34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e28:	4b39      	ldr	r3, [pc, #228]	; (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	4a38      	ldr	r2, [pc, #224]	; (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 80a1 	beq.w	8002f80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e3e:	4b34      	ldr	r3, [pc, #208]	; (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d05c      	beq.n	8002f04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d141      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e52:	4b31      	ldr	r3, [pc, #196]	; (8002f18 <HAL_RCC_OscConfig+0x478>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7fe f90c 	bl	8001074 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e60:	f7fe f908 	bl	8001074 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e087      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e72:	4b27      	ldr	r3, [pc, #156]	; (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69da      	ldr	r2, [r3, #28]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	019b      	lsls	r3, r3, #6
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e94:	085b      	lsrs	r3, r3, #1
 8002e96:	3b01      	subs	r3, #1
 8002e98:	041b      	lsls	r3, r3, #16
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	061b      	lsls	r3, r3, #24
 8002ea2:	491b      	ldr	r1, [pc, #108]	; (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ea8:	4b1b      	ldr	r3, [pc, #108]	; (8002f18 <HAL_RCC_OscConfig+0x478>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eae:	f7fe f8e1 	bl	8001074 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb6:	f7fe f8dd 	bl	8001074 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e05c      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec8:	4b11      	ldr	r3, [pc, #68]	; (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x416>
 8002ed4:	e054      	b.n	8002f80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed6:	4b10      	ldr	r3, [pc, #64]	; (8002f18 <HAL_RCC_OscConfig+0x478>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002edc:	f7fe f8ca 	bl	8001074 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee4:	f7fe f8c6 	bl	8001074 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e045      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef6:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <HAL_RCC_OscConfig+0x470>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f0      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x444>
 8002f02:	e03d      	b.n	8002f80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d107      	bne.n	8002f1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e038      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
 8002f10:	40023800 	.word	0x40023800
 8002f14:	40007000 	.word	0x40007000
 8002f18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f1c:	4b1b      	ldr	r3, [pc, #108]	; (8002f8c <HAL_RCC_OscConfig+0x4ec>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d028      	beq.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d121      	bne.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d11a      	bne.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d111      	bne.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f62:	085b      	lsrs	r3, r3, #1
 8002f64:	3b01      	subs	r3, #1
 8002f66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d107      	bne.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40023800 	.word	0x40023800

08002f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0cc      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa4:	4b68      	ldr	r3, [pc, #416]	; (8003148 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d90c      	bls.n	8002fcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb2:	4b65      	ldr	r3, [pc, #404]	; (8003148 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fba:	4b63      	ldr	r3, [pc, #396]	; (8003148 <HAL_RCC_ClockConfig+0x1b8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0b8      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d020      	beq.n	800301a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fe4:	4b59      	ldr	r3, [pc, #356]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	4a58      	ldr	r2, [pc, #352]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ffc:	4b53      	ldr	r3, [pc, #332]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	4a52      	ldr	r2, [pc, #328]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003006:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003008:	4b50      	ldr	r3, [pc, #320]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	494d      	ldr	r1, [pc, #308]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	4313      	orrs	r3, r2
 8003018:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d044      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d107      	bne.n	800303e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302e:	4b47      	ldr	r3, [pc, #284]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d119      	bne.n	800306e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e07f      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d003      	beq.n	800304e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800304a:	2b03      	cmp	r3, #3
 800304c:	d107      	bne.n	800305e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800304e:	4b3f      	ldr	r3, [pc, #252]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d109      	bne.n	800306e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e06f      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305e:	4b3b      	ldr	r3, [pc, #236]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e067      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800306e:	4b37      	ldr	r3, [pc, #220]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f023 0203 	bic.w	r2, r3, #3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4934      	ldr	r1, [pc, #208]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 800307c:	4313      	orrs	r3, r2
 800307e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003080:	f7fd fff8 	bl	8001074 <HAL_GetTick>
 8003084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003086:	e00a      	b.n	800309e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003088:	f7fd fff4 	bl	8001074 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	f241 3288 	movw	r2, #5000	; 0x1388
 8003096:	4293      	cmp	r3, r2
 8003098:	d901      	bls.n	800309e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e04f      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309e:	4b2b      	ldr	r3, [pc, #172]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 020c 	and.w	r2, r3, #12
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d1eb      	bne.n	8003088 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030b0:	4b25      	ldr	r3, [pc, #148]	; (8003148 <HAL_RCC_ClockConfig+0x1b8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d20c      	bcs.n	80030d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030be:	4b22      	ldr	r3, [pc, #136]	; (8003148 <HAL_RCC_ClockConfig+0x1b8>)
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c6:	4b20      	ldr	r3, [pc, #128]	; (8003148 <HAL_RCC_ClockConfig+0x1b8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e032      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e4:	4b19      	ldr	r3, [pc, #100]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4916      	ldr	r1, [pc, #88]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d009      	beq.n	8003116 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003102:	4b12      	ldr	r3, [pc, #72]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	490e      	ldr	r1, [pc, #56]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003116:	f000 f821 	bl	800315c <HAL_RCC_GetSysClockFreq>
 800311a:	4602      	mov	r2, r0
 800311c:	4b0b      	ldr	r3, [pc, #44]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	091b      	lsrs	r3, r3, #4
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	490a      	ldr	r1, [pc, #40]	; (8003150 <HAL_RCC_ClockConfig+0x1c0>)
 8003128:	5ccb      	ldrb	r3, [r1, r3]
 800312a:	fa22 f303 	lsr.w	r3, r2, r3
 800312e:	4a09      	ldr	r2, [pc, #36]	; (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003132:	4b09      	ldr	r3, [pc, #36]	; (8003158 <HAL_RCC_ClockConfig+0x1c8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7fd ff58 	bl	8000fec <HAL_InitTick>

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40023c00 	.word	0x40023c00
 800314c:	40023800 	.word	0x40023800
 8003150:	08003fd4 	.word	0x08003fd4
 8003154:	20000000 	.word	0x20000000
 8003158:	20000004 	.word	0x20000004

0800315c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800315c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003160:	b094      	sub	sp, #80	; 0x50
 8003162:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	647b      	str	r3, [r7, #68]	; 0x44
 8003168:	2300      	movs	r3, #0
 800316a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800316c:	2300      	movs	r3, #0
 800316e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003174:	4b79      	ldr	r3, [pc, #484]	; (800335c <HAL_RCC_GetSysClockFreq+0x200>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 030c 	and.w	r3, r3, #12
 800317c:	2b08      	cmp	r3, #8
 800317e:	d00d      	beq.n	800319c <HAL_RCC_GetSysClockFreq+0x40>
 8003180:	2b08      	cmp	r3, #8
 8003182:	f200 80e1 	bhi.w	8003348 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x34>
 800318a:	2b04      	cmp	r3, #4
 800318c:	d003      	beq.n	8003196 <HAL_RCC_GetSysClockFreq+0x3a>
 800318e:	e0db      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003190:	4b73      	ldr	r3, [pc, #460]	; (8003360 <HAL_RCC_GetSysClockFreq+0x204>)
 8003192:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003194:	e0db      	b.n	800334e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003196:	4b73      	ldr	r3, [pc, #460]	; (8003364 <HAL_RCC_GetSysClockFreq+0x208>)
 8003198:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800319a:	e0d8      	b.n	800334e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800319c:	4b6f      	ldr	r3, [pc, #444]	; (800335c <HAL_RCC_GetSysClockFreq+0x200>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031a6:	4b6d      	ldr	r3, [pc, #436]	; (800335c <HAL_RCC_GetSysClockFreq+0x200>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d063      	beq.n	800327a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031b2:	4b6a      	ldr	r3, [pc, #424]	; (800335c <HAL_RCC_GetSysClockFreq+0x200>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	099b      	lsrs	r3, r3, #6
 80031b8:	2200      	movs	r2, #0
 80031ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80031bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c4:	633b      	str	r3, [r7, #48]	; 0x30
 80031c6:	2300      	movs	r3, #0
 80031c8:	637b      	str	r3, [r7, #52]	; 0x34
 80031ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031ce:	4622      	mov	r2, r4
 80031d0:	462b      	mov	r3, r5
 80031d2:	f04f 0000 	mov.w	r0, #0
 80031d6:	f04f 0100 	mov.w	r1, #0
 80031da:	0159      	lsls	r1, r3, #5
 80031dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031e0:	0150      	lsls	r0, r2, #5
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	4621      	mov	r1, r4
 80031e8:	1a51      	subs	r1, r2, r1
 80031ea:	6139      	str	r1, [r7, #16]
 80031ec:	4629      	mov	r1, r5
 80031ee:	eb63 0301 	sbc.w	r3, r3, r1
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003200:	4659      	mov	r1, fp
 8003202:	018b      	lsls	r3, r1, #6
 8003204:	4651      	mov	r1, sl
 8003206:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800320a:	4651      	mov	r1, sl
 800320c:	018a      	lsls	r2, r1, #6
 800320e:	4651      	mov	r1, sl
 8003210:	ebb2 0801 	subs.w	r8, r2, r1
 8003214:	4659      	mov	r1, fp
 8003216:	eb63 0901 	sbc.w	r9, r3, r1
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003226:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800322a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800322e:	4690      	mov	r8, r2
 8003230:	4699      	mov	r9, r3
 8003232:	4623      	mov	r3, r4
 8003234:	eb18 0303 	adds.w	r3, r8, r3
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	462b      	mov	r3, r5
 800323c:	eb49 0303 	adc.w	r3, r9, r3
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800324e:	4629      	mov	r1, r5
 8003250:	024b      	lsls	r3, r1, #9
 8003252:	4621      	mov	r1, r4
 8003254:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003258:	4621      	mov	r1, r4
 800325a:	024a      	lsls	r2, r1, #9
 800325c:	4610      	mov	r0, r2
 800325e:	4619      	mov	r1, r3
 8003260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003262:	2200      	movs	r2, #0
 8003264:	62bb      	str	r3, [r7, #40]	; 0x28
 8003266:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003268:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800326c:	f7fc ffbe 	bl	80001ec <__aeabi_uldivmod>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4613      	mov	r3, r2
 8003276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003278:	e058      	b.n	800332c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800327a:	4b38      	ldr	r3, [pc, #224]	; (800335c <HAL_RCC_GetSysClockFreq+0x200>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	099b      	lsrs	r3, r3, #6
 8003280:	2200      	movs	r2, #0
 8003282:	4618      	mov	r0, r3
 8003284:	4611      	mov	r1, r2
 8003286:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800328a:	623b      	str	r3, [r7, #32]
 800328c:	2300      	movs	r3, #0
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
 8003290:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003294:	4642      	mov	r2, r8
 8003296:	464b      	mov	r3, r9
 8003298:	f04f 0000 	mov.w	r0, #0
 800329c:	f04f 0100 	mov.w	r1, #0
 80032a0:	0159      	lsls	r1, r3, #5
 80032a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032a6:	0150      	lsls	r0, r2, #5
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4641      	mov	r1, r8
 80032ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80032b2:	4649      	mov	r1, r9
 80032b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032cc:	ebb2 040a 	subs.w	r4, r2, sl
 80032d0:	eb63 050b 	sbc.w	r5, r3, fp
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	00eb      	lsls	r3, r5, #3
 80032de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032e2:	00e2      	lsls	r2, r4, #3
 80032e4:	4614      	mov	r4, r2
 80032e6:	461d      	mov	r5, r3
 80032e8:	4643      	mov	r3, r8
 80032ea:	18e3      	adds	r3, r4, r3
 80032ec:	603b      	str	r3, [r7, #0]
 80032ee:	464b      	mov	r3, r9
 80032f0:	eb45 0303 	adc.w	r3, r5, r3
 80032f4:	607b      	str	r3, [r7, #4]
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003302:	4629      	mov	r1, r5
 8003304:	028b      	lsls	r3, r1, #10
 8003306:	4621      	mov	r1, r4
 8003308:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800330c:	4621      	mov	r1, r4
 800330e:	028a      	lsls	r2, r1, #10
 8003310:	4610      	mov	r0, r2
 8003312:	4619      	mov	r1, r3
 8003314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003316:	2200      	movs	r2, #0
 8003318:	61bb      	str	r3, [r7, #24]
 800331a:	61fa      	str	r2, [r7, #28]
 800331c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003320:	f7fc ff64 	bl	80001ec <__aeabi_uldivmod>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4613      	mov	r3, r2
 800332a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800332c:	4b0b      	ldr	r3, [pc, #44]	; (800335c <HAL_RCC_GetSysClockFreq+0x200>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	0c1b      	lsrs	r3, r3, #16
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	3301      	adds	r3, #1
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800333c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800333e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003340:	fbb2 f3f3 	udiv	r3, r2, r3
 8003344:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003346:	e002      	b.n	800334e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003348:	4b05      	ldr	r3, [pc, #20]	; (8003360 <HAL_RCC_GetSysClockFreq+0x204>)
 800334a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800334c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800334e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003350:	4618      	mov	r0, r3
 8003352:	3750      	adds	r7, #80	; 0x50
 8003354:	46bd      	mov	sp, r7
 8003356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800335a:	bf00      	nop
 800335c:	40023800 	.word	0x40023800
 8003360:	00f42400 	.word	0x00f42400
 8003364:	007a1200 	.word	0x007a1200

08003368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800336c:	4b03      	ldr	r3, [pc, #12]	; (800337c <HAL_RCC_GetHCLKFreq+0x14>)
 800336e:	681b      	ldr	r3, [r3, #0]
}
 8003370:	4618      	mov	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	20000000 	.word	0x20000000

08003380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003384:	f7ff fff0 	bl	8003368 <HAL_RCC_GetHCLKFreq>
 8003388:	4602      	mov	r2, r0
 800338a:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	0a9b      	lsrs	r3, r3, #10
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	4903      	ldr	r1, [pc, #12]	; (80033a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003396:	5ccb      	ldrb	r3, [r1, r3]
 8003398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800339c:	4618      	mov	r0, r3
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40023800 	.word	0x40023800
 80033a4:	08003fe4 	.word	0x08003fe4

080033a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033ac:	f7ff ffdc 	bl	8003368 <HAL_RCC_GetHCLKFreq>
 80033b0:	4602      	mov	r2, r0
 80033b2:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	0b5b      	lsrs	r3, r3, #13
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	4903      	ldr	r1, [pc, #12]	; (80033cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033be:	5ccb      	ldrb	r3, [r1, r3]
 80033c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40023800 	.word	0x40023800
 80033cc:	08003fe4 	.word	0x08003fe4

080033d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e03f      	b.n	8003462 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fd fcce 	bl	8000d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2224      	movs	r2, #36	; 0x24
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003412:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f829 	bl	800346c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003428:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695a      	ldr	r2, [r3, #20]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003438:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003448:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800346c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003470:	b0c0      	sub	sp, #256	; 0x100
 8003472:	af00      	add	r7, sp, #0
 8003474:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003488:	68d9      	ldr	r1, [r3, #12]
 800348a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	ea40 0301 	orr.w	r3, r0, r1
 8003494:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	431a      	orrs	r2, r3
 80034a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034c4:	f021 010c 	bic.w	r1, r1, #12
 80034c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034d2:	430b      	orrs	r3, r1
 80034d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e6:	6999      	ldr	r1, [r3, #24]
 80034e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	ea40 0301 	orr.w	r3, r0, r1
 80034f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	4b8f      	ldr	r3, [pc, #572]	; (8003738 <UART_SetConfig+0x2cc>)
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d005      	beq.n	800350c <UART_SetConfig+0xa0>
 8003500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	4b8d      	ldr	r3, [pc, #564]	; (800373c <UART_SetConfig+0x2d0>)
 8003508:	429a      	cmp	r2, r3
 800350a:	d104      	bne.n	8003516 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800350c:	f7ff ff4c 	bl	80033a8 <HAL_RCC_GetPCLK2Freq>
 8003510:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003514:	e003      	b.n	800351e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003516:	f7ff ff33 	bl	8003380 <HAL_RCC_GetPCLK1Freq>
 800351a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800351e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003528:	f040 810c 	bne.w	8003744 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800352c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003530:	2200      	movs	r2, #0
 8003532:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003536:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800353a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800353e:	4622      	mov	r2, r4
 8003540:	462b      	mov	r3, r5
 8003542:	1891      	adds	r1, r2, r2
 8003544:	65b9      	str	r1, [r7, #88]	; 0x58
 8003546:	415b      	adcs	r3, r3
 8003548:	65fb      	str	r3, [r7, #92]	; 0x5c
 800354a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800354e:	4621      	mov	r1, r4
 8003550:	eb12 0801 	adds.w	r8, r2, r1
 8003554:	4629      	mov	r1, r5
 8003556:	eb43 0901 	adc.w	r9, r3, r1
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003566:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800356a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800356e:	4690      	mov	r8, r2
 8003570:	4699      	mov	r9, r3
 8003572:	4623      	mov	r3, r4
 8003574:	eb18 0303 	adds.w	r3, r8, r3
 8003578:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800357c:	462b      	mov	r3, r5
 800357e:	eb49 0303 	adc.w	r3, r9, r3
 8003582:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003592:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003596:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800359a:	460b      	mov	r3, r1
 800359c:	18db      	adds	r3, r3, r3
 800359e:	653b      	str	r3, [r7, #80]	; 0x50
 80035a0:	4613      	mov	r3, r2
 80035a2:	eb42 0303 	adc.w	r3, r2, r3
 80035a6:	657b      	str	r3, [r7, #84]	; 0x54
 80035a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80035ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80035b0:	f7fc fe1c 	bl	80001ec <__aeabi_uldivmod>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4b61      	ldr	r3, [pc, #388]	; (8003740 <UART_SetConfig+0x2d4>)
 80035ba:	fba3 2302 	umull	r2, r3, r3, r2
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	011c      	lsls	r4, r3, #4
 80035c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035c6:	2200      	movs	r2, #0
 80035c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80035d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80035d4:	4642      	mov	r2, r8
 80035d6:	464b      	mov	r3, r9
 80035d8:	1891      	adds	r1, r2, r2
 80035da:	64b9      	str	r1, [r7, #72]	; 0x48
 80035dc:	415b      	adcs	r3, r3
 80035de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035e4:	4641      	mov	r1, r8
 80035e6:	eb12 0a01 	adds.w	sl, r2, r1
 80035ea:	4649      	mov	r1, r9
 80035ec:	eb43 0b01 	adc.w	fp, r3, r1
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003600:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003604:	4692      	mov	sl, r2
 8003606:	469b      	mov	fp, r3
 8003608:	4643      	mov	r3, r8
 800360a:	eb1a 0303 	adds.w	r3, sl, r3
 800360e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003612:	464b      	mov	r3, r9
 8003614:	eb4b 0303 	adc.w	r3, fp, r3
 8003618:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800361c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003628:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800362c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003630:	460b      	mov	r3, r1
 8003632:	18db      	adds	r3, r3, r3
 8003634:	643b      	str	r3, [r7, #64]	; 0x40
 8003636:	4613      	mov	r3, r2
 8003638:	eb42 0303 	adc.w	r3, r2, r3
 800363c:	647b      	str	r3, [r7, #68]	; 0x44
 800363e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003642:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003646:	f7fc fdd1 	bl	80001ec <__aeabi_uldivmod>
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	4611      	mov	r1, r2
 8003650:	4b3b      	ldr	r3, [pc, #236]	; (8003740 <UART_SetConfig+0x2d4>)
 8003652:	fba3 2301 	umull	r2, r3, r3, r1
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	2264      	movs	r2, #100	; 0x64
 800365a:	fb02 f303 	mul.w	r3, r2, r3
 800365e:	1acb      	subs	r3, r1, r3
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003666:	4b36      	ldr	r3, [pc, #216]	; (8003740 <UART_SetConfig+0x2d4>)
 8003668:	fba3 2302 	umull	r2, r3, r3, r2
 800366c:	095b      	lsrs	r3, r3, #5
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003674:	441c      	add	r4, r3
 8003676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800367a:	2200      	movs	r2, #0
 800367c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003680:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003684:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003688:	4642      	mov	r2, r8
 800368a:	464b      	mov	r3, r9
 800368c:	1891      	adds	r1, r2, r2
 800368e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003690:	415b      	adcs	r3, r3
 8003692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003694:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003698:	4641      	mov	r1, r8
 800369a:	1851      	adds	r1, r2, r1
 800369c:	6339      	str	r1, [r7, #48]	; 0x30
 800369e:	4649      	mov	r1, r9
 80036a0:	414b      	adcs	r3, r1
 80036a2:	637b      	str	r3, [r7, #52]	; 0x34
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	f04f 0300 	mov.w	r3, #0
 80036ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80036b0:	4659      	mov	r1, fp
 80036b2:	00cb      	lsls	r3, r1, #3
 80036b4:	4651      	mov	r1, sl
 80036b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036ba:	4651      	mov	r1, sl
 80036bc:	00ca      	lsls	r2, r1, #3
 80036be:	4610      	mov	r0, r2
 80036c0:	4619      	mov	r1, r3
 80036c2:	4603      	mov	r3, r0
 80036c4:	4642      	mov	r2, r8
 80036c6:	189b      	adds	r3, r3, r2
 80036c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036cc:	464b      	mov	r3, r9
 80036ce:	460a      	mov	r2, r1
 80036d0:	eb42 0303 	adc.w	r3, r2, r3
 80036d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036ec:	460b      	mov	r3, r1
 80036ee:	18db      	adds	r3, r3, r3
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036f2:	4613      	mov	r3, r2
 80036f4:	eb42 0303 	adc.w	r3, r2, r3
 80036f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003702:	f7fc fd73 	bl	80001ec <__aeabi_uldivmod>
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <UART_SetConfig+0x2d4>)
 800370c:	fba3 1302 	umull	r1, r3, r3, r2
 8003710:	095b      	lsrs	r3, r3, #5
 8003712:	2164      	movs	r1, #100	; 0x64
 8003714:	fb01 f303 	mul.w	r3, r1, r3
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	3332      	adds	r3, #50	; 0x32
 800371e:	4a08      	ldr	r2, [pc, #32]	; (8003740 <UART_SetConfig+0x2d4>)
 8003720:	fba2 2303 	umull	r2, r3, r2, r3
 8003724:	095b      	lsrs	r3, r3, #5
 8003726:	f003 0207 	and.w	r2, r3, #7
 800372a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4422      	add	r2, r4
 8003732:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003734:	e106      	b.n	8003944 <UART_SetConfig+0x4d8>
 8003736:	bf00      	nop
 8003738:	40011000 	.word	0x40011000
 800373c:	40011400 	.word	0x40011400
 8003740:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003748:	2200      	movs	r2, #0
 800374a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800374e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003752:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003756:	4642      	mov	r2, r8
 8003758:	464b      	mov	r3, r9
 800375a:	1891      	adds	r1, r2, r2
 800375c:	6239      	str	r1, [r7, #32]
 800375e:	415b      	adcs	r3, r3
 8003760:	627b      	str	r3, [r7, #36]	; 0x24
 8003762:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003766:	4641      	mov	r1, r8
 8003768:	1854      	adds	r4, r2, r1
 800376a:	4649      	mov	r1, r9
 800376c:	eb43 0501 	adc.w	r5, r3, r1
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	f04f 0300 	mov.w	r3, #0
 8003778:	00eb      	lsls	r3, r5, #3
 800377a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800377e:	00e2      	lsls	r2, r4, #3
 8003780:	4614      	mov	r4, r2
 8003782:	461d      	mov	r5, r3
 8003784:	4643      	mov	r3, r8
 8003786:	18e3      	adds	r3, r4, r3
 8003788:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800378c:	464b      	mov	r3, r9
 800378e:	eb45 0303 	adc.w	r3, r5, r3
 8003792:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037b2:	4629      	mov	r1, r5
 80037b4:	008b      	lsls	r3, r1, #2
 80037b6:	4621      	mov	r1, r4
 80037b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037bc:	4621      	mov	r1, r4
 80037be:	008a      	lsls	r2, r1, #2
 80037c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80037c4:	f7fc fd12 	bl	80001ec <__aeabi_uldivmod>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	4b60      	ldr	r3, [pc, #384]	; (8003950 <UART_SetConfig+0x4e4>)
 80037ce:	fba3 2302 	umull	r2, r3, r3, r2
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	011c      	lsls	r4, r3, #4
 80037d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037da:	2200      	movs	r2, #0
 80037dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80037e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80037e8:	4642      	mov	r2, r8
 80037ea:	464b      	mov	r3, r9
 80037ec:	1891      	adds	r1, r2, r2
 80037ee:	61b9      	str	r1, [r7, #24]
 80037f0:	415b      	adcs	r3, r3
 80037f2:	61fb      	str	r3, [r7, #28]
 80037f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037f8:	4641      	mov	r1, r8
 80037fa:	1851      	adds	r1, r2, r1
 80037fc:	6139      	str	r1, [r7, #16]
 80037fe:	4649      	mov	r1, r9
 8003800:	414b      	adcs	r3, r1
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003810:	4659      	mov	r1, fp
 8003812:	00cb      	lsls	r3, r1, #3
 8003814:	4651      	mov	r1, sl
 8003816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800381a:	4651      	mov	r1, sl
 800381c:	00ca      	lsls	r2, r1, #3
 800381e:	4610      	mov	r0, r2
 8003820:	4619      	mov	r1, r3
 8003822:	4603      	mov	r3, r0
 8003824:	4642      	mov	r2, r8
 8003826:	189b      	adds	r3, r3, r2
 8003828:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800382c:	464b      	mov	r3, r9
 800382e:	460a      	mov	r2, r1
 8003830:	eb42 0303 	adc.w	r3, r2, r3
 8003834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	67bb      	str	r3, [r7, #120]	; 0x78
 8003842:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	f04f 0300 	mov.w	r3, #0
 800384c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003850:	4649      	mov	r1, r9
 8003852:	008b      	lsls	r3, r1, #2
 8003854:	4641      	mov	r1, r8
 8003856:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800385a:	4641      	mov	r1, r8
 800385c:	008a      	lsls	r2, r1, #2
 800385e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003862:	f7fc fcc3 	bl	80001ec <__aeabi_uldivmod>
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	4611      	mov	r1, r2
 800386c:	4b38      	ldr	r3, [pc, #224]	; (8003950 <UART_SetConfig+0x4e4>)
 800386e:	fba3 2301 	umull	r2, r3, r3, r1
 8003872:	095b      	lsrs	r3, r3, #5
 8003874:	2264      	movs	r2, #100	; 0x64
 8003876:	fb02 f303 	mul.w	r3, r2, r3
 800387a:	1acb      	subs	r3, r1, r3
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	3332      	adds	r3, #50	; 0x32
 8003880:	4a33      	ldr	r2, [pc, #204]	; (8003950 <UART_SetConfig+0x4e4>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800388c:	441c      	add	r4, r3
 800388e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003892:	2200      	movs	r2, #0
 8003894:	673b      	str	r3, [r7, #112]	; 0x70
 8003896:	677a      	str	r2, [r7, #116]	; 0x74
 8003898:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800389c:	4642      	mov	r2, r8
 800389e:	464b      	mov	r3, r9
 80038a0:	1891      	adds	r1, r2, r2
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	415b      	adcs	r3, r3
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038ac:	4641      	mov	r1, r8
 80038ae:	1851      	adds	r1, r2, r1
 80038b0:	6039      	str	r1, [r7, #0]
 80038b2:	4649      	mov	r1, r9
 80038b4:	414b      	adcs	r3, r1
 80038b6:	607b      	str	r3, [r7, #4]
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038c4:	4659      	mov	r1, fp
 80038c6:	00cb      	lsls	r3, r1, #3
 80038c8:	4651      	mov	r1, sl
 80038ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ce:	4651      	mov	r1, sl
 80038d0:	00ca      	lsls	r2, r1, #3
 80038d2:	4610      	mov	r0, r2
 80038d4:	4619      	mov	r1, r3
 80038d6:	4603      	mov	r3, r0
 80038d8:	4642      	mov	r2, r8
 80038da:	189b      	adds	r3, r3, r2
 80038dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80038de:	464b      	mov	r3, r9
 80038e0:	460a      	mov	r2, r1
 80038e2:	eb42 0303 	adc.w	r3, r2, r3
 80038e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	663b      	str	r3, [r7, #96]	; 0x60
 80038f2:	667a      	str	r2, [r7, #100]	; 0x64
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	f04f 0300 	mov.w	r3, #0
 80038fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003900:	4649      	mov	r1, r9
 8003902:	008b      	lsls	r3, r1, #2
 8003904:	4641      	mov	r1, r8
 8003906:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800390a:	4641      	mov	r1, r8
 800390c:	008a      	lsls	r2, r1, #2
 800390e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003912:	f7fc fc6b 	bl	80001ec <__aeabi_uldivmod>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <UART_SetConfig+0x4e4>)
 800391c:	fba3 1302 	umull	r1, r3, r3, r2
 8003920:	095b      	lsrs	r3, r3, #5
 8003922:	2164      	movs	r1, #100	; 0x64
 8003924:	fb01 f303 	mul.w	r3, r1, r3
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	3332      	adds	r3, #50	; 0x32
 800392e:	4a08      	ldr	r2, [pc, #32]	; (8003950 <UART_SetConfig+0x4e4>)
 8003930:	fba2 2303 	umull	r2, r3, r2, r3
 8003934:	095b      	lsrs	r3, r3, #5
 8003936:	f003 020f 	and.w	r2, r3, #15
 800393a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4422      	add	r2, r4
 8003942:	609a      	str	r2, [r3, #8]
}
 8003944:	bf00      	nop
 8003946:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800394a:	46bd      	mov	sp, r7
 800394c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003950:	51eb851f 	.word	0x51eb851f

08003954 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003954:	b084      	sub	sp, #16
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	f107 001c 	add.w	r0, r7, #28
 8003962:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	2b01      	cmp	r3, #1
 800396a:	d122      	bne.n	80039b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003970:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003996:	2b01      	cmp	r3, #1
 8003998:	d105      	bne.n	80039a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 faa2 	bl	8003ef0 <USB_CoreReset>
 80039ac:	4603      	mov	r3, r0
 80039ae:	73fb      	strb	r3, [r7, #15]
 80039b0:	e01a      	b.n	80039e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fa96 	bl	8003ef0 <USB_CoreReset>
 80039c4:	4603      	mov	r3, r0
 80039c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80039c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	639a      	str	r2, [r3, #56]	; 0x38
 80039da:	e005      	b.n	80039e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80039e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d10b      	bne.n	8003a06 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f043 0206 	orr.w	r2, r3, #6
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f043 0220 	orr.w	r2, r3, #32
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a12:	b004      	add	sp, #16
 8003a14:	4770      	bx	lr

08003a16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f023 0201 	bic.w	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d115      	bne.n	8003a86 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a66:	2001      	movs	r0, #1
 8003a68:	f7fd fb10 	bl	800108c <HAL_Delay>
      ms++;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fa2e 	bl	8003ed4 <USB_GetMode>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d01e      	beq.n	8003abc <USB_SetCurrentMode+0x84>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b31      	cmp	r3, #49	; 0x31
 8003a82:	d9f0      	bls.n	8003a66 <USB_SetCurrentMode+0x2e>
 8003a84:	e01a      	b.n	8003abc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d115      	bne.n	8003ab8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a98:	2001      	movs	r0, #1
 8003a9a:	f7fd faf7 	bl	800108c <HAL_Delay>
      ms++;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fa15 	bl	8003ed4 <USB_GetMode>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <USB_SetCurrentMode+0x84>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2b31      	cmp	r3, #49	; 0x31
 8003ab4:	d9f0      	bls.n	8003a98 <USB_SetCurrentMode+0x60>
 8003ab6:	e001      	b.n	8003abc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e005      	b.n	8003ac8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2b32      	cmp	r3, #50	; 0x32
 8003ac0:	d101      	bne.n	8003ac6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b086      	sub	sp, #24
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003ade:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003aea:	2300      	movs	r3, #0
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	e009      	b.n	8003b04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	3340      	adds	r3, #64	; 0x40
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	2200      	movs	r2, #0
 8003afc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	3301      	adds	r3, #1
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	2b0e      	cmp	r3, #14
 8003b08:	d9f2      	bls.n	8003af0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d11c      	bne.n	8003b4a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b1e:	f043 0302 	orr.w	r3, r3, #2
 8003b22:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b34:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b40:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	639a      	str	r2, [r3, #56]	; 0x38
 8003b48:	e00b      	b.n	8003b62 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b68:	461a      	mov	r2, r3
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b74:	4619      	mov	r1, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	680b      	ldr	r3, [r1, #0]
 8003b80:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d10c      	bne.n	8003ba2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d104      	bne.n	8003b98 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b8e:	2100      	movs	r1, #0
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f965 	bl	8003e60 <USB_SetDevSpeed>
 8003b96:	e008      	b.n	8003baa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b98:	2101      	movs	r1, #1
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f960 	bl	8003e60 <USB_SetDevSpeed>
 8003ba0:	e003      	b.n	8003baa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003ba2:	2103      	movs	r1, #3
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f95b 	bl	8003e60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003baa:	2110      	movs	r1, #16
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f8f3 	bl	8003d98 <USB_FlushTxFifo>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f91f 	bl	8003e00 <USB_FlushRxFifo>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bde:	461a      	mov	r2, r3
 8003be0:	2300      	movs	r3, #0
 8003be2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bea:	461a      	mov	r2, r3
 8003bec:	2300      	movs	r3, #0
 8003bee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	e043      	b.n	8003c7e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c0c:	d118      	bne.n	8003c40 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10a      	bne.n	8003c2a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c20:	461a      	mov	r2, r3
 8003c22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	e013      	b.n	8003c52 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	015a      	lsls	r2, r3, #5
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c36:	461a      	mov	r2, r3
 8003c38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	e008      	b.n	8003c52 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	2300      	movs	r3, #0
 8003c50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c5e:	461a      	mov	r2, r3
 8003c60:	2300      	movs	r3, #0
 8003c62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c70:	461a      	mov	r2, r3
 8003c72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	613b      	str	r3, [r7, #16]
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d3b7      	bcc.n	8003bf6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c86:	2300      	movs	r3, #0
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	e043      	b.n	8003d14 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ca2:	d118      	bne.n	8003cd6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10a      	bne.n	8003cc0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	e013      	b.n	8003ce8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ccc:	461a      	mov	r2, r3
 8003cce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	e008      	b.n	8003ce8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d06:	461a      	mov	r2, r3
 8003d08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	3301      	adds	r3, #1
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d3b7      	bcc.n	8003c8c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003d3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d105      	bne.n	8003d50 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	f043 0210 	orr.w	r2, r3, #16
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699a      	ldr	r2, [r3, #24]
 8003d54:	4b0f      	ldr	r3, [pc, #60]	; (8003d94 <USB_DevInit+0x2c4>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d005      	beq.n	8003d6e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	f043 0208 	orr.w	r2, r3, #8
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d107      	bne.n	8003d84 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d7c:	f043 0304 	orr.w	r3, r3, #4
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d90:	b004      	add	sp, #16
 8003d92:	4770      	bx	lr
 8003d94:	803c3800 	.word	0x803c3800

08003d98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	3301      	adds	r3, #1
 8003daa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4a13      	ldr	r2, [pc, #76]	; (8003dfc <USB_FlushTxFifo+0x64>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d901      	bls.n	8003db8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e01b      	b.n	8003df0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	daf2      	bge.n	8003da6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	019b      	lsls	r3, r3, #6
 8003dc8:	f043 0220 	orr.w	r2, r3, #32
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4a08      	ldr	r2, [pc, #32]	; (8003dfc <USB_FlushTxFifo+0x64>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d901      	bls.n	8003de2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e006      	b.n	8003df0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f003 0320 	and.w	r3, r3, #32
 8003dea:	2b20      	cmp	r3, #32
 8003dec:	d0f0      	beq.n	8003dd0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	00030d40 	.word	0x00030d40

08003e00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4a11      	ldr	r2, [pc, #68]	; (8003e5c <USB_FlushRxFifo+0x5c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d901      	bls.n	8003e1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e018      	b.n	8003e50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	daf2      	bge.n	8003e0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2210      	movs	r2, #16
 8003e2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	3301      	adds	r3, #1
 8003e34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4a08      	ldr	r2, [pc, #32]	; (8003e5c <USB_FlushRxFifo+0x5c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d901      	bls.n	8003e42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e006      	b.n	8003e50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0310 	and.w	r3, r3, #16
 8003e4a:	2b10      	cmp	r3, #16
 8003e4c:	d0f0      	beq.n	8003e30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	00030d40 	.word	0x00030d40

08003e60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	68f9      	ldr	r1, [r7, #12]
 8003e7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e80:	4313      	orrs	r3, r2
 8003e82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b085      	sub	sp, #20
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003eac:	f023 0303 	bic.w	r3, r3, #3
 8003eb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ec0:	f043 0302 	orr.w	r3, r3, #2
 8003ec4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	3301      	adds	r3, #1
 8003f00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4a13      	ldr	r2, [pc, #76]	; (8003f54 <USB_CoreReset+0x64>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d901      	bls.n	8003f0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e01b      	b.n	8003f46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	daf2      	bge.n	8003efc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	f043 0201 	orr.w	r2, r3, #1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4a09      	ldr	r2, [pc, #36]	; (8003f54 <USB_CoreReset+0x64>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d901      	bls.n	8003f38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e006      	b.n	8003f46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d0f0      	beq.n	8003f26 <USB_CoreReset+0x36>

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	00030d40 	.word	0x00030d40

08003f58 <memset>:
 8003f58:	4402      	add	r2, r0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d100      	bne.n	8003f62 <memset+0xa>
 8003f60:	4770      	bx	lr
 8003f62:	f803 1b01 	strb.w	r1, [r3], #1
 8003f66:	e7f9      	b.n	8003f5c <memset+0x4>

08003f68 <__libc_init_array>:
 8003f68:	b570      	push	{r4, r5, r6, lr}
 8003f6a:	4d0d      	ldr	r5, [pc, #52]	; (8003fa0 <__libc_init_array+0x38>)
 8003f6c:	4c0d      	ldr	r4, [pc, #52]	; (8003fa4 <__libc_init_array+0x3c>)
 8003f6e:	1b64      	subs	r4, r4, r5
 8003f70:	10a4      	asrs	r4, r4, #2
 8003f72:	2600      	movs	r6, #0
 8003f74:	42a6      	cmp	r6, r4
 8003f76:	d109      	bne.n	8003f8c <__libc_init_array+0x24>
 8003f78:	4d0b      	ldr	r5, [pc, #44]	; (8003fa8 <__libc_init_array+0x40>)
 8003f7a:	4c0c      	ldr	r4, [pc, #48]	; (8003fac <__libc_init_array+0x44>)
 8003f7c:	f000 f818 	bl	8003fb0 <_init>
 8003f80:	1b64      	subs	r4, r4, r5
 8003f82:	10a4      	asrs	r4, r4, #2
 8003f84:	2600      	movs	r6, #0
 8003f86:	42a6      	cmp	r6, r4
 8003f88:	d105      	bne.n	8003f96 <__libc_init_array+0x2e>
 8003f8a:	bd70      	pop	{r4, r5, r6, pc}
 8003f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f90:	4798      	blx	r3
 8003f92:	3601      	adds	r6, #1
 8003f94:	e7ee      	b.n	8003f74 <__libc_init_array+0xc>
 8003f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f9a:	4798      	blx	r3
 8003f9c:	3601      	adds	r6, #1
 8003f9e:	e7f2      	b.n	8003f86 <__libc_init_array+0x1e>
 8003fa0:	08003ff4 	.word	0x08003ff4
 8003fa4:	08003ff4 	.word	0x08003ff4
 8003fa8:	08003ff4 	.word	0x08003ff4
 8003fac:	08003ff8 	.word	0x08003ff8

08003fb0 <_init>:
 8003fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb2:	bf00      	nop
 8003fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fb6:	bc08      	pop	{r3}
 8003fb8:	469e      	mov	lr, r3
 8003fba:	4770      	bx	lr

08003fbc <_fini>:
 8003fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fbe:	bf00      	nop
 8003fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fc2:	bc08      	pop	{r3}
 8003fc4:	469e      	mov	lr, r3
 8003fc6:	4770      	bx	lr
