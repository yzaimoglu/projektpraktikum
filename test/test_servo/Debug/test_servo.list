
test_servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004218  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080043c4  080043c4  000143c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043dc  080043dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080043dc  080043dc  000143dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043e4  080043e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043e4  080043e4  000143e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043e8  080043e8  000143e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080043ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000007f4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000800  20000800  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000134f2  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002467  00000000  00000000  00033571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010b0  00000000  00000000  000359d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d18  00000000  00000000  00036a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024dc8  00000000  00000000  000377a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000127e1  00000000  00000000  0005c568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e1eb8  00000000  00000000  0006ed49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004830  00000000  00000000  00150c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00155434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080043ac 	.word	0x080043ac

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080043ac 	.word	0x080043ac

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 fd50 	bl	8000f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f816 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f99a 	bl	800082c <MX_GPIO_Init>
  MX_ETH_Init();
 80004f8:	f000 f87c 	bl	80005f4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80004fc:	f000 f93e 	bl	800077c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000500:	f000 f966 	bl	80007d0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000504:	f000 f8c4 	bl	8000690 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim2);
  servo_start_init(&htim2, TIM_CHANNEL_2);
 8000508:	2104      	movs	r1, #4
 800050a:	4804      	ldr	r0, [pc, #16]	; (800051c <main+0x34>)
 800050c:	f000 fa8a 	bl	8000a24 <servo_start_init>
  servo_reset();
 8000510:	f000 faa4 	bl	8000a5c <servo_reset>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  servo_demo();
 8000514:	f000 faac 	bl	8000a70 <servo_demo>
 8000518:	e7fc      	b.n	8000514 <main+0x2c>
 800051a:	bf00      	nop
 800051c:	20000250 	.word	0x20000250

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2230      	movs	r2, #48	; 0x30
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f003 ff10 	bl	8004354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	4b28      	ldr	r3, [pc, #160]	; (80005ec <SystemClock_Config+0xcc>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a27      	ldr	r2, [pc, #156]	; (80005ec <SystemClock_Config+0xcc>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b25      	ldr	r3, [pc, #148]	; (80005ec <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <SystemClock_Config+0xd0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a21      	ldr	r2, [pc, #132]	; (80005f0 <SystemClock_Config+0xd0>)
 800056a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800057c:	2301      	movs	r3, #1
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000580:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000590:	2304      	movs	r3, #4
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000594:	23a8      	movs	r3, #168	; 0xa8
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059c:	2307      	movs	r3, #7
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f001 fca5 	bl	8001ef4 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b0:	f000 f9ea 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80005c0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2105      	movs	r1, #5
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 ff06 	bl	80023e4 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005de:	f000 f9d3 	bl	8000988 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <MX_ETH_Init+0x84>)
 80005fa:	4a20      	ldr	r2, [pc, #128]	; (800067c <MX_ETH_Init+0x88>)
 80005fc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005fe:	4b20      	ldr	r3, [pc, #128]	; (8000680 <MX_ETH_Init+0x8c>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000604:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <MX_ETH_Init+0x8c>)
 8000606:	2280      	movs	r2, #128	; 0x80
 8000608:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800060a:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <MX_ETH_Init+0x8c>)
 800060c:	22e1      	movs	r2, #225	; 0xe1
 800060e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000610:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <MX_ETH_Init+0x8c>)
 8000612:	2200      	movs	r2, #0
 8000614:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000616:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <MX_ETH_Init+0x8c>)
 8000618:	2200      	movs	r2, #0
 800061a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800061c:	4b18      	ldr	r3, [pc, #96]	; (8000680 <MX_ETH_Init+0x8c>)
 800061e:	2200      	movs	r2, #0
 8000620:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_ETH_Init+0x84>)
 8000624:	4a16      	ldr	r2, [pc, #88]	; (8000680 <MX_ETH_Init+0x8c>)
 8000626:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_ETH_Init+0x84>)
 800062a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800062e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_ETH_Init+0x84>)
 8000632:	4a14      	ldr	r2, [pc, #80]	; (8000684 <MX_ETH_Init+0x90>)
 8000634:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <MX_ETH_Init+0x84>)
 8000638:	4a13      	ldr	r2, [pc, #76]	; (8000688 <MX_ETH_Init+0x94>)
 800063a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800063c:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_ETH_Init+0x84>)
 800063e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000642:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000644:	480c      	ldr	r0, [pc, #48]	; (8000678 <MX_ETH_Init+0x84>)
 8000646:	f000 fe4b 	bl	80012e0 <HAL_ETH_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000650:	f000 f99a 	bl	8000988 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000654:	2238      	movs	r2, #56	; 0x38
 8000656:	2100      	movs	r1, #0
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <MX_ETH_Init+0x98>)
 800065a:	f003 fe7b 	bl	8004354 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <MX_ETH_Init+0x98>)
 8000660:	2221      	movs	r2, #33	; 0x21
 8000662:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_ETH_Init+0x98>)
 8000666:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800066a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <MX_ETH_Init+0x98>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200001a0 	.word	0x200001a0
 800067c:	40028000 	.word	0x40028000
 8000680:	200007e8 	.word	0x200007e8
 8000684:	20000100 	.word	0x20000100
 8000688:	20000060 	.word	0x20000060
 800068c:	20000028 	.word	0x20000028

08000690 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08e      	sub	sp, #56	; 0x38
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000696:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a4:	f107 0320 	add.w	r3, r7, #32
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
 80006bc:	615a      	str	r2, [r3, #20]
 80006be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006c0:	4b2d      	ldr	r3, [pc, #180]	; (8000778 <MX_TIM2_Init+0xe8>)
 80006c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 419;
 80006c8:	4b2b      	ldr	r3, [pc, #172]	; (8000778 <MX_TIM2_Init+0xe8>)
 80006ca:	f240 12a3 	movw	r2, #419	; 0x1a3
 80006ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d0:	4b29      	ldr	r3, [pc, #164]	; (8000778 <MX_TIM2_Init+0xe8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80006d6:	4b28      	ldr	r3, [pc, #160]	; (8000778 <MX_TIM2_Init+0xe8>)
 80006d8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80006dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006de:	4b26      	ldr	r3, [pc, #152]	; (8000778 <MX_TIM2_Init+0xe8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e4:	4b24      	ldr	r3, [pc, #144]	; (8000778 <MX_TIM2_Init+0xe8>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006ea:	4823      	ldr	r0, [pc, #140]	; (8000778 <MX_TIM2_Init+0xe8>)
 80006ec:	f002 f89a 	bl	8002824 <HAL_TIM_Base_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80006f6:	f000 f947 	bl	8000988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000700:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000704:	4619      	mov	r1, r3
 8000706:	481c      	ldr	r0, [pc, #112]	; (8000778 <MX_TIM2_Init+0xe8>)
 8000708:	f002 fbc6 	bl	8002e98 <HAL_TIM_ConfigClockSource>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000712:	f000 f939 	bl	8000988 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000716:	4818      	ldr	r0, [pc, #96]	; (8000778 <MX_TIM2_Init+0xe8>)
 8000718:	f002 f8d3 	bl	80028c2 <HAL_TIM_PWM_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000722:	f000 f931 	bl	8000988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000726:	2300      	movs	r3, #0
 8000728:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800072a:	2300      	movs	r3, #0
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800072e:	f107 0320 	add.w	r3, r7, #32
 8000732:	4619      	mov	r1, r3
 8000734:	4810      	ldr	r0, [pc, #64]	; (8000778 <MX_TIM2_Init+0xe8>)
 8000736:	f002 ffb9 	bl	80036ac <HAL_TIMEx_MasterConfigSynchronization>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000740:	f000 f922 	bl	8000988 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000744:	2360      	movs	r3, #96	; 0x60
 8000746:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 120;
 8000748:	2378      	movs	r3, #120	; 0x78
 800074a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2204      	movs	r2, #4
 8000758:	4619      	mov	r1, r3
 800075a:	4807      	ldr	r0, [pc, #28]	; (8000778 <MX_TIM2_Init+0xe8>)
 800075c:	f002 fada 	bl	8002d14 <HAL_TIM_PWM_ConfigChannel>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000766:	f000 f90f 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800076a:	4803      	ldr	r0, [pc, #12]	; (8000778 <MX_TIM2_Init+0xe8>)
 800076c:	f000 fac6 	bl	8000cfc <HAL_TIM_MspPostInit>

}
 8000770:	bf00      	nop
 8000772:	3738      	adds	r7, #56	; 0x38
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000250 	.word	0x20000250

0800077c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 8000782:	4a12      	ldr	r2, [pc, #72]	; (80007cc <MX_USART3_UART_Init+0x50>)
 8000784:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 80007b4:	f003 f80a 	bl	80037cc <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007be:	f000 f8e3 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000298 	.word	0x20000298
 80007cc:	40004800 	.word	0x40004800

080007d0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007de:	2204      	movs	r2, #4
 80007e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e4:	2202      	movs	r2, #2
 80007e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f0:	2202      	movs	r2, #2
 80007f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000808:	2201      	movs	r2, #1
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000814:	f001 fa51 	bl	8001cba <HAL_PCD_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800081e:	f000 f8b3 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200002dc 	.word	0x200002dc

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
 8000846:	4b4c      	ldr	r3, [pc, #304]	; (8000978 <MX_GPIO_Init+0x14c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a4b      	ldr	r2, [pc, #300]	; (8000978 <MX_GPIO_Init+0x14c>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b49      	ldr	r3, [pc, #292]	; (8000978 <MX_GPIO_Init+0x14c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
 8000862:	4b45      	ldr	r3, [pc, #276]	; (8000978 <MX_GPIO_Init+0x14c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a44      	ldr	r2, [pc, #272]	; (8000978 <MX_GPIO_Init+0x14c>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b42      	ldr	r3, [pc, #264]	; (8000978 <MX_GPIO_Init+0x14c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	4b3e      	ldr	r3, [pc, #248]	; (8000978 <MX_GPIO_Init+0x14c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a3d      	ldr	r2, [pc, #244]	; (8000978 <MX_GPIO_Init+0x14c>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b3b      	ldr	r3, [pc, #236]	; (8000978 <MX_GPIO_Init+0x14c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	4b37      	ldr	r3, [pc, #220]	; (8000978 <MX_GPIO_Init+0x14c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a36      	ldr	r2, [pc, #216]	; (8000978 <MX_GPIO_Init+0x14c>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b34      	ldr	r3, [pc, #208]	; (8000978 <MX_GPIO_Init+0x14c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	4b30      	ldr	r3, [pc, #192]	; (8000978 <MX_GPIO_Init+0x14c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a2f      	ldr	r2, [pc, #188]	; (8000978 <MX_GPIO_Init+0x14c>)
 80008bc:	f043 0308 	orr.w	r3, r3, #8
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <MX_GPIO_Init+0x14c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0308 	and.w	r3, r3, #8
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b29      	ldr	r3, [pc, #164]	; (8000978 <MX_GPIO_Init+0x14c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a28      	ldr	r2, [pc, #160]	; (8000978 <MX_GPIO_Init+0x14c>)
 80008d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b26      	ldr	r3, [pc, #152]	; (8000978 <MX_GPIO_Init+0x14c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f244 0181 	movw	r1, #16513	; 0x4081
 80008f0:	4822      	ldr	r0, [pc, #136]	; (800097c <MX_GPIO_Init+0x150>)
 80008f2:	f001 f9c9 	bl	8001c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2140      	movs	r1, #64	; 0x40
 80008fa:	4821      	ldr	r0, [pc, #132]	; (8000980 <MX_GPIO_Init+0x154>)
 80008fc:	f001 f9c4 	bl	8001c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000900:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000906:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	481b      	ldr	r0, [pc, #108]	; (8000984 <MX_GPIO_Init+0x158>)
 8000918:	f001 f80a 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800091c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4811      	ldr	r0, [pc, #68]	; (800097c <MX_GPIO_Init+0x150>)
 8000936:	f000 fffb 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800093a:	2340      	movs	r3, #64	; 0x40
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <MX_GPIO_Init+0x154>)
 8000952:	f000 ffed 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_GPIO_Init+0x154>)
 800096a:	f000 ffe1 	bl	8001930 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800096e:	bf00      	nop
 8000970:	3730      	adds	r7, #48	; 0x30
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800
 800097c:	40020400 	.word	0x40020400
 8000980:	40021800 	.word	0x40021800
 8000984:	40020800 	.word	0x40020800

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x8>
	...

08000994 <set_Pulse>:




static void set_Pulse(uint32_t pulse)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	if(pulse <= UPPER_PULSE_LIMIT && pulse >= LOWER_PULSE_LIMIT)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2bfa      	cmp	r3, #250	; 0xfa
 80009a0:	d825      	bhi.n	80009ee <set_Pulse+0x5a>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b31      	cmp	r3, #49	; 0x31
 80009a6:	d922      	bls.n	80009ee <set_Pulse+0x5a>
	{
		__HAL_TIM_SET_COMPARE(timhandle,channel,pulse);
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <set_Pulse+0x68>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d105      	bne.n	80009bc <set_Pulse+0x28>
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <set_Pulse+0x6c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80009ba:	e018      	b.n	80009ee <set_Pulse+0x5a>
		__HAL_TIM_SET_COMPARE(timhandle,channel,pulse);
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <set_Pulse+0x68>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b04      	cmp	r3, #4
 80009c2:	d105      	bne.n	80009d0 <set_Pulse+0x3c>
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <set_Pulse+0x6c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80009ce:	e00e      	b.n	80009ee <set_Pulse+0x5a>
		__HAL_TIM_SET_COMPARE(timhandle,channel,pulse);
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <set_Pulse+0x68>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b08      	cmp	r3, #8
 80009d6:	d105      	bne.n	80009e4 <set_Pulse+0x50>
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <set_Pulse+0x6c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80009e2:	e004      	b.n	80009ee <set_Pulse+0x5a>
		__HAL_TIM_SET_COMPARE(timhandle,channel,pulse);
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <set_Pulse+0x6c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	200007f4 	.word	0x200007f4
 8000a00:	200007f0 	.word	0x200007f0

08000a04 <set_Servospeed>:

static void set_Servospeed(SERVO_Speed speed)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	servospeed = speed;
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	4a03      	ldr	r2, [pc, #12]	; (8000a20 <set_Servospeed+0x1c>)
 8000a12:	6013      	str	r3, [r2, #0]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	200007f8 	.word	0x200007f8

08000a24 <servo_start_init>:


HAL_StatusTypeDef servo_start_init(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
	timhandle = htim;
 8000a2e:	4a09      	ldr	r2, [pc, #36]	; (8000a54 <servo_start_init+0x30>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6013      	str	r3, [r2, #0]
	channel = Channel;
 8000a34:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <servo_start_init+0x34>)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	6013      	str	r3, [r2, #0]
	set_Servospeed(SERVO_SPEED_NORMAL);
 8000a3a:	200a      	movs	r0, #10
 8000a3c:	f7ff ffe2 	bl	8000a04 <set_Servospeed>
	return HAL_TIM_PWM_Start(htim, Channel);
 8000a40:	6839      	ldr	r1, [r7, #0]
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f001 ff96 	bl	8002974 <HAL_TIM_PWM_Start>
 8000a48:	4603      	mov	r3, r0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200007f0 	.word	0x200007f0
 8000a58:	200007f4 	.word	0x200007f4

08000a5c <servo_reset>:


void servo_reset()
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	set_Pulse(LOWER_PULSE_LIMIT);
 8000a60:	2032      	movs	r0, #50	; 0x32
 8000a62:	f7ff ff97 	bl	8000994 <set_Pulse>
	HAL_Delay(200);
 8000a66:	20c8      	movs	r0, #200	; 0xc8
 8000a68:	f000 fb04 	bl	8001074 <HAL_Delay>
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <servo_demo>:


void servo_demo()
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
	set_Servospeed(SERVO_SPEED_FAST);
 8000a76:	200f      	movs	r0, #15
 8000a78:	f7ff ffc4 	bl	8000a04 <set_Servospeed>
	for(uint32_t pulse = 50; pulse < 250; pulse ++){
 8000a7c:	2332      	movs	r3, #50	; 0x32
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	e00a      	b.n	8000a98 <servo_demo+0x28>
		set_Pulse(pulse);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ff86 	bl	8000994 <set_Pulse>
		HAL_Delay(servospeed);
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <servo_demo+0x60>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 faf1 	bl	8001074 <HAL_Delay>
	for(uint32_t pulse = 50; pulse < 250; pulse ++){
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3301      	adds	r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2bf9      	cmp	r3, #249	; 0xf9
 8000a9c:	d9f1      	bls.n	8000a82 <servo_demo+0x12>

	}
	set_Servospeed(SERVO_SPEED_SLOW);
 8000a9e:	2005      	movs	r0, #5
 8000aa0:	f7ff ffb0 	bl	8000a04 <set_Servospeed>
	for(uint32_t pulse = 250; pulse > 50; pulse --){
 8000aa4:	23fa      	movs	r3, #250	; 0xfa
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	e00a      	b.n	8000ac0 <servo_demo+0x50>
		set_Pulse(pulse);
 8000aaa:	6838      	ldr	r0, [r7, #0]
 8000aac:	f7ff ff72 	bl	8000994 <set_Pulse>
		HAL_Delay(servospeed);
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <servo_demo+0x60>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 fadd 	bl	8001074 <HAL_Delay>
	for(uint32_t pulse = 250; pulse > 50; pulse --){
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	3b01      	subs	r3, #1
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	2b32      	cmp	r3, #50	; 0x32
 8000ac4:	d8f1      	bhi.n	8000aaa <servo_demo+0x3a>

	}
}
 8000ac6:	bf00      	nop
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200007f8 	.word	0x200007f8

08000ad4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800

08000b24 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08e      	sub	sp, #56	; 0x38
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a55      	ldr	r2, [pc, #340]	; (8000c98 <HAL_ETH_MspInit+0x174>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	f040 80a4 	bne.w	8000c90 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	623b      	str	r3, [r7, #32]
 8000b4c:	4b53      	ldr	r3, [pc, #332]	; (8000c9c <HAL_ETH_MspInit+0x178>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	4a52      	ldr	r2, [pc, #328]	; (8000c9c <HAL_ETH_MspInit+0x178>)
 8000b52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b56:	6313      	str	r3, [r2, #48]	; 0x30
 8000b58:	4b50      	ldr	r3, [pc, #320]	; (8000c9c <HAL_ETH_MspInit+0x178>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b60:	623b      	str	r3, [r7, #32]
 8000b62:	6a3b      	ldr	r3, [r7, #32]
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
 8000b68:	4b4c      	ldr	r3, [pc, #304]	; (8000c9c <HAL_ETH_MspInit+0x178>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	4a4b      	ldr	r2, [pc, #300]	; (8000c9c <HAL_ETH_MspInit+0x178>)
 8000b6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b72:	6313      	str	r3, [r2, #48]	; 0x30
 8000b74:	4b49      	ldr	r3, [pc, #292]	; (8000c9c <HAL_ETH_MspInit+0x178>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b7c:	61fb      	str	r3, [r7, #28]
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	2300      	movs	r3, #0
 8000b82:	61bb      	str	r3, [r7, #24]
 8000b84:	4b45      	ldr	r3, [pc, #276]	; (8000c9c <HAL_ETH_MspInit+0x178>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	4a44      	ldr	r2, [pc, #272]	; (8000c9c <HAL_ETH_MspInit+0x178>)
 8000b8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b90:	4b42      	ldr	r3, [pc, #264]	; (8000c9c <HAL_ETH_MspInit+0x178>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b98:	61bb      	str	r3, [r7, #24]
 8000b9a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	4b3e      	ldr	r3, [pc, #248]	; (8000c9c <HAL_ETH_MspInit+0x178>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	4a3d      	ldr	r2, [pc, #244]	; (8000c9c <HAL_ETH_MspInit+0x178>)
 8000ba6:	f043 0304 	orr.w	r3, r3, #4
 8000baa:	6313      	str	r3, [r2, #48]	; 0x30
 8000bac:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <HAL_ETH_MspInit+0x178>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	f003 0304 	and.w	r3, r3, #4
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	4b37      	ldr	r3, [pc, #220]	; (8000c9c <HAL_ETH_MspInit+0x178>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	4a36      	ldr	r2, [pc, #216]	; (8000c9c <HAL_ETH_MspInit+0x178>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc8:	4b34      	ldr	r3, [pc, #208]	; (8000c9c <HAL_ETH_MspInit+0x178>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	4b30      	ldr	r3, [pc, #192]	; (8000c9c <HAL_ETH_MspInit+0x178>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bdc:	4a2f      	ldr	r2, [pc, #188]	; (8000c9c <HAL_ETH_MspInit+0x178>)
 8000bde:	f043 0302 	orr.w	r3, r3, #2
 8000be2:	6313      	str	r3, [r2, #48]	; 0x30
 8000be4:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <HAL_ETH_MspInit+0x178>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	f003 0302 	and.w	r3, r3, #2
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	4b29      	ldr	r3, [pc, #164]	; (8000c9c <HAL_ETH_MspInit+0x178>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf8:	4a28      	ldr	r2, [pc, #160]	; (8000c9c <HAL_ETH_MspInit+0x178>)
 8000bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000c00:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <HAL_ETH_MspInit+0x178>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c0c:	2332      	movs	r3, #50	; 0x32
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c1c:	230b      	movs	r3, #11
 8000c1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c24:	4619      	mov	r1, r3
 8000c26:	481e      	ldr	r0, [pc, #120]	; (8000ca0 <HAL_ETH_MspInit+0x17c>)
 8000c28:	f000 fe82 	bl	8001930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c2c:	2386      	movs	r3, #134	; 0x86
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c3c:	230b      	movs	r3, #11
 8000c3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c44:	4619      	mov	r1, r3
 8000c46:	4817      	ldr	r0, [pc, #92]	; (8000ca4 <HAL_ETH_MspInit+0x180>)
 8000c48:	f000 fe72 	bl	8001930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c5e:	230b      	movs	r3, #11
 8000c60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c66:	4619      	mov	r1, r3
 8000c68:	480f      	ldr	r0, [pc, #60]	; (8000ca8 <HAL_ETH_MspInit+0x184>)
 8000c6a:	f000 fe61 	bl	8001930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c6e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c80:	230b      	movs	r3, #11
 8000c82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4808      	ldr	r0, [pc, #32]	; (8000cac <HAL_ETH_MspInit+0x188>)
 8000c8c:	f000 fe50 	bl	8001930 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c90:	bf00      	nop
 8000c92:	3738      	adds	r7, #56	; 0x38
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40028000 	.word	0x40028000
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40020800 	.word	0x40020800
 8000ca4:	40020000 	.word	0x40020000
 8000ca8:	40020400 	.word	0x40020400
 8000cac:	40021800 	.word	0x40021800

08000cb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cc0:	d115      	bne.n	8000cee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <HAL_TIM_Base_MspInit+0x48>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <HAL_TIM_Base_MspInit+0x48>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <HAL_TIM_Base_MspInit+0x48>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	201c      	movs	r0, #28
 8000ce4:	f000 fac5 	bl	8001272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ce8:	201c      	movs	r0, #28
 8000cea:	f000 fade 	bl	80012aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800

08000cfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d1c:	d11d      	bne.n	8000d5a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <HAL_TIM_MspPostInit+0x68>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <HAL_TIM_MspPostInit+0x68>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <HAL_TIM_MspPostInit+0x68>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d3a:	2308      	movs	r3, #8
 8000d3c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4e:	f107 030c 	add.w	r3, r7, #12
 8000d52:	4619      	mov	r1, r3
 8000d54:	4804      	ldr	r0, [pc, #16]	; (8000d68 <HAL_TIM_MspPostInit+0x6c>)
 8000d56:	f000 fdeb 	bl	8001930 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d5a:	bf00      	nop
 8000d5c:	3720      	adds	r7, #32
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020400 	.word	0x40020400

08000d6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a19      	ldr	r2, [pc, #100]	; (8000df0 <HAL_UART_MspInit+0x84>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d12c      	bne.n	8000de8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <HAL_UART_MspInit+0x88>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	4a17      	ldr	r2, [pc, #92]	; (8000df4 <HAL_UART_MspInit+0x88>)
 8000d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_UART_MspInit+0x88>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_UART_MspInit+0x88>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a10      	ldr	r2, [pc, #64]	; (8000df4 <HAL_UART_MspInit+0x88>)
 8000db4:	f043 0308 	orr.w	r3, r3, #8
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_UART_MspInit+0x88>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0308 	and.w	r3, r3, #8
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dd8:	2307      	movs	r3, #7
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <HAL_UART_MspInit+0x8c>)
 8000de4:	f000 fda4 	bl	8001930 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000de8:	bf00      	nop
 8000dea:	3728      	adds	r7, #40	; 0x28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40004800 	.word	0x40004800
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020c00 	.word	0x40020c00

08000dfc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e1c:	d13f      	bne.n	8000e9e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	4b21      	ldr	r3, [pc, #132]	; (8000ea8 <HAL_PCD_MspInit+0xac>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a20      	ldr	r2, [pc, #128]	; (8000ea8 <HAL_PCD_MspInit+0xac>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <HAL_PCD_MspInit+0xac>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e3a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e4c:	230a      	movs	r3, #10
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4619      	mov	r1, r3
 8000e56:	4815      	ldr	r0, [pc, #84]	; (8000eac <HAL_PCD_MspInit+0xb0>)
 8000e58:	f000 fd6a 	bl	8001930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480e      	ldr	r0, [pc, #56]	; (8000eac <HAL_PCD_MspInit+0xb0>)
 8000e72:	f000 fd5d 	bl	8001930 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <HAL_PCD_MspInit+0xac>)
 8000e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <HAL_PCD_MspInit+0xac>)
 8000e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e80:	6353      	str	r3, [r2, #52]	; 0x34
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <HAL_PCD_MspInit+0xac>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <HAL_PCD_MspInit+0xac>)
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e90:	6453      	str	r3, [r2, #68]	; 0x44
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <HAL_PCD_MspInit+0xac>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e9e:	bf00      	nop
 8000ea0:	3728      	adds	r7, #40	; 0x28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020000 	.word	0x40020000

08000eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <NMI_Handler+0x4>

08000eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <HardFault_Handler+0x4>

08000ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <MemManage_Handler+0x4>

08000ec2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <BusFault_Handler+0x4>

08000ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <UsageFault_Handler+0x4>

08000ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efc:	f000 f89a 	bl	8001034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <TIM2_IRQHandler+0x10>)
 8000f0a:	f001 fdfb 	bl	8002b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000250 	.word	0x20000250

08000f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <SystemInit+0x20>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <SystemInit+0x20>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f74 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f42:	490e      	ldr	r1, [pc, #56]	; (8000f7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f44:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f58:	4c0b      	ldr	r4, [pc, #44]	; (8000f88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f66:	f7ff ffd7 	bl	8000f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f003 f9fb 	bl	8004364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6e:	f7ff fabb 	bl	80004e8 <main>
  bx  lr    
 8000f72:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f74:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f80:	080043ec 	.word	0x080043ec
  ldr r2, =_sbss
 8000f84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f88:	20000800 	.word	0x20000800

08000f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC_IRQHandler>
	...

08000f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <HAL_Init+0x40>)
 8000f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <HAL_Init+0x40>)
 8000fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <HAL_Init+0x40>)
 8000fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 f94f 	bl	800125c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f000 f808 	bl	8000fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f7ff fd86 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023c00 	.word	0x40023c00

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_InitTick+0x54>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_InitTick+0x58>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f967 	bl	80012c6 <HAL_SYSTICK_Config>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00e      	b.n	8001020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d80a      	bhi.n	800101e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001008:	2200      	movs	r2, #0
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f000 f92f 	bl	8001272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001014:	4a06      	ldr	r2, [pc, #24]	; (8001030 <HAL_InitTick+0x5c>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	e000      	b.n	8001020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000000 	.word	0x20000000
 800102c:	20000008 	.word	0x20000008
 8001030:	20000004 	.word	0x20000004

08001034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x20>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x24>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <HAL_IncTick+0x24>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000008 	.word	0x20000008
 8001058:	200007fc 	.word	0x200007fc

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <HAL_GetTick+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	200007fc 	.word	0x200007fc

08001074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800107c:	f7ff ffee 	bl	800105c <HAL_GetTick>
 8001080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108c:	d005      	beq.n	800109a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_Delay+0x44>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800109a:	bf00      	nop
 800109c:	f7ff ffde 	bl	800105c <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d8f7      	bhi.n	800109c <HAL_Delay+0x28>
  {
  }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000008 	.word	0x20000008

080010bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d8:	4013      	ands	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <__NVIC_GetPriorityGrouping+0x18>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f003 0307 	and.w	r3, r3, #7
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	db0b      	blt.n	800114a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	f003 021f 	and.w	r2, r3, #31
 8001138:	4907      	ldr	r1, [pc, #28]	; (8001158 <__NVIC_EnableIRQ+0x38>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	095b      	lsrs	r3, r3, #5
 8001140:	2001      	movs	r0, #1
 8001142:	fa00 f202 	lsl.w	r2, r0, r2
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001228:	d301      	bcc.n	800122e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122a:	2301      	movs	r3, #1
 800122c:	e00f      	b.n	800124e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <SysTick_Config+0x40>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001236:	210f      	movs	r1, #15
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f7ff ff8e 	bl	800115c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <SysTick_Config+0x40>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <SysTick_Config+0x40>)
 8001248:	2207      	movs	r2, #7
 800124a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	e000e010 	.word	0xe000e010

0800125c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff29 	bl	80010bc <__NVIC_SetPriorityGrouping>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff3e 	bl	8001104 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff8e 	bl	80011b0 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5d 	bl	800115c <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff31 	bl	8001120 <__NVIC_EnableIRQ>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffa2 	bl	8001218 <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e06c      	b.n	80013cc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d106      	bne.n	800130a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2223      	movs	r2, #35	; 0x23
 8001300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff fc0d 	bl	8000b24 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	4b31      	ldr	r3, [pc, #196]	; (80013d4 <HAL_ETH_Init+0xf4>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	4a30      	ldr	r2, [pc, #192]	; (80013d4 <HAL_ETH_Init+0xf4>)
 8001314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001318:	6453      	str	r3, [r2, #68]	; 0x44
 800131a:	4b2e      	ldr	r3, [pc, #184]	; (80013d4 <HAL_ETH_Init+0xf4>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001326:	4b2c      	ldr	r3, [pc, #176]	; (80013d8 <HAL_ETH_Init+0xf8>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	4a2b      	ldr	r2, [pc, #172]	; (80013d8 <HAL_ETH_Init+0xf8>)
 800132c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001330:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001332:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <HAL_ETH_Init+0xf8>)
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	4927      	ldr	r1, [pc, #156]	; (80013d8 <HAL_ETH_Init+0xf8>)
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001340:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <HAL_ETH_Init+0xf8>)
 8001342:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	6812      	ldr	r2, [r2, #0]
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800135a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800135c:	f7ff fe7e 	bl	800105c <HAL_GetTick>
 8001360:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001362:	e011      	b.n	8001388 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001364:	f7ff fe7a 	bl	800105c <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001372:	d909      	bls.n	8001388 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2204      	movs	r2, #4
 8001378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	22e0      	movs	r2, #224	; 0xe0
 8001380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e021      	b.n	80013cc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1e4      	bne.n	8001364 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f958 	bl	8001650 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f9ff 	bl	80017a4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 fa55 	bl	8001856 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	461a      	mov	r2, r3
 80013b2:	2100      	movs	r1, #0
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 f9bd 	bl	8001734 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2210      	movs	r2, #16
 80013c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40013800 	.word	0x40013800

080013dc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	4b51      	ldr	r3, [pc, #324]	; (8001538 <ETH_SetMACConfig+0x15c>)
 80013f2:	4013      	ands	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	7c1b      	ldrb	r3, [r3, #16]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d102      	bne.n	8001404 <ETH_SetMACConfig+0x28>
 80013fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001402:	e000      	b.n	8001406 <ETH_SetMACConfig+0x2a>
 8001404:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	7c5b      	ldrb	r3, [r3, #17]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d102      	bne.n	8001414 <ETH_SetMACConfig+0x38>
 800140e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001412:	e000      	b.n	8001416 <ETH_SetMACConfig+0x3a>
 8001414:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001416:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800141c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	7fdb      	ldrb	r3, [r3, #31]
 8001422:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001424:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800142a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	7f92      	ldrb	r2, [r2, #30]
 8001430:	2a00      	cmp	r2, #0
 8001432:	d102      	bne.n	800143a <ETH_SetMACConfig+0x5e>
 8001434:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001438:	e000      	b.n	800143c <ETH_SetMACConfig+0x60>
 800143a:	2200      	movs	r2, #0
                        macconf->Speed |
 800143c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	7f1b      	ldrb	r3, [r3, #28]
 8001442:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001444:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800144a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	791b      	ldrb	r3, [r3, #4]
 8001450:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001452:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	f892 2020 	ldrb.w	r2, [r2, #32]
 800145a:	2a00      	cmp	r2, #0
 800145c:	d102      	bne.n	8001464 <ETH_SetMACConfig+0x88>
 800145e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001462:	e000      	b.n	8001466 <ETH_SetMACConfig+0x8a>
 8001464:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001466:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	7bdb      	ldrb	r3, [r3, #15]
 800146c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800146e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001474:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800147c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800147e:	4313      	orrs	r3, r2
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001496:	2001      	movs	r0, #1
 8001498:	f7ff fdec 	bl	8001074 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	f64f 7341 	movw	r3, #65345	; 0xff41
 80014b2:	4013      	ands	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ba:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d101      	bne.n	80014ca <ETH_SetMACConfig+0xee>
 80014c6:	2280      	movs	r2, #128	; 0x80
 80014c8:	e000      	b.n	80014cc <ETH_SetMACConfig+0xf0>
 80014ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014cc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80014da:	2a01      	cmp	r2, #1
 80014dc:	d101      	bne.n	80014e2 <ETH_SetMACConfig+0x106>
 80014de:	2208      	movs	r2, #8
 80014e0:	e000      	b.n	80014e4 <ETH_SetMACConfig+0x108>
 80014e2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80014e4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80014ec:	2a01      	cmp	r2, #1
 80014ee:	d101      	bne.n	80014f4 <ETH_SetMACConfig+0x118>
 80014f0:	2204      	movs	r2, #4
 80014f2:	e000      	b.n	80014f6 <ETH_SetMACConfig+0x11a>
 80014f4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80014fe:	2a01      	cmp	r2, #1
 8001500:	d101      	bne.n	8001506 <ETH_SetMACConfig+0x12a>
 8001502:	2202      	movs	r2, #2
 8001504:	e000      	b.n	8001508 <ETH_SetMACConfig+0x12c>
 8001506:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001508:	4313      	orrs	r3, r2
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	4313      	orrs	r3, r2
 800150e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001520:	2001      	movs	r0, #1
 8001522:	f7ff fda7 	bl	8001074 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	619a      	str	r2, [r3, #24]
}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	ff20810f 	.word	0xff20810f

0800153c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	4b3d      	ldr	r3, [pc, #244]	; (800164c <ETH_SetDMAConfig+0x110>)
 8001556:	4013      	ands	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	7b1b      	ldrb	r3, [r3, #12]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d102      	bne.n	8001568 <ETH_SetDMAConfig+0x2c>
 8001562:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001566:	e000      	b.n	800156a <ETH_SetDMAConfig+0x2e>
 8001568:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	7b5b      	ldrb	r3, [r3, #13]
 800156e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001570:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	7f52      	ldrb	r2, [r2, #29]
 8001576:	2a00      	cmp	r2, #0
 8001578:	d102      	bne.n	8001580 <ETH_SetDMAConfig+0x44>
 800157a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800157e:	e000      	b.n	8001582 <ETH_SetDMAConfig+0x46>
 8001580:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001582:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	7b9b      	ldrb	r3, [r3, #14]
 8001588:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800158a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001590:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	7f1b      	ldrb	r3, [r3, #28]
 8001596:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001598:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	7f9b      	ldrb	r3, [r3, #30]
 800159e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015a0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015a6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015ae:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015b0:	4313      	orrs	r3, r2
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c0:	461a      	mov	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015d2:	2001      	movs	r0, #1
 80015d4:	f7ff fd4e 	bl	8001074 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e0:	461a      	mov	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	791b      	ldrb	r3, [r3, #4]
 80015ea:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015f0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80015f6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015fc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001604:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001606:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800160e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001614:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800161e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001622:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001630:	2001      	movs	r0, #1
 8001632:	f7ff fd1f 	bl	8001074 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800163e:	461a      	mov	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	f8de3f23 	.word	0xf8de3f23

08001650 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b0a6      	sub	sp, #152	; 0x98
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001658:	2301      	movs	r3, #1
 800165a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800165e:	2301      	movs	r3, #1
 8001660:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001664:	2300      	movs	r3, #0
 8001666:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800166e:	2301      	movs	r3, #1
 8001670:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800167a:	2301      	movs	r3, #1
 800167c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800168c:	2300      	movs	r3, #0
 800168e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001696:	2300      	movs	r3, #0
 8001698:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80016b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016b6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80016b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80016c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016c8:	4619      	mov	r1, r3
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff fe86 	bl	80013dc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80016d0:	2301      	movs	r3, #1
 80016d2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80016d4:	2301      	movs	r3, #1
 80016d6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80016d8:	2301      	movs	r3, #1
 80016da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80016de:	2301      	movs	r3, #1
 80016e0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80016f2:	2300      	movs	r3, #0
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80016f6:	2301      	movs	r3, #1
 80016f8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80016fc:	2301      	movs	r3, #1
 80016fe:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001700:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001704:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001706:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800170a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800170c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001710:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001712:	2301      	movs	r3, #1
 8001714:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001718:	2300      	movs	r3, #0
 800171a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800171c:	2300      	movs	r3, #0
 800171e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001720:	f107 0308 	add.w	r3, r7, #8
 8001724:	4619      	mov	r1, r3
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ff08 	bl	800153c <ETH_SetDMAConfig>
}
 800172c:	bf00      	nop
 800172e:	3798      	adds	r7, #152	; 0x98
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001734:	b480      	push	{r7}
 8001736:	b087      	sub	sp, #28
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3305      	adds	r3, #5
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	021b      	lsls	r3, r3, #8
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	3204      	adds	r2, #4
 800174c:	7812      	ldrb	r2, [r2, #0]
 800174e:	4313      	orrs	r3, r2
 8001750:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <ETH_MACAddressConfig+0x68>)
 8001756:	4413      	add	r3, r2
 8001758:	461a      	mov	r2, r3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3303      	adds	r3, #3
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	061a      	lsls	r2, r3, #24
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3302      	adds	r3, #2
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	041b      	lsls	r3, r3, #16
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3301      	adds	r3, #1
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	4313      	orrs	r3, r2
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	7812      	ldrb	r2, [r2, #0]
 800177e:	4313      	orrs	r3, r2
 8001780:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <ETH_MACAddressConfig+0x6c>)
 8001786:	4413      	add	r3, r2
 8001788:	461a      	mov	r2, r3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	6013      	str	r3, [r2, #0]
}
 800178e:	bf00      	nop
 8001790:	371c      	adds	r7, #28
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40028040 	.word	0x40028040
 80017a0:	40028044 	.word	0x40028044

080017a4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	e03e      	b.n	8001830 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68d9      	ldr	r1, [r3, #12]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	440b      	add	r3, r1
 80017c2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	2200      	movs	r2, #0
 80017ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2200      	movs	r2, #0
 80017da:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80017dc:	68b9      	ldr	r1, [r7, #8]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	3206      	adds	r2, #6
 80017e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d80c      	bhi.n	8001814 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68d9      	ldr	r1, [r3, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	440b      	add	r3, r1
 800180c:	461a      	mov	r2, r3
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	e004      	b.n	800181e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	461a      	mov	r2, r3
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3301      	adds	r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b03      	cmp	r3, #3
 8001834:	d9bd      	bls.n	80017b2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001848:	611a      	str	r2, [r3, #16]
}
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001856:	b480      	push	{r7}
 8001858:	b085      	sub	sp, #20
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	e046      	b.n	80018f2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6919      	ldr	r1, [r3, #16]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2200      	movs	r2, #0
 8001880:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2200      	movs	r2, #0
 800188c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	2200      	movs	r2, #0
 8001892:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2200      	movs	r2, #0
 8001898:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80018a0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80018a8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80018b6:	68b9      	ldr	r1, [r7, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	3212      	adds	r2, #18
 80018be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d80c      	bhi.n	80018e2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6919      	ldr	r1, [r3, #16]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	440b      	add	r3, r1
 80018da:	461a      	mov	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	e004      	b.n	80018ec <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	461a      	mov	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	3301      	adds	r3, #1
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d9b5      	bls.n	8001864 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691a      	ldr	r2, [r3, #16]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001922:	60da      	str	r2, [r3, #12]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	; 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
 800194a:	e177      	b.n	8001c3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800194c:	2201      	movs	r2, #1
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	429a      	cmp	r2, r3
 8001966:	f040 8166 	bne.w	8001c36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 0303 	and.w	r3, r3, #3
 8001972:	2b01      	cmp	r3, #1
 8001974:	d005      	beq.n	8001982 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800197e:	2b02      	cmp	r3, #2
 8001980:	d130      	bne.n	80019e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	2203      	movs	r2, #3
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019b8:	2201      	movs	r2, #1
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	091b      	lsrs	r3, r3, #4
 80019ce:	f003 0201 	and.w	r2, r3, #1
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d017      	beq.n	8001a20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d123      	bne.n	8001a74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	08da      	lsrs	r2, r3, #3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3208      	adds	r2, #8
 8001a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	220f      	movs	r2, #15
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	691a      	ldr	r2, [r3, #16]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	08da      	lsrs	r2, r3, #3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3208      	adds	r2, #8
 8001a6e:	69b9      	ldr	r1, [r7, #24]
 8001a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0203 	and.w	r2, r3, #3
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 80c0 	beq.w	8001c36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4b66      	ldr	r3, [pc, #408]	; (8001c54 <HAL_GPIO_Init+0x324>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	4a65      	ldr	r2, [pc, #404]	; (8001c54 <HAL_GPIO_Init+0x324>)
 8001ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac6:	4b63      	ldr	r3, [pc, #396]	; (8001c54 <HAL_GPIO_Init+0x324>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ad2:	4a61      	ldr	r2, [pc, #388]	; (8001c58 <HAL_GPIO_Init+0x328>)
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	089b      	lsrs	r3, r3, #2
 8001ad8:	3302      	adds	r3, #2
 8001ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	220f      	movs	r2, #15
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a58      	ldr	r2, [pc, #352]	; (8001c5c <HAL_GPIO_Init+0x32c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d037      	beq.n	8001b6e <HAL_GPIO_Init+0x23e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a57      	ldr	r2, [pc, #348]	; (8001c60 <HAL_GPIO_Init+0x330>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d031      	beq.n	8001b6a <HAL_GPIO_Init+0x23a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a56      	ldr	r2, [pc, #344]	; (8001c64 <HAL_GPIO_Init+0x334>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d02b      	beq.n	8001b66 <HAL_GPIO_Init+0x236>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a55      	ldr	r2, [pc, #340]	; (8001c68 <HAL_GPIO_Init+0x338>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d025      	beq.n	8001b62 <HAL_GPIO_Init+0x232>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a54      	ldr	r2, [pc, #336]	; (8001c6c <HAL_GPIO_Init+0x33c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d01f      	beq.n	8001b5e <HAL_GPIO_Init+0x22e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a53      	ldr	r2, [pc, #332]	; (8001c70 <HAL_GPIO_Init+0x340>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d019      	beq.n	8001b5a <HAL_GPIO_Init+0x22a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a52      	ldr	r2, [pc, #328]	; (8001c74 <HAL_GPIO_Init+0x344>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d013      	beq.n	8001b56 <HAL_GPIO_Init+0x226>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a51      	ldr	r2, [pc, #324]	; (8001c78 <HAL_GPIO_Init+0x348>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d00d      	beq.n	8001b52 <HAL_GPIO_Init+0x222>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a50      	ldr	r2, [pc, #320]	; (8001c7c <HAL_GPIO_Init+0x34c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d007      	beq.n	8001b4e <HAL_GPIO_Init+0x21e>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a4f      	ldr	r2, [pc, #316]	; (8001c80 <HAL_GPIO_Init+0x350>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d101      	bne.n	8001b4a <HAL_GPIO_Init+0x21a>
 8001b46:	2309      	movs	r3, #9
 8001b48:	e012      	b.n	8001b70 <HAL_GPIO_Init+0x240>
 8001b4a:	230a      	movs	r3, #10
 8001b4c:	e010      	b.n	8001b70 <HAL_GPIO_Init+0x240>
 8001b4e:	2308      	movs	r3, #8
 8001b50:	e00e      	b.n	8001b70 <HAL_GPIO_Init+0x240>
 8001b52:	2307      	movs	r3, #7
 8001b54:	e00c      	b.n	8001b70 <HAL_GPIO_Init+0x240>
 8001b56:	2306      	movs	r3, #6
 8001b58:	e00a      	b.n	8001b70 <HAL_GPIO_Init+0x240>
 8001b5a:	2305      	movs	r3, #5
 8001b5c:	e008      	b.n	8001b70 <HAL_GPIO_Init+0x240>
 8001b5e:	2304      	movs	r3, #4
 8001b60:	e006      	b.n	8001b70 <HAL_GPIO_Init+0x240>
 8001b62:	2303      	movs	r3, #3
 8001b64:	e004      	b.n	8001b70 <HAL_GPIO_Init+0x240>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e002      	b.n	8001b70 <HAL_GPIO_Init+0x240>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <HAL_GPIO_Init+0x240>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	69fa      	ldr	r2, [r7, #28]
 8001b72:	f002 0203 	and.w	r2, r2, #3
 8001b76:	0092      	lsls	r2, r2, #2
 8001b78:	4093      	lsls	r3, r2
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b80:	4935      	ldr	r1, [pc, #212]	; (8001c58 <HAL_GPIO_Init+0x328>)
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	089b      	lsrs	r3, r3, #2
 8001b86:	3302      	adds	r3, #2
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b8e:	4b3d      	ldr	r3, [pc, #244]	; (8001c84 <HAL_GPIO_Init+0x354>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bb2:	4a34      	ldr	r2, [pc, #208]	; (8001c84 <HAL_GPIO_Init+0x354>)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bb8:	4b32      	ldr	r3, [pc, #200]	; (8001c84 <HAL_GPIO_Init+0x354>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bdc:	4a29      	ldr	r2, [pc, #164]	; (8001c84 <HAL_GPIO_Init+0x354>)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001be2:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <HAL_GPIO_Init+0x354>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c06:	4a1f      	ldr	r2, [pc, #124]	; (8001c84 <HAL_GPIO_Init+0x354>)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c0c:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <HAL_GPIO_Init+0x354>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c30:	4a14      	ldr	r2, [pc, #80]	; (8001c84 <HAL_GPIO_Init+0x354>)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	61fb      	str	r3, [r7, #28]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	2b0f      	cmp	r3, #15
 8001c40:	f67f ae84 	bls.w	800194c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	3724      	adds	r7, #36	; 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40013800 	.word	0x40013800
 8001c5c:	40020000 	.word	0x40020000
 8001c60:	40020400 	.word	0x40020400
 8001c64:	40020800 	.word	0x40020800
 8001c68:	40020c00 	.word	0x40020c00
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40021400 	.word	0x40021400
 8001c74:	40021800 	.word	0x40021800
 8001c78:	40021c00 	.word	0x40021c00
 8001c7c:	40022000 	.word	0x40022000
 8001c80:	40022400 	.word	0x40022400
 8001c84:	40013c00 	.word	0x40013c00

08001c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	807b      	strh	r3, [r7, #2]
 8001c94:	4613      	mov	r3, r2
 8001c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c98:	787b      	ldrb	r3, [r7, #1]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c9e:	887a      	ldrh	r2, [r7, #2]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ca4:	e003      	b.n	8001cae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ca6:	887b      	ldrh	r3, [r7, #2]
 8001ca8:	041a      	lsls	r2, r3, #16
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	619a      	str	r2, [r3, #24]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cbc:	b08f      	sub	sp, #60	; 0x3c
 8001cbe:	af0a      	add	r7, sp, #40	; 0x28
 8001cc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e10f      	b.n	8001eec <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d106      	bne.n	8001cec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff f888 	bl	8000dfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2203      	movs	r2, #3
 8001cf0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d102      	bne.n	8001d06 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f002 f881 	bl	8003e12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	603b      	str	r3, [r7, #0]
 8001d16:	687e      	ldr	r6, [r7, #4]
 8001d18:	466d      	mov	r5, sp
 8001d1a:	f106 0410 	add.w	r4, r6, #16
 8001d1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d2e:	1d33      	adds	r3, r6, #4
 8001d30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d32:	6838      	ldr	r0, [r7, #0]
 8001d34:	f002 f80c 	bl	8003d50 <USB_CoreInit>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d005      	beq.n	8001d4a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2202      	movs	r2, #2
 8001d42:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e0d0      	b.n	8001eec <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f002 f86f 	bl	8003e34 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	73fb      	strb	r3, [r7, #15]
 8001d5a:	e04a      	b.n	8001df2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4413      	add	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	333d      	adds	r3, #61	; 0x3d
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d70:	7bfa      	ldrb	r2, [r7, #15]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	333c      	adds	r3, #60	; 0x3c
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d84:	7bfa      	ldrb	r2, [r7, #15]
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	b298      	uxth	r0, r3
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4413      	add	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	3344      	adds	r3, #68	; 0x44
 8001d98:	4602      	mov	r2, r0
 8001d9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d9c:	7bfa      	ldrb	r2, [r7, #15]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	3340      	adds	r3, #64	; 0x40
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	3348      	adds	r3, #72	; 0x48
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dc4:	7bfa      	ldrb	r2, [r7, #15]
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	334c      	adds	r3, #76	; 0x4c
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4413      	add	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	3354      	adds	r3, #84	; 0x54
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	3301      	adds	r3, #1
 8001df0:	73fb      	strb	r3, [r7, #15]
 8001df2:	7bfa      	ldrb	r2, [r7, #15]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d3af      	bcc.n	8001d5c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	73fb      	strb	r3, [r7, #15]
 8001e00:	e044      	b.n	8001e8c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e02:	7bfa      	ldrb	r2, [r7, #15]
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e2a:	7bfa      	ldrb	r2, [r7, #15]
 8001e2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e2e:	7bfa      	ldrb	r2, [r7, #15]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4413      	add	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e44:	7bfa      	ldrb	r2, [r7, #15]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e5a:	7bfa      	ldrb	r2, [r7, #15]
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4413      	add	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e70:	7bfa      	ldrb	r2, [r7, #15]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4413      	add	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	73fb      	strb	r3, [r7, #15]
 8001e8c:	7bfa      	ldrb	r2, [r7, #15]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d3b5      	bcc.n	8001e02 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	687e      	ldr	r6, [r7, #4]
 8001e9e:	466d      	mov	r5, sp
 8001ea0:	f106 0410 	add.w	r4, r6, #16
 8001ea4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ea8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eb4:	1d33      	adds	r3, r6, #4
 8001eb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eb8:	6838      	ldr	r0, [r7, #0]
 8001eba:	f002 f807 	bl	8003ecc <USB_DevInit>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e00d      	b.n	8001eec <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f002 f9d2 	bl	800428e <USB_DevDisconnect>

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ef4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e267      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d075      	beq.n	8001ffe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f12:	4b88      	ldr	r3, [pc, #544]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d00c      	beq.n	8001f38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f1e:	4b85      	ldr	r3, [pc, #532]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d112      	bne.n	8001f50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f2a:	4b82      	ldr	r3, [pc, #520]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f36:	d10b      	bne.n	8001f50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f38:	4b7e      	ldr	r3, [pc, #504]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d05b      	beq.n	8001ffc <HAL_RCC_OscConfig+0x108>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d157      	bne.n	8001ffc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e242      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f58:	d106      	bne.n	8001f68 <HAL_RCC_OscConfig+0x74>
 8001f5a:	4b76      	ldr	r3, [pc, #472]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a75      	ldr	r2, [pc, #468]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	e01d      	b.n	8001fa4 <HAL_RCC_OscConfig+0xb0>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f70:	d10c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x98>
 8001f72:	4b70      	ldr	r3, [pc, #448]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a6f      	ldr	r2, [pc, #444]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	4b6d      	ldr	r3, [pc, #436]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a6c      	ldr	r2, [pc, #432]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	e00b      	b.n	8001fa4 <HAL_RCC_OscConfig+0xb0>
 8001f8c:	4b69      	ldr	r3, [pc, #420]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a68      	ldr	r2, [pc, #416]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	4b66      	ldr	r3, [pc, #408]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a65      	ldr	r2, [pc, #404]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d013      	beq.n	8001fd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7ff f856 	bl	800105c <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fb4:	f7ff f852 	bl	800105c <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b64      	cmp	r3, #100	; 0x64
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e207      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc6:	4b5b      	ldr	r3, [pc, #364]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0f0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0xc0>
 8001fd2:	e014      	b.n	8001ffe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7ff f842 	bl	800105c <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fdc:	f7ff f83e 	bl	800105c <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b64      	cmp	r3, #100	; 0x64
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e1f3      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fee:	4b51      	ldr	r3, [pc, #324]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0xe8>
 8001ffa:	e000      	b.n	8001ffe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d063      	beq.n	80020d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800200a:	4b4a      	ldr	r3, [pc, #296]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00b      	beq.n	800202e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002016:	4b47      	ldr	r3, [pc, #284]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800201e:	2b08      	cmp	r3, #8
 8002020:	d11c      	bne.n	800205c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002022:	4b44      	ldr	r3, [pc, #272]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d116      	bne.n	800205c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202e:	4b41      	ldr	r3, [pc, #260]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d005      	beq.n	8002046 <HAL_RCC_OscConfig+0x152>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d001      	beq.n	8002046 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e1c7      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002046:	4b3b      	ldr	r3, [pc, #236]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4937      	ldr	r1, [pc, #220]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800205a:	e03a      	b.n	80020d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d020      	beq.n	80020a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002064:	4b34      	ldr	r3, [pc, #208]	; (8002138 <HAL_RCC_OscConfig+0x244>)
 8002066:	2201      	movs	r2, #1
 8002068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206a:	f7fe fff7 	bl	800105c <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002072:	f7fe fff3 	bl	800105c <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e1a8      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002084:	4b2b      	ldr	r3, [pc, #172]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002090:	4b28      	ldr	r3, [pc, #160]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4925      	ldr	r1, [pc, #148]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	600b      	str	r3, [r1, #0]
 80020a4:	e015      	b.n	80020d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020a6:	4b24      	ldr	r3, [pc, #144]	; (8002138 <HAL_RCC_OscConfig+0x244>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ac:	f7fe ffd6 	bl	800105c <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b4:	f7fe ffd2 	bl	800105c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e187      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c6:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d036      	beq.n	800214c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d016      	beq.n	8002114 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020e6:	4b15      	ldr	r3, [pc, #84]	; (800213c <HAL_RCC_OscConfig+0x248>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ec:	f7fe ffb6 	bl	800105c <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020f4:	f7fe ffb2 	bl	800105c <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e167      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8002108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0x200>
 8002112:	e01b      	b.n	800214c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002114:	4b09      	ldr	r3, [pc, #36]	; (800213c <HAL_RCC_OscConfig+0x248>)
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211a:	f7fe ff9f 	bl	800105c <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002120:	e00e      	b.n	8002140 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002122:	f7fe ff9b 	bl	800105c <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d907      	bls.n	8002140 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e150      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
 8002134:	40023800 	.word	0x40023800
 8002138:	42470000 	.word	0x42470000
 800213c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002140:	4b88      	ldr	r3, [pc, #544]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 8002142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1ea      	bne.n	8002122 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 8097 	beq.w	8002288 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800215a:	2300      	movs	r3, #0
 800215c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800215e:	4b81      	ldr	r3, [pc, #516]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10f      	bne.n	800218a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	4b7d      	ldr	r3, [pc, #500]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	4a7c      	ldr	r2, [pc, #496]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 8002174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002178:	6413      	str	r3, [r2, #64]	; 0x40
 800217a:	4b7a      	ldr	r3, [pc, #488]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002186:	2301      	movs	r3, #1
 8002188:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218a:	4b77      	ldr	r3, [pc, #476]	; (8002368 <HAL_RCC_OscConfig+0x474>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002192:	2b00      	cmp	r3, #0
 8002194:	d118      	bne.n	80021c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002196:	4b74      	ldr	r3, [pc, #464]	; (8002368 <HAL_RCC_OscConfig+0x474>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a73      	ldr	r2, [pc, #460]	; (8002368 <HAL_RCC_OscConfig+0x474>)
 800219c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021a2:	f7fe ff5b 	bl	800105c <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021aa:	f7fe ff57 	bl	800105c <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e10c      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021bc:	4b6a      	ldr	r3, [pc, #424]	; (8002368 <HAL_RCC_OscConfig+0x474>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d106      	bne.n	80021de <HAL_RCC_OscConfig+0x2ea>
 80021d0:	4b64      	ldr	r3, [pc, #400]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 80021d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d4:	4a63      	ldr	r2, [pc, #396]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6713      	str	r3, [r2, #112]	; 0x70
 80021dc:	e01c      	b.n	8002218 <HAL_RCC_OscConfig+0x324>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2b05      	cmp	r3, #5
 80021e4:	d10c      	bne.n	8002200 <HAL_RCC_OscConfig+0x30c>
 80021e6:	4b5f      	ldr	r3, [pc, #380]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 80021e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ea:	4a5e      	ldr	r2, [pc, #376]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	6713      	str	r3, [r2, #112]	; 0x70
 80021f2:	4b5c      	ldr	r3, [pc, #368]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 80021f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f6:	4a5b      	ldr	r2, [pc, #364]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6713      	str	r3, [r2, #112]	; 0x70
 80021fe:	e00b      	b.n	8002218 <HAL_RCC_OscConfig+0x324>
 8002200:	4b58      	ldr	r3, [pc, #352]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 8002202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002204:	4a57      	ldr	r2, [pc, #348]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 8002206:	f023 0301 	bic.w	r3, r3, #1
 800220a:	6713      	str	r3, [r2, #112]	; 0x70
 800220c:	4b55      	ldr	r3, [pc, #340]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 800220e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002210:	4a54      	ldr	r2, [pc, #336]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 8002212:	f023 0304 	bic.w	r3, r3, #4
 8002216:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d015      	beq.n	800224c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002220:	f7fe ff1c 	bl	800105c <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002226:	e00a      	b.n	800223e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002228:	f7fe ff18 	bl	800105c <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	f241 3288 	movw	r2, #5000	; 0x1388
 8002236:	4293      	cmp	r3, r2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e0cb      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223e:	4b49      	ldr	r3, [pc, #292]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 8002240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0ee      	beq.n	8002228 <HAL_RCC_OscConfig+0x334>
 800224a:	e014      	b.n	8002276 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224c:	f7fe ff06 	bl	800105c <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002252:	e00a      	b.n	800226a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002254:	f7fe ff02 	bl	800105c <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e0b5      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800226a:	4b3e      	ldr	r3, [pc, #248]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 800226c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1ee      	bne.n	8002254 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002276:	7dfb      	ldrb	r3, [r7, #23]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d105      	bne.n	8002288 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800227c:	4b39      	ldr	r3, [pc, #228]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	4a38      	ldr	r2, [pc, #224]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 8002282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002286:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 80a1 	beq.w	80023d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002292:	4b34      	ldr	r3, [pc, #208]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b08      	cmp	r3, #8
 800229c:	d05c      	beq.n	8002358 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d141      	bne.n	800232a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a6:	4b31      	ldr	r3, [pc, #196]	; (800236c <HAL_RCC_OscConfig+0x478>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7fe fed6 	bl	800105c <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b4:	f7fe fed2 	bl	800105c <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e087      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c6:	4b27      	ldr	r3, [pc, #156]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69da      	ldr	r2, [r3, #28]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	019b      	lsls	r3, r3, #6
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	085b      	lsrs	r3, r3, #1
 80022ea:	3b01      	subs	r3, #1
 80022ec:	041b      	lsls	r3, r3, #16
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	061b      	lsls	r3, r3, #24
 80022f6:	491b      	ldr	r1, [pc, #108]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022fc:	4b1b      	ldr	r3, [pc, #108]	; (800236c <HAL_RCC_OscConfig+0x478>)
 80022fe:	2201      	movs	r2, #1
 8002300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002302:	f7fe feab 	bl	800105c <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800230a:	f7fe fea7 	bl	800105c <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e05c      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f0      	beq.n	800230a <HAL_RCC_OscConfig+0x416>
 8002328:	e054      	b.n	80023d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <HAL_RCC_OscConfig+0x478>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7fe fe94 	bl	800105c <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002338:	f7fe fe90 	bl	800105c <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e045      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x444>
 8002356:	e03d      	b.n	80023d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d107      	bne.n	8002370 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e038      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
 8002364:	40023800 	.word	0x40023800
 8002368:	40007000 	.word	0x40007000
 800236c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002370:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <HAL_RCC_OscConfig+0x4ec>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d028      	beq.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002388:	429a      	cmp	r2, r3
 800238a:	d121      	bne.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002396:	429a      	cmp	r2, r3
 8002398:	d11a      	bne.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023a0:	4013      	ands	r3, r2
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d111      	bne.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b6:	085b      	lsrs	r3, r3, #1
 80023b8:	3b01      	subs	r3, #1
 80023ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023bc:	429a      	cmp	r2, r3
 80023be:	d107      	bne.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d001      	beq.n	80023d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e000      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800

080023e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0cc      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023f8:	4b68      	ldr	r3, [pc, #416]	; (800259c <HAL_RCC_ClockConfig+0x1b8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d90c      	bls.n	8002420 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002406:	4b65      	ldr	r3, [pc, #404]	; (800259c <HAL_RCC_ClockConfig+0x1b8>)
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b63      	ldr	r3, [pc, #396]	; (800259c <HAL_RCC_ClockConfig+0x1b8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0b8      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d020      	beq.n	800246e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002438:	4b59      	ldr	r3, [pc, #356]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	4a58      	ldr	r2, [pc, #352]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002442:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002450:	4b53      	ldr	r3, [pc, #332]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	4a52      	ldr	r2, [pc, #328]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800245a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800245c:	4b50      	ldr	r3, [pc, #320]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	494d      	ldr	r1, [pc, #308]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	4313      	orrs	r3, r2
 800246c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d044      	beq.n	8002504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d107      	bne.n	8002492 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	4b47      	ldr	r3, [pc, #284]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d119      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e07f      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d003      	beq.n	80024a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d107      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a2:	4b3f      	ldr	r3, [pc, #252]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d109      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e06f      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b2:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e067      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024c2:	4b37      	ldr	r3, [pc, #220]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f023 0203 	bic.w	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4934      	ldr	r1, [pc, #208]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024d4:	f7fe fdc2 	bl	800105c <HAL_GetTick>
 80024d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024da:	e00a      	b.n	80024f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024dc:	f7fe fdbe 	bl	800105c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e04f      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f2:	4b2b      	ldr	r3, [pc, #172]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 020c 	and.w	r2, r3, #12
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	429a      	cmp	r2, r3
 8002502:	d1eb      	bne.n	80024dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002504:	4b25      	ldr	r3, [pc, #148]	; (800259c <HAL_RCC_ClockConfig+0x1b8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d20c      	bcs.n	800252c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002512:	4b22      	ldr	r3, [pc, #136]	; (800259c <HAL_RCC_ClockConfig+0x1b8>)
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <HAL_RCC_ClockConfig+0x1b8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e032      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002538:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4916      	ldr	r1, [pc, #88]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	4313      	orrs	r3, r2
 8002548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d009      	beq.n	800256a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002556:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	490e      	ldr	r1, [pc, #56]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	4313      	orrs	r3, r2
 8002568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800256a:	f000 f821 	bl	80025b0 <HAL_RCC_GetSysClockFreq>
 800256e:	4602      	mov	r2, r0
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	490a      	ldr	r1, [pc, #40]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 800257c:	5ccb      	ldrb	r3, [r1, r3]
 800257e:	fa22 f303 	lsr.w	r3, r2, r3
 8002582:	4a09      	ldr	r2, [pc, #36]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7fe fd22 	bl	8000fd4 <HAL_InitTick>

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40023c00 	.word	0x40023c00
 80025a0:	40023800 	.word	0x40023800
 80025a4:	080043c4 	.word	0x080043c4
 80025a8:	20000000 	.word	0x20000000
 80025ac:	20000004 	.word	0x20000004

080025b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025b4:	b094      	sub	sp, #80	; 0x50
 80025b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	647b      	str	r3, [r7, #68]	; 0x44
 80025bc:	2300      	movs	r3, #0
 80025be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025c0:	2300      	movs	r3, #0
 80025c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025c8:	4b79      	ldr	r3, [pc, #484]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d00d      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0x40>
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	f200 80e1 	bhi.w	800279c <HAL_RCC_GetSysClockFreq+0x1ec>
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0x34>
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d003      	beq.n	80025ea <HAL_RCC_GetSysClockFreq+0x3a>
 80025e2:	e0db      	b.n	800279c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025e4:	4b73      	ldr	r3, [pc, #460]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80025e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80025e8:	e0db      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ea:	4b73      	ldr	r3, [pc, #460]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80025ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025ee:	e0d8      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025f0:	4b6f      	ldr	r3, [pc, #444]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025fa:	4b6d      	ldr	r3, [pc, #436]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d063      	beq.n	80026ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002606:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	099b      	lsrs	r3, r3, #6
 800260c:	2200      	movs	r2, #0
 800260e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002610:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002618:	633b      	str	r3, [r7, #48]	; 0x30
 800261a:	2300      	movs	r3, #0
 800261c:	637b      	str	r3, [r7, #52]	; 0x34
 800261e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002622:	4622      	mov	r2, r4
 8002624:	462b      	mov	r3, r5
 8002626:	f04f 0000 	mov.w	r0, #0
 800262a:	f04f 0100 	mov.w	r1, #0
 800262e:	0159      	lsls	r1, r3, #5
 8002630:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002634:	0150      	lsls	r0, r2, #5
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	4621      	mov	r1, r4
 800263c:	1a51      	subs	r1, r2, r1
 800263e:	6139      	str	r1, [r7, #16]
 8002640:	4629      	mov	r1, r5
 8002642:	eb63 0301 	sbc.w	r3, r3, r1
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002654:	4659      	mov	r1, fp
 8002656:	018b      	lsls	r3, r1, #6
 8002658:	4651      	mov	r1, sl
 800265a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800265e:	4651      	mov	r1, sl
 8002660:	018a      	lsls	r2, r1, #6
 8002662:	4651      	mov	r1, sl
 8002664:	ebb2 0801 	subs.w	r8, r2, r1
 8002668:	4659      	mov	r1, fp
 800266a:	eb63 0901 	sbc.w	r9, r3, r1
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	f04f 0300 	mov.w	r3, #0
 8002676:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800267a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800267e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002682:	4690      	mov	r8, r2
 8002684:	4699      	mov	r9, r3
 8002686:	4623      	mov	r3, r4
 8002688:	eb18 0303 	adds.w	r3, r8, r3
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	462b      	mov	r3, r5
 8002690:	eb49 0303 	adc.w	r3, r9, r3
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026a2:	4629      	mov	r1, r5
 80026a4:	024b      	lsls	r3, r1, #9
 80026a6:	4621      	mov	r1, r4
 80026a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026ac:	4621      	mov	r1, r4
 80026ae:	024a      	lsls	r2, r1, #9
 80026b0:	4610      	mov	r0, r2
 80026b2:	4619      	mov	r1, r3
 80026b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b6:	2200      	movs	r2, #0
 80026b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026c0:	f7fd fd94 	bl	80001ec <__aeabi_uldivmod>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4613      	mov	r3, r2
 80026ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026cc:	e058      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ce:	4b38      	ldr	r3, [pc, #224]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	099b      	lsrs	r3, r3, #6
 80026d4:	2200      	movs	r2, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	4611      	mov	r1, r2
 80026da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026de:	623b      	str	r3, [r7, #32]
 80026e0:	2300      	movs	r3, #0
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
 80026e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026e8:	4642      	mov	r2, r8
 80026ea:	464b      	mov	r3, r9
 80026ec:	f04f 0000 	mov.w	r0, #0
 80026f0:	f04f 0100 	mov.w	r1, #0
 80026f4:	0159      	lsls	r1, r3, #5
 80026f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026fa:	0150      	lsls	r0, r2, #5
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4641      	mov	r1, r8
 8002702:	ebb2 0a01 	subs.w	sl, r2, r1
 8002706:	4649      	mov	r1, r9
 8002708:	eb63 0b01 	sbc.w	fp, r3, r1
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002718:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800271c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002720:	ebb2 040a 	subs.w	r4, r2, sl
 8002724:	eb63 050b 	sbc.w	r5, r3, fp
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	00eb      	lsls	r3, r5, #3
 8002732:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002736:	00e2      	lsls	r2, r4, #3
 8002738:	4614      	mov	r4, r2
 800273a:	461d      	mov	r5, r3
 800273c:	4643      	mov	r3, r8
 800273e:	18e3      	adds	r3, r4, r3
 8002740:	603b      	str	r3, [r7, #0]
 8002742:	464b      	mov	r3, r9
 8002744:	eb45 0303 	adc.w	r3, r5, r3
 8002748:	607b      	str	r3, [r7, #4]
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	f04f 0300 	mov.w	r3, #0
 8002752:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002756:	4629      	mov	r1, r5
 8002758:	028b      	lsls	r3, r1, #10
 800275a:	4621      	mov	r1, r4
 800275c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002760:	4621      	mov	r1, r4
 8002762:	028a      	lsls	r2, r1, #10
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800276a:	2200      	movs	r2, #0
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	61fa      	str	r2, [r7, #28]
 8002770:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002774:	f7fd fd3a 	bl	80001ec <__aeabi_uldivmod>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4613      	mov	r3, r2
 800277e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	0c1b      	lsrs	r3, r3, #16
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	3301      	adds	r3, #1
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002790:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002794:	fbb2 f3f3 	udiv	r3, r2, r3
 8002798:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800279a:	e002      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800279e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3750      	adds	r7, #80	; 0x50
 80027a8:	46bd      	mov	sp, r7
 80027aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800
 80027b4:	00f42400 	.word	0x00f42400
 80027b8:	007a1200 	.word	0x007a1200

080027bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	20000000 	.word	0x20000000

080027d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027d8:	f7ff fff0 	bl	80027bc <HAL_RCC_GetHCLKFreq>
 80027dc:	4602      	mov	r2, r0
 80027de:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	0a9b      	lsrs	r3, r3, #10
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	4903      	ldr	r1, [pc, #12]	; (80027f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ea:	5ccb      	ldrb	r3, [r1, r3]
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40023800 	.word	0x40023800
 80027f8:	080043d4 	.word	0x080043d4

080027fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002800:	f7ff ffdc 	bl	80027bc <HAL_RCC_GetHCLKFreq>
 8002804:	4602      	mov	r2, r0
 8002806:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	0b5b      	lsrs	r3, r3, #13
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4903      	ldr	r1, [pc, #12]	; (8002820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40023800 	.word	0x40023800
 8002820:	080043d4 	.word	0x080043d4

08002824 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e041      	b.n	80028ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fe fa30 	bl	8000cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3304      	adds	r3, #4
 8002860:	4619      	mov	r1, r3
 8002862:	4610      	mov	r0, r2
 8002864:	f000 fc12 	bl	800308c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e041      	b.n	8002958 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d106      	bne.n	80028ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f839 	bl	8002960 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2202      	movs	r2, #2
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3304      	adds	r3, #4
 80028fe:	4619      	mov	r1, r3
 8002900:	4610      	mov	r0, r2
 8002902:	f000 fbc3 	bl	800308c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d109      	bne.n	8002998 <HAL_TIM_PWM_Start+0x24>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b01      	cmp	r3, #1
 800298e:	bf14      	ite	ne
 8002990:	2301      	movne	r3, #1
 8002992:	2300      	moveq	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	e022      	b.n	80029de <HAL_TIM_PWM_Start+0x6a>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	2b04      	cmp	r3, #4
 800299c:	d109      	bne.n	80029b2 <HAL_TIM_PWM_Start+0x3e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	bf14      	ite	ne
 80029aa:	2301      	movne	r3, #1
 80029ac:	2300      	moveq	r3, #0
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	e015      	b.n	80029de <HAL_TIM_PWM_Start+0x6a>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d109      	bne.n	80029cc <HAL_TIM_PWM_Start+0x58>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	bf14      	ite	ne
 80029c4:	2301      	movne	r3, #1
 80029c6:	2300      	moveq	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	e008      	b.n	80029de <HAL_TIM_PWM_Start+0x6a>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	bf14      	ite	ne
 80029d8:	2301      	movne	r3, #1
 80029da:	2300      	moveq	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e07c      	b.n	8002ae0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d104      	bne.n	80029f6 <HAL_TIM_PWM_Start+0x82>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029f4:	e013      	b.n	8002a1e <HAL_TIM_PWM_Start+0xaa>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d104      	bne.n	8002a06 <HAL_TIM_PWM_Start+0x92>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a04:	e00b      	b.n	8002a1e <HAL_TIM_PWM_Start+0xaa>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d104      	bne.n	8002a16 <HAL_TIM_PWM_Start+0xa2>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a14:	e003      	b.n	8002a1e <HAL_TIM_PWM_Start+0xaa>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2202      	movs	r2, #2
 8002a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2201      	movs	r2, #1
 8002a24:	6839      	ldr	r1, [r7, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fe1a 	bl	8003660 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a2d      	ldr	r2, [pc, #180]	; (8002ae8 <HAL_TIM_PWM_Start+0x174>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d004      	beq.n	8002a40 <HAL_TIM_PWM_Start+0xcc>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a2c      	ldr	r2, [pc, #176]	; (8002aec <HAL_TIM_PWM_Start+0x178>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d101      	bne.n	8002a44 <HAL_TIM_PWM_Start+0xd0>
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <HAL_TIM_PWM_Start+0xd2>
 8002a44:	2300      	movs	r3, #0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d007      	beq.n	8002a5a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a22      	ldr	r2, [pc, #136]	; (8002ae8 <HAL_TIM_PWM_Start+0x174>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d022      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x136>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6c:	d01d      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x136>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a1f      	ldr	r2, [pc, #124]	; (8002af0 <HAL_TIM_PWM_Start+0x17c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d018      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x136>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a1d      	ldr	r2, [pc, #116]	; (8002af4 <HAL_TIM_PWM_Start+0x180>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d013      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x136>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a1c      	ldr	r2, [pc, #112]	; (8002af8 <HAL_TIM_PWM_Start+0x184>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d00e      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x136>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a16      	ldr	r2, [pc, #88]	; (8002aec <HAL_TIM_PWM_Start+0x178>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d009      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x136>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a18      	ldr	r2, [pc, #96]	; (8002afc <HAL_TIM_PWM_Start+0x188>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d004      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x136>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a16      	ldr	r2, [pc, #88]	; (8002b00 <HAL_TIM_PWM_Start+0x18c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d111      	bne.n	8002ace <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2b06      	cmp	r3, #6
 8002aba:	d010      	beq.n	8002ade <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002acc:	e007      	b.n	8002ade <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0201 	orr.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40010000 	.word	0x40010000
 8002aec:	40010400 	.word	0x40010400
 8002af0:	40000400 	.word	0x40000400
 8002af4:	40000800 	.word	0x40000800
 8002af8:	40000c00 	.word	0x40000c00
 8002afc:	40014000 	.word	0x40014000
 8002b00:	40001800 	.word	0x40001800

08002b04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d122      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d11b      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0202 	mvn.w	r2, #2
 8002b30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fa81 	bl	800304e <HAL_TIM_IC_CaptureCallback>
 8002b4c:	e005      	b.n	8002b5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fa73 	bl	800303a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fa84 	bl	8003062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d122      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d11b      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0204 	mvn.w	r2, #4
 8002b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2202      	movs	r2, #2
 8002b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fa57 	bl	800304e <HAL_TIM_IC_CaptureCallback>
 8002ba0:	e005      	b.n	8002bae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 fa49 	bl	800303a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fa5a 	bl	8003062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d122      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d11b      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0208 	mvn.w	r2, #8
 8002bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2204      	movs	r2, #4
 8002bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fa2d 	bl	800304e <HAL_TIM_IC_CaptureCallback>
 8002bf4:	e005      	b.n	8002c02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fa1f 	bl	800303a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fa30 	bl	8003062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f003 0310 	and.w	r3, r3, #16
 8002c12:	2b10      	cmp	r3, #16
 8002c14:	d122      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	2b10      	cmp	r3, #16
 8002c22:	d11b      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f06f 0210 	mvn.w	r2, #16
 8002c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2208      	movs	r2, #8
 8002c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fa03 	bl	800304e <HAL_TIM_IC_CaptureCallback>
 8002c48:	e005      	b.n	8002c56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f9f5 	bl	800303a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 fa06 	bl	8003062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d10e      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d107      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f06f 0201 	mvn.w	r2, #1
 8002c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f9cf 	bl	8003026 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c92:	2b80      	cmp	r3, #128	; 0x80
 8002c94:	d10e      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca0:	2b80      	cmp	r3, #128	; 0x80
 8002ca2:	d107      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fd82 	bl	80037b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cbe:	2b40      	cmp	r3, #64	; 0x40
 8002cc0:	d10e      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ccc:	2b40      	cmp	r3, #64	; 0x40
 8002cce:	d107      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f9cb 	bl	8003076 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b20      	cmp	r3, #32
 8002cec:	d10e      	bne.n	8002d0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	d107      	bne.n	8002d0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f06f 0220 	mvn.w	r2, #32
 8002d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fd4c 	bl	80037a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e0ae      	b.n	8002e90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b0c      	cmp	r3, #12
 8002d3e:	f200 809f 	bhi.w	8002e80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d42:	a201      	add	r2, pc, #4	; (adr r2, 8002d48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d48:	08002d7d 	.word	0x08002d7d
 8002d4c:	08002e81 	.word	0x08002e81
 8002d50:	08002e81 	.word	0x08002e81
 8002d54:	08002e81 	.word	0x08002e81
 8002d58:	08002dbd 	.word	0x08002dbd
 8002d5c:	08002e81 	.word	0x08002e81
 8002d60:	08002e81 	.word	0x08002e81
 8002d64:	08002e81 	.word	0x08002e81
 8002d68:	08002dff 	.word	0x08002dff
 8002d6c:	08002e81 	.word	0x08002e81
 8002d70:	08002e81 	.word	0x08002e81
 8002d74:	08002e81 	.word	0x08002e81
 8002d78:	08002e3f 	.word	0x08002e3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68b9      	ldr	r1, [r7, #8]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fa22 	bl	80031cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699a      	ldr	r2, [r3, #24]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0208 	orr.w	r2, r2, #8
 8002d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699a      	ldr	r2, [r3, #24]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0204 	bic.w	r2, r2, #4
 8002da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6999      	ldr	r1, [r3, #24]
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	619a      	str	r2, [r3, #24]
      break;
 8002dba:	e064      	b.n	8002e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68b9      	ldr	r1, [r7, #8]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fa72 	bl	80032ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699a      	ldr	r2, [r3, #24]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6999      	ldr	r1, [r3, #24]
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	021a      	lsls	r2, r3, #8
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	619a      	str	r2, [r3, #24]
      break;
 8002dfc:	e043      	b.n	8002e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 fac7 	bl	8003398 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	69da      	ldr	r2, [r3, #28]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f042 0208 	orr.w	r2, r2, #8
 8002e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	69da      	ldr	r2, [r3, #28]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0204 	bic.w	r2, r2, #4
 8002e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69d9      	ldr	r1, [r3, #28]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	61da      	str	r2, [r3, #28]
      break;
 8002e3c:	e023      	b.n	8002e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68b9      	ldr	r1, [r7, #8]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 fb1b 	bl	8003480 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	69da      	ldr	r2, [r3, #28]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	69da      	ldr	r2, [r3, #28]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69d9      	ldr	r1, [r3, #28]
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	021a      	lsls	r2, r3, #8
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	61da      	str	r2, [r3, #28]
      break;
 8002e7e:	e002      	b.n	8002e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	75fb      	strb	r3, [r7, #23]
      break;
 8002e84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_TIM_ConfigClockSource+0x1c>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e0b4      	b.n	800301e <HAL_TIM_ConfigClockSource+0x186>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eec:	d03e      	beq.n	8002f6c <HAL_TIM_ConfigClockSource+0xd4>
 8002eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ef2:	f200 8087 	bhi.w	8003004 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002efa:	f000 8086 	beq.w	800300a <HAL_TIM_ConfigClockSource+0x172>
 8002efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f02:	d87f      	bhi.n	8003004 <HAL_TIM_ConfigClockSource+0x16c>
 8002f04:	2b70      	cmp	r3, #112	; 0x70
 8002f06:	d01a      	beq.n	8002f3e <HAL_TIM_ConfigClockSource+0xa6>
 8002f08:	2b70      	cmp	r3, #112	; 0x70
 8002f0a:	d87b      	bhi.n	8003004 <HAL_TIM_ConfigClockSource+0x16c>
 8002f0c:	2b60      	cmp	r3, #96	; 0x60
 8002f0e:	d050      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x11a>
 8002f10:	2b60      	cmp	r3, #96	; 0x60
 8002f12:	d877      	bhi.n	8003004 <HAL_TIM_ConfigClockSource+0x16c>
 8002f14:	2b50      	cmp	r3, #80	; 0x50
 8002f16:	d03c      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0xfa>
 8002f18:	2b50      	cmp	r3, #80	; 0x50
 8002f1a:	d873      	bhi.n	8003004 <HAL_TIM_ConfigClockSource+0x16c>
 8002f1c:	2b40      	cmp	r3, #64	; 0x40
 8002f1e:	d058      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0x13a>
 8002f20:	2b40      	cmp	r3, #64	; 0x40
 8002f22:	d86f      	bhi.n	8003004 <HAL_TIM_ConfigClockSource+0x16c>
 8002f24:	2b30      	cmp	r3, #48	; 0x30
 8002f26:	d064      	beq.n	8002ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f28:	2b30      	cmp	r3, #48	; 0x30
 8002f2a:	d86b      	bhi.n	8003004 <HAL_TIM_ConfigClockSource+0x16c>
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d060      	beq.n	8002ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d867      	bhi.n	8003004 <HAL_TIM_ConfigClockSource+0x16c>
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d05c      	beq.n	8002ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f38:	2b10      	cmp	r3, #16
 8002f3a:	d05a      	beq.n	8002ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f3c:	e062      	b.n	8003004 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	6899      	ldr	r1, [r3, #8]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f000 fb67 	bl	8003620 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	609a      	str	r2, [r3, #8]
      break;
 8002f6a:	e04f      	b.n	800300c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	6899      	ldr	r1, [r3, #8]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f000 fb50 	bl	8003620 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f8e:	609a      	str	r2, [r3, #8]
      break;
 8002f90:	e03c      	b.n	800300c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	6859      	ldr	r1, [r3, #4]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f000 fac4 	bl	800352c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2150      	movs	r1, #80	; 0x50
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fb1d 	bl	80035ea <TIM_ITRx_SetConfig>
      break;
 8002fb0:	e02c      	b.n	800300c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6859      	ldr	r1, [r3, #4]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f000 fae3 	bl	800358a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2160      	movs	r1, #96	; 0x60
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fb0d 	bl	80035ea <TIM_ITRx_SetConfig>
      break;
 8002fd0:	e01c      	b.n	800300c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6818      	ldr	r0, [r3, #0]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	6859      	ldr	r1, [r3, #4]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f000 faa4 	bl	800352c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2140      	movs	r1, #64	; 0x40
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 fafd 	bl	80035ea <TIM_ITRx_SetConfig>
      break;
 8002ff0:	e00c      	b.n	800300c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	f000 faf4 	bl	80035ea <TIM_ITRx_SetConfig>
      break;
 8003002:	e003      	b.n	800300c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
      break;
 8003008:	e000      	b.n	800300c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800300a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800301c:	7bfb      	ldrb	r3, [r7, #15]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a40      	ldr	r2, [pc, #256]	; (80031a0 <TIM_Base_SetConfig+0x114>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d013      	beq.n	80030cc <TIM_Base_SetConfig+0x40>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030aa:	d00f      	beq.n	80030cc <TIM_Base_SetConfig+0x40>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a3d      	ldr	r2, [pc, #244]	; (80031a4 <TIM_Base_SetConfig+0x118>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d00b      	beq.n	80030cc <TIM_Base_SetConfig+0x40>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a3c      	ldr	r2, [pc, #240]	; (80031a8 <TIM_Base_SetConfig+0x11c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d007      	beq.n	80030cc <TIM_Base_SetConfig+0x40>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a3b      	ldr	r2, [pc, #236]	; (80031ac <TIM_Base_SetConfig+0x120>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d003      	beq.n	80030cc <TIM_Base_SetConfig+0x40>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a3a      	ldr	r2, [pc, #232]	; (80031b0 <TIM_Base_SetConfig+0x124>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d108      	bne.n	80030de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4313      	orrs	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a2f      	ldr	r2, [pc, #188]	; (80031a0 <TIM_Base_SetConfig+0x114>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d02b      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ec:	d027      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a2c      	ldr	r2, [pc, #176]	; (80031a4 <TIM_Base_SetConfig+0x118>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d023      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a2b      	ldr	r2, [pc, #172]	; (80031a8 <TIM_Base_SetConfig+0x11c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d01f      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a2a      	ldr	r2, [pc, #168]	; (80031ac <TIM_Base_SetConfig+0x120>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d01b      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a29      	ldr	r2, [pc, #164]	; (80031b0 <TIM_Base_SetConfig+0x124>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d017      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a28      	ldr	r2, [pc, #160]	; (80031b4 <TIM_Base_SetConfig+0x128>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d013      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a27      	ldr	r2, [pc, #156]	; (80031b8 <TIM_Base_SetConfig+0x12c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d00f      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a26      	ldr	r2, [pc, #152]	; (80031bc <TIM_Base_SetConfig+0x130>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00b      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a25      	ldr	r2, [pc, #148]	; (80031c0 <TIM_Base_SetConfig+0x134>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d007      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a24      	ldr	r2, [pc, #144]	; (80031c4 <TIM_Base_SetConfig+0x138>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d003      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a23      	ldr	r2, [pc, #140]	; (80031c8 <TIM_Base_SetConfig+0x13c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d108      	bne.n	8003150 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4313      	orrs	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	4313      	orrs	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a0a      	ldr	r2, [pc, #40]	; (80031a0 <TIM_Base_SetConfig+0x114>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d003      	beq.n	8003184 <TIM_Base_SetConfig+0xf8>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a0c      	ldr	r2, [pc, #48]	; (80031b0 <TIM_Base_SetConfig+0x124>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d103      	bne.n	800318c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	615a      	str	r2, [r3, #20]
}
 8003192:	bf00      	nop
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40010000 	.word	0x40010000
 80031a4:	40000400 	.word	0x40000400
 80031a8:	40000800 	.word	0x40000800
 80031ac:	40000c00 	.word	0x40000c00
 80031b0:	40010400 	.word	0x40010400
 80031b4:	40014000 	.word	0x40014000
 80031b8:	40014400 	.word	0x40014400
 80031bc:	40014800 	.word	0x40014800
 80031c0:	40001800 	.word	0x40001800
 80031c4:	40001c00 	.word	0x40001c00
 80031c8:	40002000 	.word	0x40002000

080031cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	f023 0201 	bic.w	r2, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f023 0303 	bic.w	r3, r3, #3
 8003202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	4313      	orrs	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f023 0302 	bic.w	r3, r3, #2
 8003214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	4313      	orrs	r3, r2
 800321e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a20      	ldr	r2, [pc, #128]	; (80032a4 <TIM_OC1_SetConfig+0xd8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d003      	beq.n	8003230 <TIM_OC1_SetConfig+0x64>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a1f      	ldr	r2, [pc, #124]	; (80032a8 <TIM_OC1_SetConfig+0xdc>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d10c      	bne.n	800324a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f023 0308 	bic.w	r3, r3, #8
 8003236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	4313      	orrs	r3, r2
 8003240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f023 0304 	bic.w	r3, r3, #4
 8003248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a15      	ldr	r2, [pc, #84]	; (80032a4 <TIM_OC1_SetConfig+0xd8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d003      	beq.n	800325a <TIM_OC1_SetConfig+0x8e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a14      	ldr	r2, [pc, #80]	; (80032a8 <TIM_OC1_SetConfig+0xdc>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d111      	bne.n	800327e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	621a      	str	r2, [r3, #32]
}
 8003298:	bf00      	nop
 800329a:	371c      	adds	r7, #28
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	40010000 	.word	0x40010000
 80032a8:	40010400 	.word	0x40010400

080032ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	f023 0210 	bic.w	r2, r3, #16
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	021b      	lsls	r3, r3, #8
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f023 0320 	bic.w	r3, r3, #32
 80032f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4313      	orrs	r3, r2
 8003302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a22      	ldr	r2, [pc, #136]	; (8003390 <TIM_OC2_SetConfig+0xe4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d003      	beq.n	8003314 <TIM_OC2_SetConfig+0x68>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a21      	ldr	r2, [pc, #132]	; (8003394 <TIM_OC2_SetConfig+0xe8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d10d      	bne.n	8003330 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800331a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800332e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a17      	ldr	r2, [pc, #92]	; (8003390 <TIM_OC2_SetConfig+0xe4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d003      	beq.n	8003340 <TIM_OC2_SetConfig+0x94>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a16      	ldr	r2, [pc, #88]	; (8003394 <TIM_OC2_SetConfig+0xe8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d113      	bne.n	8003368 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003346:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800334e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	621a      	str	r2, [r3, #32]
}
 8003382:	bf00      	nop
 8003384:	371c      	adds	r7, #28
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40010000 	.word	0x40010000
 8003394:	40010400 	.word	0x40010400

08003398 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0303 	bic.w	r3, r3, #3
 80033ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	021b      	lsls	r3, r3, #8
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a21      	ldr	r2, [pc, #132]	; (8003478 <TIM_OC3_SetConfig+0xe0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d003      	beq.n	80033fe <TIM_OC3_SetConfig+0x66>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a20      	ldr	r2, [pc, #128]	; (800347c <TIM_OC3_SetConfig+0xe4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d10d      	bne.n	800341a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003404:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	021b      	lsls	r3, r3, #8
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	4313      	orrs	r3, r2
 8003410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a16      	ldr	r2, [pc, #88]	; (8003478 <TIM_OC3_SetConfig+0xe0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d003      	beq.n	800342a <TIM_OC3_SetConfig+0x92>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a15      	ldr	r2, [pc, #84]	; (800347c <TIM_OC3_SetConfig+0xe4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d113      	bne.n	8003452 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	621a      	str	r2, [r3, #32]
}
 800346c:	bf00      	nop
 800346e:	371c      	adds	r7, #28
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	40010000 	.word	0x40010000
 800347c:	40010400 	.word	0x40010400

08003480 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	021b      	lsls	r3, r3, #8
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	031b      	lsls	r3, r3, #12
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a12      	ldr	r2, [pc, #72]	; (8003524 <TIM_OC4_SetConfig+0xa4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d003      	beq.n	80034e8 <TIM_OC4_SetConfig+0x68>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a11      	ldr	r2, [pc, #68]	; (8003528 <TIM_OC4_SetConfig+0xa8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d109      	bne.n	80034fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	019b      	lsls	r3, r3, #6
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	621a      	str	r2, [r3, #32]
}
 8003516:	bf00      	nop
 8003518:	371c      	adds	r7, #28
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40010000 	.word	0x40010000
 8003528:	40010400 	.word	0x40010400

0800352c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	f023 0201 	bic.w	r2, r3, #1
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f023 030a 	bic.w	r3, r3, #10
 8003568:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	4313      	orrs	r3, r2
 8003570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	621a      	str	r2, [r3, #32]
}
 800357e:	bf00      	nop
 8003580:	371c      	adds	r7, #28
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800358a:	b480      	push	{r7}
 800358c:	b087      	sub	sp, #28
 800358e:	af00      	add	r7, sp, #0
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	f023 0210 	bic.w	r2, r3, #16
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	031b      	lsls	r3, r3, #12
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	621a      	str	r2, [r3, #32]
}
 80035de:	bf00      	nop
 80035e0:	371c      	adds	r7, #28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b085      	sub	sp, #20
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003600:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	f043 0307 	orr.w	r3, r3, #7
 800360c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	609a      	str	r2, [r3, #8]
}
 8003614:	bf00      	nop
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800363a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	021a      	lsls	r2, r3, #8
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	431a      	orrs	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4313      	orrs	r3, r2
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	609a      	str	r2, [r3, #8]
}
 8003654:	bf00      	nop
 8003656:	371c      	adds	r7, #28
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f003 031f 	and.w	r3, r3, #31
 8003672:	2201      	movs	r2, #1
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a1a      	ldr	r2, [r3, #32]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	43db      	mvns	r3, r3
 8003682:	401a      	ands	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a1a      	ldr	r2, [r3, #32]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	fa01 f303 	lsl.w	r3, r1, r3
 8003698:	431a      	orrs	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	621a      	str	r2, [r3, #32]
}
 800369e:	bf00      	nop
 80036a0:	371c      	adds	r7, #28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
	...

080036ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e05a      	b.n	800377a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a21      	ldr	r2, [pc, #132]	; (8003788 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d022      	beq.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003710:	d01d      	beq.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a1d      	ldr	r2, [pc, #116]	; (800378c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d018      	beq.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a1b      	ldr	r2, [pc, #108]	; (8003790 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d013      	beq.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a1a      	ldr	r2, [pc, #104]	; (8003794 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00e      	beq.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a18      	ldr	r2, [pc, #96]	; (8003798 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d009      	beq.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a17      	ldr	r2, [pc, #92]	; (800379c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d004      	beq.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a15      	ldr	r2, [pc, #84]	; (80037a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d10c      	bne.n	8003768 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003754:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	4313      	orrs	r3, r2
 800375e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40010000 	.word	0x40010000
 800378c:	40000400 	.word	0x40000400
 8003790:	40000800 	.word	0x40000800
 8003794:	40000c00 	.word	0x40000c00
 8003798:	40010400 	.word	0x40010400
 800379c:	40014000 	.word	0x40014000
 80037a0:	40001800 	.word	0x40001800

080037a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e03f      	b.n	800385e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fd faba 	bl	8000d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2224      	movs	r2, #36	; 0x24
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800380e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f829 	bl	8003868 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003824:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695a      	ldr	r2, [r3, #20]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003834:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003844:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800386c:	b0c0      	sub	sp, #256	; 0x100
 800386e:	af00      	add	r7, sp, #0
 8003870:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003884:	68d9      	ldr	r1, [r3, #12]
 8003886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	ea40 0301 	orr.w	r3, r0, r1
 8003890:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	431a      	orrs	r2, r3
 80038a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038c0:	f021 010c 	bic.w	r1, r1, #12
 80038c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038ce:	430b      	orrs	r3, r1
 80038d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e2:	6999      	ldr	r1, [r3, #24]
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	ea40 0301 	orr.w	r3, r0, r1
 80038ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4b8f      	ldr	r3, [pc, #572]	; (8003b34 <UART_SetConfig+0x2cc>)
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d005      	beq.n	8003908 <UART_SetConfig+0xa0>
 80038fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	4b8d      	ldr	r3, [pc, #564]	; (8003b38 <UART_SetConfig+0x2d0>)
 8003904:	429a      	cmp	r2, r3
 8003906:	d104      	bne.n	8003912 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003908:	f7fe ff78 	bl	80027fc <HAL_RCC_GetPCLK2Freq>
 800390c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003910:	e003      	b.n	800391a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003912:	f7fe ff5f 	bl	80027d4 <HAL_RCC_GetPCLK1Freq>
 8003916:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800391a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003924:	f040 810c 	bne.w	8003b40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800392c:	2200      	movs	r2, #0
 800392e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003932:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003936:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800393a:	4622      	mov	r2, r4
 800393c:	462b      	mov	r3, r5
 800393e:	1891      	adds	r1, r2, r2
 8003940:	65b9      	str	r1, [r7, #88]	; 0x58
 8003942:	415b      	adcs	r3, r3
 8003944:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003946:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800394a:	4621      	mov	r1, r4
 800394c:	eb12 0801 	adds.w	r8, r2, r1
 8003950:	4629      	mov	r1, r5
 8003952:	eb43 0901 	adc.w	r9, r3, r1
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800396a:	4690      	mov	r8, r2
 800396c:	4699      	mov	r9, r3
 800396e:	4623      	mov	r3, r4
 8003970:	eb18 0303 	adds.w	r3, r8, r3
 8003974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003978:	462b      	mov	r3, r5
 800397a:	eb49 0303 	adc.w	r3, r9, r3
 800397e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800398e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003992:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003996:	460b      	mov	r3, r1
 8003998:	18db      	adds	r3, r3, r3
 800399a:	653b      	str	r3, [r7, #80]	; 0x50
 800399c:	4613      	mov	r3, r2
 800399e:	eb42 0303 	adc.w	r3, r2, r3
 80039a2:	657b      	str	r3, [r7, #84]	; 0x54
 80039a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80039ac:	f7fc fc1e 	bl	80001ec <__aeabi_uldivmod>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4b61      	ldr	r3, [pc, #388]	; (8003b3c <UART_SetConfig+0x2d4>)
 80039b6:	fba3 2302 	umull	r2, r3, r3, r2
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	011c      	lsls	r4, r3, #4
 80039be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80039cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80039d0:	4642      	mov	r2, r8
 80039d2:	464b      	mov	r3, r9
 80039d4:	1891      	adds	r1, r2, r2
 80039d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80039d8:	415b      	adcs	r3, r3
 80039da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80039e0:	4641      	mov	r1, r8
 80039e2:	eb12 0a01 	adds.w	sl, r2, r1
 80039e6:	4649      	mov	r1, r9
 80039e8:	eb43 0b01 	adc.w	fp, r3, r1
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a00:	4692      	mov	sl, r2
 8003a02:	469b      	mov	fp, r3
 8003a04:	4643      	mov	r3, r8
 8003a06:	eb1a 0303 	adds.w	r3, sl, r3
 8003a0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a0e:	464b      	mov	r3, r9
 8003a10:	eb4b 0303 	adc.w	r3, fp, r3
 8003a14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	18db      	adds	r3, r3, r3
 8003a30:	643b      	str	r3, [r7, #64]	; 0x40
 8003a32:	4613      	mov	r3, r2
 8003a34:	eb42 0303 	adc.w	r3, r2, r3
 8003a38:	647b      	str	r3, [r7, #68]	; 0x44
 8003a3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a42:	f7fc fbd3 	bl	80001ec <__aeabi_uldivmod>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	4b3b      	ldr	r3, [pc, #236]	; (8003b3c <UART_SetConfig+0x2d4>)
 8003a4e:	fba3 2301 	umull	r2, r3, r3, r1
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	2264      	movs	r2, #100	; 0x64
 8003a56:	fb02 f303 	mul.w	r3, r2, r3
 8003a5a:	1acb      	subs	r3, r1, r3
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a62:	4b36      	ldr	r3, [pc, #216]	; (8003b3c <UART_SetConfig+0x2d4>)
 8003a64:	fba3 2302 	umull	r2, r3, r3, r2
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a70:	441c      	add	r4, r3
 8003a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a84:	4642      	mov	r2, r8
 8003a86:	464b      	mov	r3, r9
 8003a88:	1891      	adds	r1, r2, r2
 8003a8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a8c:	415b      	adcs	r3, r3
 8003a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a94:	4641      	mov	r1, r8
 8003a96:	1851      	adds	r1, r2, r1
 8003a98:	6339      	str	r1, [r7, #48]	; 0x30
 8003a9a:	4649      	mov	r1, r9
 8003a9c:	414b      	adcs	r3, r1
 8003a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003aac:	4659      	mov	r1, fp
 8003aae:	00cb      	lsls	r3, r1, #3
 8003ab0:	4651      	mov	r1, sl
 8003ab2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ab6:	4651      	mov	r1, sl
 8003ab8:	00ca      	lsls	r2, r1, #3
 8003aba:	4610      	mov	r0, r2
 8003abc:	4619      	mov	r1, r3
 8003abe:	4603      	mov	r3, r0
 8003ac0:	4642      	mov	r2, r8
 8003ac2:	189b      	adds	r3, r3, r2
 8003ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ac8:	464b      	mov	r3, r9
 8003aca:	460a      	mov	r2, r1
 8003acc:	eb42 0303 	adc.w	r3, r2, r3
 8003ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ae0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ae4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ae8:	460b      	mov	r3, r1
 8003aea:	18db      	adds	r3, r3, r3
 8003aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aee:	4613      	mov	r3, r2
 8003af0:	eb42 0303 	adc.w	r3, r2, r3
 8003af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003afa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003afe:	f7fc fb75 	bl	80001ec <__aeabi_uldivmod>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4b0d      	ldr	r3, [pc, #52]	; (8003b3c <UART_SetConfig+0x2d4>)
 8003b08:	fba3 1302 	umull	r1, r3, r3, r2
 8003b0c:	095b      	lsrs	r3, r3, #5
 8003b0e:	2164      	movs	r1, #100	; 0x64
 8003b10:	fb01 f303 	mul.w	r3, r1, r3
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	3332      	adds	r3, #50	; 0x32
 8003b1a:	4a08      	ldr	r2, [pc, #32]	; (8003b3c <UART_SetConfig+0x2d4>)
 8003b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	f003 0207 	and.w	r2, r3, #7
 8003b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4422      	add	r2, r4
 8003b2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b30:	e106      	b.n	8003d40 <UART_SetConfig+0x4d8>
 8003b32:	bf00      	nop
 8003b34:	40011000 	.word	0x40011000
 8003b38:	40011400 	.word	0x40011400
 8003b3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b44:	2200      	movs	r2, #0
 8003b46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b52:	4642      	mov	r2, r8
 8003b54:	464b      	mov	r3, r9
 8003b56:	1891      	adds	r1, r2, r2
 8003b58:	6239      	str	r1, [r7, #32]
 8003b5a:	415b      	adcs	r3, r3
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b62:	4641      	mov	r1, r8
 8003b64:	1854      	adds	r4, r2, r1
 8003b66:	4649      	mov	r1, r9
 8003b68:	eb43 0501 	adc.w	r5, r3, r1
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	00eb      	lsls	r3, r5, #3
 8003b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b7a:	00e2      	lsls	r2, r4, #3
 8003b7c:	4614      	mov	r4, r2
 8003b7e:	461d      	mov	r5, r3
 8003b80:	4643      	mov	r3, r8
 8003b82:	18e3      	adds	r3, r4, r3
 8003b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b88:	464b      	mov	r3, r9
 8003b8a:	eb45 0303 	adc.w	r3, r5, r3
 8003b8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003bae:	4629      	mov	r1, r5
 8003bb0:	008b      	lsls	r3, r1, #2
 8003bb2:	4621      	mov	r1, r4
 8003bb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bb8:	4621      	mov	r1, r4
 8003bba:	008a      	lsls	r2, r1, #2
 8003bbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003bc0:	f7fc fb14 	bl	80001ec <__aeabi_uldivmod>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4b60      	ldr	r3, [pc, #384]	; (8003d4c <UART_SetConfig+0x4e4>)
 8003bca:	fba3 2302 	umull	r2, r3, r3, r2
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	011c      	lsls	r4, r3, #4
 8003bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003be0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003be4:	4642      	mov	r2, r8
 8003be6:	464b      	mov	r3, r9
 8003be8:	1891      	adds	r1, r2, r2
 8003bea:	61b9      	str	r1, [r7, #24]
 8003bec:	415b      	adcs	r3, r3
 8003bee:	61fb      	str	r3, [r7, #28]
 8003bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bf4:	4641      	mov	r1, r8
 8003bf6:	1851      	adds	r1, r2, r1
 8003bf8:	6139      	str	r1, [r7, #16]
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	414b      	adcs	r3, r1
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c0c:	4659      	mov	r1, fp
 8003c0e:	00cb      	lsls	r3, r1, #3
 8003c10:	4651      	mov	r1, sl
 8003c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c16:	4651      	mov	r1, sl
 8003c18:	00ca      	lsls	r2, r1, #3
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4603      	mov	r3, r0
 8003c20:	4642      	mov	r2, r8
 8003c22:	189b      	adds	r3, r3, r2
 8003c24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c28:	464b      	mov	r3, r9
 8003c2a:	460a      	mov	r2, r1
 8003c2c:	eb42 0303 	adc.w	r3, r2, r3
 8003c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c4c:	4649      	mov	r1, r9
 8003c4e:	008b      	lsls	r3, r1, #2
 8003c50:	4641      	mov	r1, r8
 8003c52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c56:	4641      	mov	r1, r8
 8003c58:	008a      	lsls	r2, r1, #2
 8003c5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c5e:	f7fc fac5 	bl	80001ec <__aeabi_uldivmod>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4611      	mov	r1, r2
 8003c68:	4b38      	ldr	r3, [pc, #224]	; (8003d4c <UART_SetConfig+0x4e4>)
 8003c6a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	2264      	movs	r2, #100	; 0x64
 8003c72:	fb02 f303 	mul.w	r3, r2, r3
 8003c76:	1acb      	subs	r3, r1, r3
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	3332      	adds	r3, #50	; 0x32
 8003c7c:	4a33      	ldr	r2, [pc, #204]	; (8003d4c <UART_SetConfig+0x4e4>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c88:	441c      	add	r4, r3
 8003c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c8e:	2200      	movs	r2, #0
 8003c90:	673b      	str	r3, [r7, #112]	; 0x70
 8003c92:	677a      	str	r2, [r7, #116]	; 0x74
 8003c94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c98:	4642      	mov	r2, r8
 8003c9a:	464b      	mov	r3, r9
 8003c9c:	1891      	adds	r1, r2, r2
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	415b      	adcs	r3, r3
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ca8:	4641      	mov	r1, r8
 8003caa:	1851      	adds	r1, r2, r1
 8003cac:	6039      	str	r1, [r7, #0]
 8003cae:	4649      	mov	r1, r9
 8003cb0:	414b      	adcs	r3, r1
 8003cb2:	607b      	str	r3, [r7, #4]
 8003cb4:	f04f 0200 	mov.w	r2, #0
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003cc0:	4659      	mov	r1, fp
 8003cc2:	00cb      	lsls	r3, r1, #3
 8003cc4:	4651      	mov	r1, sl
 8003cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cca:	4651      	mov	r1, sl
 8003ccc:	00ca      	lsls	r2, r1, #3
 8003cce:	4610      	mov	r0, r2
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	4642      	mov	r2, r8
 8003cd6:	189b      	adds	r3, r3, r2
 8003cd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cda:	464b      	mov	r3, r9
 8003cdc:	460a      	mov	r2, r1
 8003cde:	eb42 0303 	adc.w	r3, r2, r3
 8003ce2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	663b      	str	r3, [r7, #96]	; 0x60
 8003cee:	667a      	str	r2, [r7, #100]	; 0x64
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003cfc:	4649      	mov	r1, r9
 8003cfe:	008b      	lsls	r3, r1, #2
 8003d00:	4641      	mov	r1, r8
 8003d02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d06:	4641      	mov	r1, r8
 8003d08:	008a      	lsls	r2, r1, #2
 8003d0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d0e:	f7fc fa6d 	bl	80001ec <__aeabi_uldivmod>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4b0d      	ldr	r3, [pc, #52]	; (8003d4c <UART_SetConfig+0x4e4>)
 8003d18:	fba3 1302 	umull	r1, r3, r3, r2
 8003d1c:	095b      	lsrs	r3, r3, #5
 8003d1e:	2164      	movs	r1, #100	; 0x64
 8003d20:	fb01 f303 	mul.w	r3, r1, r3
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	3332      	adds	r3, #50	; 0x32
 8003d2a:	4a08      	ldr	r2, [pc, #32]	; (8003d4c <UART_SetConfig+0x4e4>)
 8003d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d30:	095b      	lsrs	r3, r3, #5
 8003d32:	f003 020f 	and.w	r2, r3, #15
 8003d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4422      	add	r2, r4
 8003d3e:	609a      	str	r2, [r3, #8]
}
 8003d40:	bf00      	nop
 8003d42:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d46:	46bd      	mov	sp, r7
 8003d48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d4c:	51eb851f 	.word	0x51eb851f

08003d50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d50:	b084      	sub	sp, #16
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b084      	sub	sp, #16
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	f107 001c 	add.w	r0, r7, #28
 8003d5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d122      	bne.n	8003dae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d105      	bne.n	8003da2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 faa2 	bl	80042ec <USB_CoreReset>
 8003da8:	4603      	mov	r3, r0
 8003daa:	73fb      	strb	r3, [r7, #15]
 8003dac:	e01a      	b.n	8003de4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fa96 	bl	80042ec <USB_CoreReset>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d106      	bne.n	8003dd8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	639a      	str	r2, [r3, #56]	; 0x38
 8003dd6:	e005      	b.n	8003de4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ddc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d10b      	bne.n	8003e02 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f043 0206 	orr.w	r2, r3, #6
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f043 0220 	orr.w	r2, r3, #32
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e0e:	b004      	add	sp, #16
 8003e10:	4770      	bx	lr

08003e12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f023 0201 	bic.w	r2, r3, #1
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d115      	bne.n	8003e82 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e62:	2001      	movs	r0, #1
 8003e64:	f7fd f906 	bl	8001074 <HAL_Delay>
      ms++;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 fa2e 	bl	80042d0 <USB_GetMode>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d01e      	beq.n	8003eb8 <USB_SetCurrentMode+0x84>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b31      	cmp	r3, #49	; 0x31
 8003e7e:	d9f0      	bls.n	8003e62 <USB_SetCurrentMode+0x2e>
 8003e80:	e01a      	b.n	8003eb8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e82:	78fb      	ldrb	r3, [r7, #3]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d115      	bne.n	8003eb4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e94:	2001      	movs	r0, #1
 8003e96:	f7fd f8ed 	bl	8001074 <HAL_Delay>
      ms++;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fa15 	bl	80042d0 <USB_GetMode>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <USB_SetCurrentMode+0x84>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b31      	cmp	r3, #49	; 0x31
 8003eb0:	d9f0      	bls.n	8003e94 <USB_SetCurrentMode+0x60>
 8003eb2:	e001      	b.n	8003eb8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e005      	b.n	8003ec4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2b32      	cmp	r3, #50	; 0x32
 8003ebc:	d101      	bne.n	8003ec2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ecc:	b084      	sub	sp, #16
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b086      	sub	sp, #24
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003eda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	613b      	str	r3, [r7, #16]
 8003eea:	e009      	b.n	8003f00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	3340      	adds	r3, #64	; 0x40
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	3301      	adds	r3, #1
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	2b0e      	cmp	r3, #14
 8003f04:	d9f2      	bls.n	8003eec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d11c      	bne.n	8003f46 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f1a:	f043 0302 	orr.w	r3, r3, #2
 8003f1e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f30:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	639a      	str	r2, [r3, #56]	; 0x38
 8003f44:	e00b      	b.n	8003f5e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f56:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f64:	461a      	mov	r2, r3
 8003f66:	2300      	movs	r3, #0
 8003f68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f70:	4619      	mov	r1, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f78:	461a      	mov	r2, r3
 8003f7a:	680b      	ldr	r3, [r1, #0]
 8003f7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d10c      	bne.n	8003f9e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d104      	bne.n	8003f94 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f965 	bl	800425c <USB_SetDevSpeed>
 8003f92:	e008      	b.n	8003fa6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f94:	2101      	movs	r1, #1
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f960 	bl	800425c <USB_SetDevSpeed>
 8003f9c:	e003      	b.n	8003fa6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f9e:	2103      	movs	r1, #3
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f95b 	bl	800425c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003fa6:	2110      	movs	r1, #16
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f8f3 	bl	8004194 <USB_FlushTxFifo>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f91f 	bl	80041fc <USB_FlushRxFifo>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fce:	461a      	mov	r2, r3
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fda:	461a      	mov	r2, r3
 8003fdc:	2300      	movs	r3, #0
 8003fde:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	2300      	movs	r3, #0
 8003fea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fec:	2300      	movs	r3, #0
 8003fee:	613b      	str	r3, [r7, #16]
 8003ff0:	e043      	b.n	800407a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004004:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004008:	d118      	bne.n	800403c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10a      	bne.n	8004026 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401c:	461a      	mov	r2, r3
 800401e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	e013      	b.n	800404e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4413      	add	r3, r2
 800402e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004032:	461a      	mov	r2, r3
 8004034:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	e008      	b.n	800404e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004048:	461a      	mov	r2, r3
 800404a:	2300      	movs	r3, #0
 800404c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4413      	add	r3, r2
 8004056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405a:	461a      	mov	r2, r3
 800405c:	2300      	movs	r3, #0
 800405e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800406c:	461a      	mov	r2, r3
 800406e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004072:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	3301      	adds	r3, #1
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	429a      	cmp	r2, r3
 8004080:	d3b7      	bcc.n	8003ff2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004082:	2300      	movs	r3, #0
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	e043      	b.n	8004110 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800409a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800409e:	d118      	bne.n	80040d2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10a      	bne.n	80040bc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b2:	461a      	mov	r2, r3
 80040b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	e013      	b.n	80040e4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c8:	461a      	mov	r2, r3
 80040ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040ce:	6013      	str	r3, [r2, #0]
 80040d0:	e008      	b.n	80040e4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040de:	461a      	mov	r2, r3
 80040e0:	2300      	movs	r3, #0
 80040e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f0:	461a      	mov	r2, r3
 80040f2:	2300      	movs	r3, #0
 80040f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004102:	461a      	mov	r2, r3
 8004104:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004108:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	3301      	adds	r3, #1
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	429a      	cmp	r2, r3
 8004116:	d3b7      	bcc.n	8004088 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004126:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800412a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004138:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800413a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413c:	2b00      	cmp	r3, #0
 800413e:	d105      	bne.n	800414c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	f043 0210 	orr.w	r2, r3, #16
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699a      	ldr	r2, [r3, #24]
 8004150:	4b0f      	ldr	r3, [pc, #60]	; (8004190 <USB_DevInit+0x2c4>)
 8004152:	4313      	orrs	r3, r2
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800415a:	2b00      	cmp	r3, #0
 800415c:	d005      	beq.n	800416a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	f043 0208 	orr.w	r2, r3, #8
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800416a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800416c:	2b01      	cmp	r3, #1
 800416e:	d107      	bne.n	8004180 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004178:	f043 0304 	orr.w	r3, r3, #4
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004180:	7dfb      	ldrb	r3, [r7, #23]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800418c:	b004      	add	sp, #16
 800418e:	4770      	bx	lr
 8004190:	803c3800 	.word	0x803c3800

08004194 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	3301      	adds	r3, #1
 80041a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4a13      	ldr	r2, [pc, #76]	; (80041f8 <USB_FlushTxFifo+0x64>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d901      	bls.n	80041b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e01b      	b.n	80041ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	daf2      	bge.n	80041a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	019b      	lsls	r3, r3, #6
 80041c4:	f043 0220 	orr.w	r2, r3, #32
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	3301      	adds	r3, #1
 80041d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4a08      	ldr	r2, [pc, #32]	; (80041f8 <USB_FlushTxFifo+0x64>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d901      	bls.n	80041de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e006      	b.n	80041ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	d0f0      	beq.n	80041cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	00030d40 	.word	0x00030d40

080041fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	3301      	adds	r3, #1
 800420c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4a11      	ldr	r2, [pc, #68]	; (8004258 <USB_FlushRxFifo+0x5c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d901      	bls.n	800421a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e018      	b.n	800424c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	daf2      	bge.n	8004208 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2210      	movs	r2, #16
 800422a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3301      	adds	r3, #1
 8004230:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4a08      	ldr	r2, [pc, #32]	; (8004258 <USB_FlushRxFifo+0x5c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e006      	b.n	800424c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	f003 0310 	and.w	r3, r3, #16
 8004246:	2b10      	cmp	r3, #16
 8004248:	d0f0      	beq.n	800422c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	00030d40 	.word	0x00030d40

0800425c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	78fb      	ldrb	r3, [r7, #3]
 8004276:	68f9      	ldr	r1, [r7, #12]
 8004278:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800427c:	4313      	orrs	r3, r2
 800427e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800428e:	b480      	push	{r7}
 8004290:	b085      	sub	sp, #20
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80042a8:	f023 0303 	bic.w	r3, r3, #3
 80042ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042bc:	f043 0302 	orr.w	r3, r3, #2
 80042c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	f003 0301 	and.w	r3, r3, #1
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	3301      	adds	r3, #1
 80042fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4a13      	ldr	r2, [pc, #76]	; (8004350 <USB_CoreReset+0x64>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d901      	bls.n	800430a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e01b      	b.n	8004342 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	2b00      	cmp	r3, #0
 8004310:	daf2      	bge.n	80042f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f043 0201 	orr.w	r2, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3301      	adds	r3, #1
 8004326:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4a09      	ldr	r2, [pc, #36]	; (8004350 <USB_CoreReset+0x64>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d901      	bls.n	8004334 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e006      	b.n	8004342 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b01      	cmp	r3, #1
 800433e:	d0f0      	beq.n	8004322 <USB_CoreReset+0x36>

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	00030d40 	.word	0x00030d40

08004354 <memset>:
 8004354:	4402      	add	r2, r0
 8004356:	4603      	mov	r3, r0
 8004358:	4293      	cmp	r3, r2
 800435a:	d100      	bne.n	800435e <memset+0xa>
 800435c:	4770      	bx	lr
 800435e:	f803 1b01 	strb.w	r1, [r3], #1
 8004362:	e7f9      	b.n	8004358 <memset+0x4>

08004364 <__libc_init_array>:
 8004364:	b570      	push	{r4, r5, r6, lr}
 8004366:	4d0d      	ldr	r5, [pc, #52]	; (800439c <__libc_init_array+0x38>)
 8004368:	4c0d      	ldr	r4, [pc, #52]	; (80043a0 <__libc_init_array+0x3c>)
 800436a:	1b64      	subs	r4, r4, r5
 800436c:	10a4      	asrs	r4, r4, #2
 800436e:	2600      	movs	r6, #0
 8004370:	42a6      	cmp	r6, r4
 8004372:	d109      	bne.n	8004388 <__libc_init_array+0x24>
 8004374:	4d0b      	ldr	r5, [pc, #44]	; (80043a4 <__libc_init_array+0x40>)
 8004376:	4c0c      	ldr	r4, [pc, #48]	; (80043a8 <__libc_init_array+0x44>)
 8004378:	f000 f818 	bl	80043ac <_init>
 800437c:	1b64      	subs	r4, r4, r5
 800437e:	10a4      	asrs	r4, r4, #2
 8004380:	2600      	movs	r6, #0
 8004382:	42a6      	cmp	r6, r4
 8004384:	d105      	bne.n	8004392 <__libc_init_array+0x2e>
 8004386:	bd70      	pop	{r4, r5, r6, pc}
 8004388:	f855 3b04 	ldr.w	r3, [r5], #4
 800438c:	4798      	blx	r3
 800438e:	3601      	adds	r6, #1
 8004390:	e7ee      	b.n	8004370 <__libc_init_array+0xc>
 8004392:	f855 3b04 	ldr.w	r3, [r5], #4
 8004396:	4798      	blx	r3
 8004398:	3601      	adds	r6, #1
 800439a:	e7f2      	b.n	8004382 <__libc_init_array+0x1e>
 800439c:	080043e4 	.word	0x080043e4
 80043a0:	080043e4 	.word	0x080043e4
 80043a4:	080043e4 	.word	0x080043e4
 80043a8:	080043e8 	.word	0x080043e8

080043ac <_init>:
 80043ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ae:	bf00      	nop
 80043b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043b2:	bc08      	pop	{r3}
 80043b4:	469e      	mov	lr, r3
 80043b6:	4770      	bx	lr

080043b8 <_fini>:
 80043b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ba:	bf00      	nop
 80043bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043be:	bc08      	pop	{r3}
 80043c0:	469e      	mov	lr, r3
 80043c2:	4770      	bx	lr
