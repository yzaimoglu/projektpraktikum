
test_ldr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ed0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005080  08005080  00015080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050f8  080050f8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080050f8  080050f8  000150f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005100  08005100  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005100  08005100  00015100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005104  08005104  00015104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000934  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000990  20000990  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000fc96  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002139  00000000  00000000  0002fd65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c78  00000000  00000000  00031ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000099e  00000000  00000000  00032b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000259a2  00000000  00000000  000334b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f046  00000000  00000000  00058e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e6b5a  00000000  00000000  00067e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003b04  00000000  00000000  0014e9f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  001524fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005068 	.word	0x08005068

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08005068 	.word	0x08005068

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295
 8000af0:	f000 b970 	b.w	8000dd4 <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9e08      	ldr	r6, [sp, #32]
 8000b12:	460d      	mov	r5, r1
 8000b14:	4604      	mov	r4, r0
 8000b16:	460f      	mov	r7, r1
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d14a      	bne.n	8000bb2 <__udivmoddi4+0xa6>
 8000b1c:	428a      	cmp	r2, r1
 8000b1e:	4694      	mov	ip, r2
 8000b20:	d965      	bls.n	8000bee <__udivmoddi4+0xe2>
 8000b22:	fab2 f382 	clz	r3, r2
 8000b26:	b143      	cbz	r3, 8000b3a <__udivmoddi4+0x2e>
 8000b28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b2c:	f1c3 0220 	rsb	r2, r3, #32
 8000b30:	409f      	lsls	r7, r3
 8000b32:	fa20 f202 	lsr.w	r2, r0, r2
 8000b36:	4317      	orrs	r7, r2
 8000b38:	409c      	lsls	r4, r3
 8000b3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b3e:	fa1f f58c 	uxth.w	r5, ip
 8000b42:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b46:	0c22      	lsrs	r2, r4, #16
 8000b48:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b4c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b50:	fb01 f005 	mul.w	r0, r1, r5
 8000b54:	4290      	cmp	r0, r2
 8000b56:	d90a      	bls.n	8000b6e <__udivmoddi4+0x62>
 8000b58:	eb1c 0202 	adds.w	r2, ip, r2
 8000b5c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b60:	f080 811c 	bcs.w	8000d9c <__udivmoddi4+0x290>
 8000b64:	4290      	cmp	r0, r2
 8000b66:	f240 8119 	bls.w	8000d9c <__udivmoddi4+0x290>
 8000b6a:	3902      	subs	r1, #2
 8000b6c:	4462      	add	r2, ip
 8000b6e:	1a12      	subs	r2, r2, r0
 8000b70:	b2a4      	uxth	r4, r4
 8000b72:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b76:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b7a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b7e:	fb00 f505 	mul.w	r5, r0, r5
 8000b82:	42a5      	cmp	r5, r4
 8000b84:	d90a      	bls.n	8000b9c <__udivmoddi4+0x90>
 8000b86:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b8e:	f080 8107 	bcs.w	8000da0 <__udivmoddi4+0x294>
 8000b92:	42a5      	cmp	r5, r4
 8000b94:	f240 8104 	bls.w	8000da0 <__udivmoddi4+0x294>
 8000b98:	4464      	add	r4, ip
 8000b9a:	3802      	subs	r0, #2
 8000b9c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ba0:	1b64      	subs	r4, r4, r5
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	b11e      	cbz	r6, 8000bae <__udivmoddi4+0xa2>
 8000ba6:	40dc      	lsrs	r4, r3
 8000ba8:	2300      	movs	r3, #0
 8000baa:	e9c6 4300 	strd	r4, r3, [r6]
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0xbc>
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	f000 80ed 	beq.w	8000d96 <__udivmoddi4+0x28a>
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	e9c6 0500 	strd	r0, r5, [r6]
 8000bc2:	4608      	mov	r0, r1
 8000bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc8:	fab3 f183 	clz	r1, r3
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	d149      	bne.n	8000c64 <__udivmoddi4+0x158>
 8000bd0:	42ab      	cmp	r3, r5
 8000bd2:	d302      	bcc.n	8000bda <__udivmoddi4+0xce>
 8000bd4:	4282      	cmp	r2, r0
 8000bd6:	f200 80f8 	bhi.w	8000dca <__udivmoddi4+0x2be>
 8000bda:	1a84      	subs	r4, r0, r2
 8000bdc:	eb65 0203 	sbc.w	r2, r5, r3
 8000be0:	2001      	movs	r0, #1
 8000be2:	4617      	mov	r7, r2
 8000be4:	2e00      	cmp	r6, #0
 8000be6:	d0e2      	beq.n	8000bae <__udivmoddi4+0xa2>
 8000be8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bec:	e7df      	b.n	8000bae <__udivmoddi4+0xa2>
 8000bee:	b902      	cbnz	r2, 8000bf2 <__udivmoddi4+0xe6>
 8000bf0:	deff      	udf	#255	; 0xff
 8000bf2:	fab2 f382 	clz	r3, r2
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f040 8090 	bne.w	8000d1c <__udivmoddi4+0x210>
 8000bfc:	1a8a      	subs	r2, r1, r2
 8000bfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c02:	fa1f fe8c 	uxth.w	lr, ip
 8000c06:	2101      	movs	r1, #1
 8000c08:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c0c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c10:	0c22      	lsrs	r2, r4, #16
 8000c12:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c16:	fb0e f005 	mul.w	r0, lr, r5
 8000c1a:	4290      	cmp	r0, r2
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0x124>
 8000c1e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c22:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c26:	d202      	bcs.n	8000c2e <__udivmoddi4+0x122>
 8000c28:	4290      	cmp	r0, r2
 8000c2a:	f200 80cb 	bhi.w	8000dc4 <__udivmoddi4+0x2b8>
 8000c2e:	4645      	mov	r5, r8
 8000c30:	1a12      	subs	r2, r2, r0
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c38:	fb07 2210 	mls	r2, r7, r0, r2
 8000c3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c40:	fb0e fe00 	mul.w	lr, lr, r0
 8000c44:	45a6      	cmp	lr, r4
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x14e>
 8000c48:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c50:	d202      	bcs.n	8000c58 <__udivmoddi4+0x14c>
 8000c52:	45a6      	cmp	lr, r4
 8000c54:	f200 80bb 	bhi.w	8000dce <__udivmoddi4+0x2c2>
 8000c58:	4610      	mov	r0, r2
 8000c5a:	eba4 040e 	sub.w	r4, r4, lr
 8000c5e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c62:	e79f      	b.n	8000ba4 <__udivmoddi4+0x98>
 8000c64:	f1c1 0720 	rsb	r7, r1, #32
 8000c68:	408b      	lsls	r3, r1
 8000c6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c72:	fa05 f401 	lsl.w	r4, r5, r1
 8000c76:	fa20 f307 	lsr.w	r3, r0, r7
 8000c7a:	40fd      	lsrs	r5, r7
 8000c7c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c80:	4323      	orrs	r3, r4
 8000c82:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c86:	fa1f fe8c 	uxth.w	lr, ip
 8000c8a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c8e:	0c1c      	lsrs	r4, r3, #16
 8000c90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c94:	fb08 f50e 	mul.w	r5, r8, lr
 8000c98:	42a5      	cmp	r5, r4
 8000c9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c9e:	fa00 f001 	lsl.w	r0, r0, r1
 8000ca2:	d90b      	bls.n	8000cbc <__udivmoddi4+0x1b0>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cac:	f080 8088 	bcs.w	8000dc0 <__udivmoddi4+0x2b4>
 8000cb0:	42a5      	cmp	r5, r4
 8000cb2:	f240 8085 	bls.w	8000dc0 <__udivmoddi4+0x2b4>
 8000cb6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cba:	4464      	add	r4, ip
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	b29d      	uxth	r5, r3
 8000cc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cc8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ccc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cd0:	45a6      	cmp	lr, r4
 8000cd2:	d908      	bls.n	8000ce6 <__udivmoddi4+0x1da>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cdc:	d26c      	bcs.n	8000db8 <__udivmoddi4+0x2ac>
 8000cde:	45a6      	cmp	lr, r4
 8000ce0:	d96a      	bls.n	8000db8 <__udivmoddi4+0x2ac>
 8000ce2:	3b02      	subs	r3, #2
 8000ce4:	4464      	add	r4, ip
 8000ce6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cea:	fba3 9502 	umull	r9, r5, r3, r2
 8000cee:	eba4 040e 	sub.w	r4, r4, lr
 8000cf2:	42ac      	cmp	r4, r5
 8000cf4:	46c8      	mov	r8, r9
 8000cf6:	46ae      	mov	lr, r5
 8000cf8:	d356      	bcc.n	8000da8 <__udivmoddi4+0x29c>
 8000cfa:	d053      	beq.n	8000da4 <__udivmoddi4+0x298>
 8000cfc:	b156      	cbz	r6, 8000d14 <__udivmoddi4+0x208>
 8000cfe:	ebb0 0208 	subs.w	r2, r0, r8
 8000d02:	eb64 040e 	sbc.w	r4, r4, lr
 8000d06:	fa04 f707 	lsl.w	r7, r4, r7
 8000d0a:	40ca      	lsrs	r2, r1
 8000d0c:	40cc      	lsrs	r4, r1
 8000d0e:	4317      	orrs	r7, r2
 8000d10:	e9c6 7400 	strd	r7, r4, [r6]
 8000d14:	4618      	mov	r0, r3
 8000d16:	2100      	movs	r1, #0
 8000d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1c:	f1c3 0120 	rsb	r1, r3, #32
 8000d20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d24:	fa20 f201 	lsr.w	r2, r0, r1
 8000d28:	fa25 f101 	lsr.w	r1, r5, r1
 8000d2c:	409d      	lsls	r5, r3
 8000d2e:	432a      	orrs	r2, r5
 8000d30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d34:	fa1f fe8c 	uxth.w	lr, ip
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d40:	0c11      	lsrs	r1, r2, #16
 8000d42:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d46:	fb00 f50e 	mul.w	r5, r0, lr
 8000d4a:	428d      	cmp	r5, r1
 8000d4c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x258>
 8000d52:	eb1c 0101 	adds.w	r1, ip, r1
 8000d56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d5a:	d22f      	bcs.n	8000dbc <__udivmoddi4+0x2b0>
 8000d5c:	428d      	cmp	r5, r1
 8000d5e:	d92d      	bls.n	8000dbc <__udivmoddi4+0x2b0>
 8000d60:	3802      	subs	r0, #2
 8000d62:	4461      	add	r1, ip
 8000d64:	1b49      	subs	r1, r1, r5
 8000d66:	b292      	uxth	r2, r2
 8000d68:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d6c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d74:	fb05 f10e 	mul.w	r1, r5, lr
 8000d78:	4291      	cmp	r1, r2
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x282>
 8000d7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d80:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d84:	d216      	bcs.n	8000db4 <__udivmoddi4+0x2a8>
 8000d86:	4291      	cmp	r1, r2
 8000d88:	d914      	bls.n	8000db4 <__udivmoddi4+0x2a8>
 8000d8a:	3d02      	subs	r5, #2
 8000d8c:	4462      	add	r2, ip
 8000d8e:	1a52      	subs	r2, r2, r1
 8000d90:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d94:	e738      	b.n	8000c08 <__udivmoddi4+0xfc>
 8000d96:	4631      	mov	r1, r6
 8000d98:	4630      	mov	r0, r6
 8000d9a:	e708      	b.n	8000bae <__udivmoddi4+0xa2>
 8000d9c:	4639      	mov	r1, r7
 8000d9e:	e6e6      	b.n	8000b6e <__udivmoddi4+0x62>
 8000da0:	4610      	mov	r0, r2
 8000da2:	e6fb      	b.n	8000b9c <__udivmoddi4+0x90>
 8000da4:	4548      	cmp	r0, r9
 8000da6:	d2a9      	bcs.n	8000cfc <__udivmoddi4+0x1f0>
 8000da8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dac:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000db0:	3b01      	subs	r3, #1
 8000db2:	e7a3      	b.n	8000cfc <__udivmoddi4+0x1f0>
 8000db4:	4645      	mov	r5, r8
 8000db6:	e7ea      	b.n	8000d8e <__udivmoddi4+0x282>
 8000db8:	462b      	mov	r3, r5
 8000dba:	e794      	b.n	8000ce6 <__udivmoddi4+0x1da>
 8000dbc:	4640      	mov	r0, r8
 8000dbe:	e7d1      	b.n	8000d64 <__udivmoddi4+0x258>
 8000dc0:	46d0      	mov	r8, sl
 8000dc2:	e77b      	b.n	8000cbc <__udivmoddi4+0x1b0>
 8000dc4:	3d02      	subs	r5, #2
 8000dc6:	4462      	add	r2, ip
 8000dc8:	e732      	b.n	8000c30 <__udivmoddi4+0x124>
 8000dca:	4608      	mov	r0, r1
 8000dcc:	e70a      	b.n	8000be4 <__udivmoddi4+0xd8>
 8000dce:	4464      	add	r4, ip
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	e742      	b.n	8000c5a <__udivmoddi4+0x14e>

08000dd4 <__aeabi_idiv0>:
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop

08000dd8 <ldr_init>:
#include "ldr.h"
#include <stdio.h>
#include <stdint.h>
#include <string.h>

void ldr_init(ADC_HandleTypeDef type) {
 8000dd8:	b084      	sub	sp, #16
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	f107 0c08 	add.w	ip, r7, #8
 8000de2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_ADC_Start(&type);
 8000de6:	f107 0008 	add.w	r0, r7, #8
 8000dea:	f000 fe81 	bl	8001af0 <HAL_ADC_Start>
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000df6:	b004      	add	sp, #16
 8000df8:	4770      	bx	lr

08000dfa <ldr_stop>:
void ldr_stop(ADC_HandleTypeDef type) {
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	f107 0c08 	add.w	ip, r7, #8
 8000e04:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_ADC_Stop(&type);
 8000e08:	f107 0008 	add.w	r0, r7, #8
 8000e0c:	f000 ff42 	bl	8001c94 <HAL_ADC_Stop>
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <ldr_get_value>:

uint32_t ldr_get_value(ADC_HandleTypeDef type, uint32_t delay_ms) {
 8000e1c:	b084      	sub	sp, #16
 8000e1e:	b5b0      	push	{r4, r5, r7, lr}
 8000e20:	b090      	sub	sp, #64	; 0x40
 8000e22:	af0e      	add	r7, sp, #56	; 0x38
 8000e24:	f107 0418 	add.w	r4, r7, #24
 8000e28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t aValue;
	ldr_init(type);
 8000e2c:	466d      	mov	r5, sp
 8000e2e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000e32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e42:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e46:	f107 0318 	add.w	r3, r7, #24
 8000e4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e4c:	f7ff ffc4 	bl	8000dd8 <ldr_init>
	if (HAL_ADC_PollForConversion(&type, 1000) == HAL_OK) {
 8000e50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e54:	f107 0018 	add.w	r0, r7, #24
 8000e58:	f000 ff4f 	bl	8001cfa <HAL_ADC_PollForConversion>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d11b      	bne.n	8000e9a <ldr_get_value+0x7e>
		aValue = HAL_ADC_GetValue(&type);
 8000e62:	f107 0018 	add.w	r0, r7, #24
 8000e66:	f000 ffd3 	bl	8001e10 <HAL_ADC_GetValue>
 8000e6a:	6078      	str	r0, [r7, #4]
	} else {
		return ERROR_NUM;
	}
	ldr_stop(type);
 8000e6c:	466d      	mov	r5, sp
 8000e6e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000e72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e82:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e86:	f107 0318 	add.w	r3, r7, #24
 8000e8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e8c:	f7ff ffb5 	bl	8000dfa <ldr_stop>
	HAL_Delay(delay_ms);
 8000e90:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000e92:	f000 fdc5 	bl	8001a20 <HAL_Delay>
	return aValue;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	e001      	b.n	8000e9e <ldr_get_value+0x82>
		return ERROR_NUM;
 8000e9a:	f241 3388 	movw	r3, #5000	; 0x1388
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000ea8:	b004      	add	sp, #16
 8000eaa:	4770      	bx	lr
 8000eac:	0000      	movs	r0, r0
	...

08000eb0 <ldr_get_percent>:

uint8_t ldr_get_percent(ADC_HandleTypeDef type, uint32_t delay_ms) {
 8000eb0:	b084      	sub	sp, #16
 8000eb2:	b5b0      	push	{r4, r5, r7, lr}
 8000eb4:	b094      	sub	sp, #80	; 0x50
 8000eb6:	af10      	add	r7, sp, #64	; 0x40
 8000eb8:	f107 0420 	add.w	r4, r7, #32
 8000ebc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// 12bit
	// 0 = 100%
	// 4095 = 0%
	uint32_t aValue = ldr_get_value(type, delay_ms);
 8000ec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ec2:	930e      	str	r3, [sp, #56]	; 0x38
 8000ec4:	466d      	mov	r5, sp
 8000ec6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000eca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ecc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ece:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ed0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ed4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ed6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000eda:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ede:	f107 0320 	add.w	r3, r7, #32
 8000ee2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ee4:	f7ff ff9a 	bl	8000e1c <ldr_get_value>
 8000ee8:	60f8      	str	r0, [r7, #12]
	if(aValue == ERROR_NUM) {
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d101      	bne.n	8000ef8 <ldr_get_percent+0x48>
		return ERROR_PERC;
 8000ef4:	2365      	movs	r3, #101	; 0x65
 8000ef6:	e01e      	b.n	8000f36 <ldr_get_percent+0x86>
	}
	uint8_t reverse_perc = ((float) (aValue / 4095.0)) * 100;
 8000ef8:	68f8      	ldr	r0, [r7, #12]
 8000efa:	f7ff fb13 	bl	8000524 <__aeabi_ui2d>
 8000efe:	a313      	add	r3, pc, #76	; (adr r3, 8000f4c <ldr_get_percent+0x9c>)
 8000f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f04:	f7ff fcb2 	bl	800086c <__aeabi_ddiv>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f7ff fd94 	bl	8000a3c <__aeabi_d2f>
 8000f14:	ee07 0a10 	vmov	s14, r0
 8000f18:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8000f48 <ldr_get_percent+0x98>
 8000f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f24:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f28:	793b      	ldrb	r3, [r7, #4]
 8000f2a:	72fb      	strb	r3, [r7, #11]
	uint8_t perc = 100 - reverse_perc;
 8000f2c:	7afb      	ldrb	r3, [r7, #11]
 8000f2e:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000f32:	72bb      	strb	r3, [r7, #10]
	return perc;
 8000f34:	7abb      	ldrb	r3, [r7, #10]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000f40:	b004      	add	sp, #16
 8000f42:	4770      	bx	lr
 8000f44:	f3af 8000 	nop.w
 8000f48:	42c80000 	.word	0x42c80000
 8000f4c:	00000000 	.word	0x00000000
 8000f50:	40affe00 	.word	0x40affe00

08000f54 <ldr_uart_transmit_perc>:
	uint32_t value = ldr_get_value(type, 1000);
	sprintf(buf, "ADC Value: %lu\r\n", value);
	HAL_UART_Transmit(&uart_type, (uint8_t*)buf, strlen(buf), 1000);
}

void ldr_uart_transmit_perc(ADC_HandleTypeDef type, UART_HandleTypeDef uart_type) {
 8000f54:	b084      	sub	sp, #16
 8000f56:	b5b0      	push	{r4, r5, r7, lr}
 8000f58:	b09e      	sub	sp, #120	; 0x78
 8000f5a:	af10      	add	r7, sp, #64	; 0x40
 8000f5c:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000f60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char buf[50];
	uint8_t value = ldr_get_percent(type, 1000);
 8000f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f68:	930e      	str	r3, [sp, #56]	; 0x38
 8000f6a:	466d      	mov	r5, sp
 8000f6c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000f70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f80:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f8a:	f7ff ff91 	bl	8000eb0 <ldr_get_percent>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	sprintf(buf, "Percent Value: %lu\r\n", value);
 8000f94:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	490c      	ldr	r1, [pc, #48]	; (8000fcc <ldr_uart_transmit_perc+0x78>)
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f003 fbbf 	bl	8004720 <siprintf>
	HAL_UART_Transmit(&uart_type, (uint8_t*)buf, strlen(buf), 1000);
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff f923 	bl	80001f0 <strlen>
 8000faa:	4603      	mov	r3, r0
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	1d39      	adds	r1, r7, #4
 8000fb0:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8000fb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb8:	f002 fd3b 	bl	8003a32 <HAL_UART_Transmit>
}
 8000fbc:	bf00      	nop
 8000fbe:	3738      	adds	r7, #56	; 0x38
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000fc6:	b004      	add	sp, #16
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	08005094 	.word	0x08005094

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd2:	b0af      	sub	sp, #188	; 0xbc
 8000fd4:	af20      	add	r7, sp, #128	; 0x80
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd6:	f000 fcb1 	bl	800193c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fda:	f000 f829 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fde:	f000 f989 	bl	80012f4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000fe2:	f000 f8e1 	bl	80011a8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000fe6:	f000 f92d 	bl	8001244 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fea:	f000 f955 	bl	8001298 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000fee:	f000 f889 	bl	8001104 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	ldr_uart_transmit_perc(hadc1, huart3);
 8000ff2:	4e0d      	ldr	r6, [pc, #52]	; (8001028 <main+0x58>)
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	; (800102c <main+0x5c>)
 8000ff6:	ab0e      	add	r3, sp, #56	; 0x38
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	2244      	movs	r2, #68	; 0x44
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f003 fbe3 	bl	80047c8 <memcpy>
 8001002:	466d      	mov	r5, sp
 8001004:	f106 0410 	add.w	r4, r6, #16
 8001008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800100a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800100c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800100e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001010:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001014:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001018:	e885 0003 	stmia.w	r5, {r0, r1}
 800101c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001020:	f7ff ff98 	bl	8000f54 <ldr_uart_transmit_perc>
 8001024:	e7e5      	b.n	8000ff2 <main+0x22>
 8001026:	bf00      	nop
 8001028:	200001f0 	.word	0x200001f0
 800102c:	200002e8 	.word	0x200002e8

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b094      	sub	sp, #80	; 0x50
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 0320 	add.w	r3, r7, #32
 800103a:	2230      	movs	r2, #48	; 0x30
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f003 fb8e 	bl	8004760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	4b28      	ldr	r3, [pc, #160]	; (80010fc <SystemClock_Config+0xcc>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	4a27      	ldr	r2, [pc, #156]	; (80010fc <SystemClock_Config+0xcc>)
 800105e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001062:	6413      	str	r3, [r2, #64]	; 0x40
 8001064:	4b25      	ldr	r3, [pc, #148]	; (80010fc <SystemClock_Config+0xcc>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001070:	2300      	movs	r3, #0
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	4b22      	ldr	r3, [pc, #136]	; (8001100 <SystemClock_Config+0xd0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a21      	ldr	r2, [pc, #132]	; (8001100 <SystemClock_Config+0xd0>)
 800107a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <SystemClock_Config+0xd0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800108c:	2301      	movs	r3, #1
 800108e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001090:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001096:	2302      	movs	r3, #2
 8001098:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800109a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800109e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010a0:	2304      	movs	r3, #4
 80010a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010a4:	23a8      	movs	r3, #168	; 0xa8
 80010a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010a8:	2302      	movs	r3, #2
 80010aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010ac:	2307      	movs	r3, #7
 80010ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b0:	f107 0320 	add.w	r3, r7, #32
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 ffd7 	bl	8003068 <HAL_RCC_OscConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010c0:	f000 f9c6 	bl	8001450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c4:	230f      	movs	r3, #15
 80010c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c8:	2302      	movs	r3, #2
 80010ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2105      	movs	r1, #5
 80010e2:	4618      	mov	r0, r3
 80010e4:	f002 fa38 	bl	8003558 <HAL_RCC_ClockConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010ee:	f000 f9af 	bl	8001450 <Error_Handler>
  }
}
 80010f2:	bf00      	nop
 80010f4:	3750      	adds	r7, #80	; 0x50
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	40007000 	.word	0x40007000

08001104 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800110a:	463b      	mov	r3, r7
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <MX_ADC1_Init+0x98>)
 8001118:	4a21      	ldr	r2, [pc, #132]	; (80011a0 <MX_ADC1_Init+0x9c>)
 800111a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800111c:	4b1f      	ldr	r3, [pc, #124]	; (800119c <MX_ADC1_Init+0x98>)
 800111e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001122:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001124:	4b1d      	ldr	r3, [pc, #116]	; (800119c <MX_ADC1_Init+0x98>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <MX_ADC1_Init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <MX_ADC1_Init+0x98>)
 8001132:	2200      	movs	r2, #0
 8001134:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <MX_ADC1_Init+0x98>)
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <MX_ADC1_Init+0x98>)
 8001140:	2200      	movs	r2, #0
 8001142:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <MX_ADC1_Init+0x98>)
 8001146:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <MX_ADC1_Init+0xa0>)
 8001148:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <MX_ADC1_Init+0x98>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <MX_ADC1_Init+0x98>)
 8001152:	2201      	movs	r2, #1
 8001154:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_ADC1_Init+0x98>)
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800115e:	4b0f      	ldr	r3, [pc, #60]	; (800119c <MX_ADC1_Init+0x98>)
 8001160:	2201      	movs	r2, #1
 8001162:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001164:	480d      	ldr	r0, [pc, #52]	; (800119c <MX_ADC1_Init+0x98>)
 8001166:	f000 fc7f 	bl	8001a68 <HAL_ADC_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001170:	f000 f96e 	bl	8001450 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001174:	2303      	movs	r3, #3
 8001176:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001180:	463b      	mov	r3, r7
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	; (800119c <MX_ADC1_Init+0x98>)
 8001186:	f000 fe51 	bl	8001e2c <HAL_ADC_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001190:	f000 f95e 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200001f0 	.word	0x200001f0
 80011a0:	40012000 	.word	0x40012000
 80011a4:	0f000001 	.word	0x0f000001

080011a8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80011ac:	4b1f      	ldr	r3, [pc, #124]	; (800122c <MX_ETH_Init+0x84>)
 80011ae:	4a20      	ldr	r2, [pc, #128]	; (8001230 <MX_ETH_Init+0x88>)
 80011b0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80011b2:	4b20      	ldr	r3, [pc, #128]	; (8001234 <MX_ETH_Init+0x8c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80011b8:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <MX_ETH_Init+0x8c>)
 80011ba:	2280      	movs	r2, #128	; 0x80
 80011bc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80011be:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <MX_ETH_Init+0x8c>)
 80011c0:	22e1      	movs	r2, #225	; 0xe1
 80011c2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <MX_ETH_Init+0x8c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80011ca:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <MX_ETH_Init+0x8c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <MX_ETH_Init+0x8c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <MX_ETH_Init+0x84>)
 80011d8:	4a16      	ldr	r2, [pc, #88]	; (8001234 <MX_ETH_Init+0x8c>)
 80011da:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80011dc:	4b13      	ldr	r3, [pc, #76]	; (800122c <MX_ETH_Init+0x84>)
 80011de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80011e2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_ETH_Init+0x84>)
 80011e6:	4a14      	ldr	r2, [pc, #80]	; (8001238 <MX_ETH_Init+0x90>)
 80011e8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <MX_ETH_Init+0x84>)
 80011ec:	4a13      	ldr	r2, [pc, #76]	; (800123c <MX_ETH_Init+0x94>)
 80011ee:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_ETH_Init+0x84>)
 80011f2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80011f6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80011f8:	480c      	ldr	r0, [pc, #48]	; (800122c <MX_ETH_Init+0x84>)
 80011fa:	f001 f92b 	bl	8002454 <HAL_ETH_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001204:	f000 f924 	bl	8001450 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001208:	2238      	movs	r2, #56	; 0x38
 800120a:	2100      	movs	r1, #0
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <MX_ETH_Init+0x98>)
 800120e:	f003 faa7 	bl	8004760 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <MX_ETH_Init+0x98>)
 8001214:	2221      	movs	r2, #33	; 0x21
 8001216:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_ETH_Init+0x98>)
 800121a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800121e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <MX_ETH_Init+0x98>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000238 	.word	0x20000238
 8001230:	40028000 	.word	0x40028000
 8001234:	20000838 	.word	0x20000838
 8001238:	20000150 	.word	0x20000150
 800123c:	200000b0 	.word	0x200000b0
 8001240:	20000078 	.word	0x20000078

08001244 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <MX_USART3_UART_Init+0x50>)
 800124c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 8001250:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001254:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 800126a:	220c      	movs	r2, #12
 800126c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_USART3_UART_Init+0x4c>)
 800127c:	f002 fb8c 	bl	8003998 <HAL_UART_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001286:	f000 f8e3 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200002e8 	.word	0x200002e8
 8001294:	40004800 	.word	0x40004800

08001298 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800129e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012a6:	2204      	movs	r2, #4
 80012a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ac:	2202      	movs	r2, #2
 80012ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012b8:	2202      	movs	r2, #2
 80012ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012be:	2201      	movs	r2, #1
 80012c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012dc:	f001 fda7 	bl	8002e2e <HAL_PCD_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80012e6:	f000 f8b3 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2000032c 	.word	0x2000032c

080012f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08c      	sub	sp, #48	; 0x30
 80012f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fa:	f107 031c 	add.w	r3, r7, #28
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
 800130e:	4b4c      	ldr	r3, [pc, #304]	; (8001440 <MX_GPIO_Init+0x14c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a4b      	ldr	r2, [pc, #300]	; (8001440 <MX_GPIO_Init+0x14c>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b49      	ldr	r3, [pc, #292]	; (8001440 <MX_GPIO_Init+0x14c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	61bb      	str	r3, [r7, #24]
 8001324:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	4b45      	ldr	r3, [pc, #276]	; (8001440 <MX_GPIO_Init+0x14c>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a44      	ldr	r2, [pc, #272]	; (8001440 <MX_GPIO_Init+0x14c>)
 8001330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b42      	ldr	r3, [pc, #264]	; (8001440 <MX_GPIO_Init+0x14c>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	4b3e      	ldr	r3, [pc, #248]	; (8001440 <MX_GPIO_Init+0x14c>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a3d      	ldr	r2, [pc, #244]	; (8001440 <MX_GPIO_Init+0x14c>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b3b      	ldr	r3, [pc, #236]	; (8001440 <MX_GPIO_Init+0x14c>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b37      	ldr	r3, [pc, #220]	; (8001440 <MX_GPIO_Init+0x14c>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a36      	ldr	r2, [pc, #216]	; (8001440 <MX_GPIO_Init+0x14c>)
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b34      	ldr	r3, [pc, #208]	; (8001440 <MX_GPIO_Init+0x14c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	4b30      	ldr	r3, [pc, #192]	; (8001440 <MX_GPIO_Init+0x14c>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a2f      	ldr	r2, [pc, #188]	; (8001440 <MX_GPIO_Init+0x14c>)
 8001384:	f043 0308 	orr.w	r3, r3, #8
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b2d      	ldr	r3, [pc, #180]	; (8001440 <MX_GPIO_Init+0x14c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	4b29      	ldr	r3, [pc, #164]	; (8001440 <MX_GPIO_Init+0x14c>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a28      	ldr	r2, [pc, #160]	; (8001440 <MX_GPIO_Init+0x14c>)
 80013a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b26      	ldr	r3, [pc, #152]	; (8001440 <MX_GPIO_Init+0x14c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f244 0181 	movw	r1, #16513	; 0x4081
 80013b8:	4822      	ldr	r0, [pc, #136]	; (8001444 <MX_GPIO_Init+0x150>)
 80013ba:	f001 fd1f 	bl	8002dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	2140      	movs	r1, #64	; 0x40
 80013c2:	4821      	ldr	r0, [pc, #132]	; (8001448 <MX_GPIO_Init+0x154>)
 80013c4:	f001 fd1a 	bl	8002dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80013c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	4619      	mov	r1, r3
 80013de:	481b      	ldr	r0, [pc, #108]	; (800144c <MX_GPIO_Init+0x158>)
 80013e0:	f001 fb60 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80013e4:	f244 0381 	movw	r3, #16513	; 0x4081
 80013e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	4619      	mov	r1, r3
 80013fc:	4811      	ldr	r0, [pc, #68]	; (8001444 <MX_GPIO_Init+0x150>)
 80013fe:	f001 fb51 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001402:	2340      	movs	r3, #64	; 0x40
 8001404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001406:	2301      	movs	r3, #1
 8001408:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	4619      	mov	r1, r3
 8001418:	480b      	ldr	r0, [pc, #44]	; (8001448 <MX_GPIO_Init+0x154>)
 800141a:	f001 fb43 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	4619      	mov	r1, r3
 8001430:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_GPIO_Init+0x154>)
 8001432:	f001 fb37 	bl	8002aa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001436:	bf00      	nop
 8001438:	3730      	adds	r7, #48	; 0x30
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800
 8001444:	40020400 	.word	0x40020400
 8001448:	40021800 	.word	0x40021800
 800144c:	40020800 	.word	0x40020800

08001450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i
}
 8001456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001458:	e7fe      	b.n	8001458 <Error_Handler+0x8>
	...

0800145c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <HAL_MspInit+0x4c>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	4a0f      	ldr	r2, [pc, #60]	; (80014a8 <HAL_MspInit+0x4c>)
 800146c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001470:	6453      	str	r3, [r2, #68]	; 0x44
 8001472:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <HAL_MspInit+0x4c>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <HAL_MspInit+0x4c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <HAL_MspInit+0x4c>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_MspInit+0x4c>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800

080014ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a17      	ldr	r2, [pc, #92]	; (8001528 <HAL_ADC_MspInit+0x7c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d127      	bne.n	800151e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b16      	ldr	r3, [pc, #88]	; (800152c <HAL_ADC_MspInit+0x80>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	4a15      	ldr	r2, [pc, #84]	; (800152c <HAL_ADC_MspInit+0x80>)
 80014d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014dc:	6453      	str	r3, [r2, #68]	; 0x44
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <HAL_ADC_MspInit+0x80>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <HAL_ADC_MspInit+0x80>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a0e      	ldr	r2, [pc, #56]	; (800152c <HAL_ADC_MspInit+0x80>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <HAL_ADC_MspInit+0x80>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001506:	2308      	movs	r3, #8
 8001508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800150a:	2303      	movs	r3, #3
 800150c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <HAL_ADC_MspInit+0x84>)
 800151a:	f001 fac3 	bl	8002aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800151e:	bf00      	nop
 8001520:	3728      	adds	r7, #40	; 0x28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40012000 	.word	0x40012000
 800152c:	40023800 	.word	0x40023800
 8001530:	40020000 	.word	0x40020000

08001534 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08e      	sub	sp, #56	; 0x38
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a55      	ldr	r2, [pc, #340]	; (80016a8 <HAL_ETH_MspInit+0x174>)
 8001552:	4293      	cmp	r3, r2
 8001554:	f040 80a4 	bne.w	80016a0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
 800155c:	4b53      	ldr	r3, [pc, #332]	; (80016ac <HAL_ETH_MspInit+0x178>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	4a52      	ldr	r2, [pc, #328]	; (80016ac <HAL_ETH_MspInit+0x178>)
 8001562:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001566:	6313      	str	r3, [r2, #48]	; 0x30
 8001568:	4b50      	ldr	r3, [pc, #320]	; (80016ac <HAL_ETH_MspInit+0x178>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001570:	623b      	str	r3, [r7, #32]
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
 8001578:	4b4c      	ldr	r3, [pc, #304]	; (80016ac <HAL_ETH_MspInit+0x178>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	4a4b      	ldr	r2, [pc, #300]	; (80016ac <HAL_ETH_MspInit+0x178>)
 800157e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001582:	6313      	str	r3, [r2, #48]	; 0x30
 8001584:	4b49      	ldr	r3, [pc, #292]	; (80016ac <HAL_ETH_MspInit+0x178>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	2300      	movs	r3, #0
 8001592:	61bb      	str	r3, [r7, #24]
 8001594:	4b45      	ldr	r3, [pc, #276]	; (80016ac <HAL_ETH_MspInit+0x178>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	4a44      	ldr	r2, [pc, #272]	; (80016ac <HAL_ETH_MspInit+0x178>)
 800159a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800159e:	6313      	str	r3, [r2, #48]	; 0x30
 80015a0:	4b42      	ldr	r3, [pc, #264]	; (80016ac <HAL_ETH_MspInit+0x178>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80015a8:	61bb      	str	r3, [r7, #24]
 80015aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	4b3e      	ldr	r3, [pc, #248]	; (80016ac <HAL_ETH_MspInit+0x178>)
 80015b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b4:	4a3d      	ldr	r2, [pc, #244]	; (80016ac <HAL_ETH_MspInit+0x178>)
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	6313      	str	r3, [r2, #48]	; 0x30
 80015bc:	4b3b      	ldr	r3, [pc, #236]	; (80016ac <HAL_ETH_MspInit+0x178>)
 80015be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	4b37      	ldr	r3, [pc, #220]	; (80016ac <HAL_ETH_MspInit+0x178>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d0:	4a36      	ldr	r2, [pc, #216]	; (80016ac <HAL_ETH_MspInit+0x178>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6313      	str	r3, [r2, #48]	; 0x30
 80015d8:	4b34      	ldr	r3, [pc, #208]	; (80016ac <HAL_ETH_MspInit+0x178>)
 80015da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	4b30      	ldr	r3, [pc, #192]	; (80016ac <HAL_ETH_MspInit+0x178>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ec:	4a2f      	ldr	r2, [pc, #188]	; (80016ac <HAL_ETH_MspInit+0x178>)
 80015ee:	f043 0302 	orr.w	r3, r3, #2
 80015f2:	6313      	str	r3, [r2, #48]	; 0x30
 80015f4:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <HAL_ETH_MspInit+0x178>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	4b29      	ldr	r3, [pc, #164]	; (80016ac <HAL_ETH_MspInit+0x178>)
 8001606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001608:	4a28      	ldr	r2, [pc, #160]	; (80016ac <HAL_ETH_MspInit+0x178>)
 800160a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800160e:	6313      	str	r3, [r2, #48]	; 0x30
 8001610:	4b26      	ldr	r3, [pc, #152]	; (80016ac <HAL_ETH_MspInit+0x178>)
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800161c:	2332      	movs	r3, #50	; 0x32
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800162c:	230b      	movs	r3, #11
 800162e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001634:	4619      	mov	r1, r3
 8001636:	481e      	ldr	r0, [pc, #120]	; (80016b0 <HAL_ETH_MspInit+0x17c>)
 8001638:	f001 fa34 	bl	8002aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800163c:	2386      	movs	r3, #134	; 0x86
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001648:	2303      	movs	r3, #3
 800164a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800164c:	230b      	movs	r3, #11
 800164e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001654:	4619      	mov	r1, r3
 8001656:	4817      	ldr	r0, [pc, #92]	; (80016b4 <HAL_ETH_MspInit+0x180>)
 8001658:	f001 fa24 	bl	8002aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800165c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800166e:	230b      	movs	r3, #11
 8001670:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001676:	4619      	mov	r1, r3
 8001678:	480f      	ldr	r0, [pc, #60]	; (80016b8 <HAL_ETH_MspInit+0x184>)
 800167a:	f001 fa13 	bl	8002aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800167e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001690:	230b      	movs	r3, #11
 8001692:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001698:	4619      	mov	r1, r3
 800169a:	4808      	ldr	r0, [pc, #32]	; (80016bc <HAL_ETH_MspInit+0x188>)
 800169c:	f001 fa02 	bl	8002aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80016a0:	bf00      	nop
 80016a2:	3738      	adds	r7, #56	; 0x38
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40028000 	.word	0x40028000
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020800 	.word	0x40020800
 80016b4:	40020000 	.word	0x40020000
 80016b8:	40020400 	.word	0x40020400
 80016bc:	40021800 	.word	0x40021800

080016c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	; 0x28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a19      	ldr	r2, [pc, #100]	; (8001744 <HAL_UART_MspInit+0x84>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d12c      	bne.n	800173c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	4b18      	ldr	r3, [pc, #96]	; (8001748 <HAL_UART_MspInit+0x88>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	4a17      	ldr	r2, [pc, #92]	; (8001748 <HAL_UART_MspInit+0x88>)
 80016ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f0:	6413      	str	r3, [r2, #64]	; 0x40
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <HAL_UART_MspInit+0x88>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_UART_MspInit+0x88>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a10      	ldr	r2, [pc, #64]	; (8001748 <HAL_UART_MspInit+0x88>)
 8001708:	f043 0308 	orr.w	r3, r3, #8
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <HAL_UART_MspInit+0x88>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800171a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800171e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800172c:	2307      	movs	r3, #7
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <HAL_UART_MspInit+0x8c>)
 8001738:	f001 f9b4 	bl	8002aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800173c:	bf00      	nop
 800173e:	3728      	adds	r7, #40	; 0x28
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40004800 	.word	0x40004800
 8001748:	40023800 	.word	0x40023800
 800174c:	40020c00 	.word	0x40020c00

08001750 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001770:	d13f      	bne.n	80017f2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	4b21      	ldr	r3, [pc, #132]	; (80017fc <HAL_PCD_MspInit+0xac>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a20      	ldr	r2, [pc, #128]	; (80017fc <HAL_PCD_MspInit+0xac>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b1e      	ldr	r3, [pc, #120]	; (80017fc <HAL_PCD_MspInit+0xac>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800178e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179c:	2303      	movs	r3, #3
 800179e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017a0:	230a      	movs	r3, #10
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	4619      	mov	r1, r3
 80017aa:	4815      	ldr	r0, [pc, #84]	; (8001800 <HAL_PCD_MspInit+0xb0>)
 80017ac:	f001 f97a 	bl	8002aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80017b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	480e      	ldr	r0, [pc, #56]	; (8001800 <HAL_PCD_MspInit+0xb0>)
 80017c6:	f001 f96d 	bl	8002aa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017ca:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <HAL_PCD_MspInit+0xac>)
 80017cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ce:	4a0b      	ldr	r2, [pc, #44]	; (80017fc <HAL_PCD_MspInit+0xac>)
 80017d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d4:	6353      	str	r3, [r2, #52]	; 0x34
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <HAL_PCD_MspInit+0xac>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	4a07      	ldr	r2, [pc, #28]	; (80017fc <HAL_PCD_MspInit+0xac>)
 80017e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e4:	6453      	str	r3, [r2, #68]	; 0x44
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_PCD_MspInit+0xac>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80017f2:	bf00      	nop
 80017f4:	3728      	adds	r7, #40	; 0x28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020000 	.word	0x40020000

08001804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <NMI_Handler+0x4>

0800180a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800180e:	e7fe      	b.n	800180e <HardFault_Handler+0x4>

08001810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <MemManage_Handler+0x4>

08001816 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <BusFault_Handler+0x4>

0800181c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <UsageFault_Handler+0x4>

08001822 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001850:	f000 f8c6 	bl	80019e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}

08001858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001860:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <_sbrk+0x5c>)
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <_sbrk+0x60>)
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d102      	bne.n	800187a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <_sbrk+0x64>)
 8001876:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <_sbrk+0x68>)
 8001878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <_sbrk+0x64>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	429a      	cmp	r2, r3
 8001886:	d207      	bcs.n	8001898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001888:	f002 ff72 	bl	8004770 <__errno>
 800188c:	4603      	mov	r3, r0
 800188e:	220c      	movs	r2, #12
 8001890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
 8001896:	e009      	b.n	80018ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <_sbrk+0x64>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	4a05      	ldr	r2, [pc, #20]	; (80018bc <_sbrk+0x64>)
 80018a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20030000 	.word	0x20030000
 80018b8:	00000400 	.word	0x00000400
 80018bc:	20000840 	.word	0x20000840
 80018c0:	20000990 	.word	0x20000990

080018c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <SystemInit+0x20>)
 80018ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ce:	4a05      	ldr	r2, [pc, #20]	; (80018e4 <SystemInit+0x20>)
 80018d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80018e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001920 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018ec:	480d      	ldr	r0, [pc, #52]	; (8001924 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018ee:	490e      	ldr	r1, [pc, #56]	; (8001928 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018f0:	4a0e      	ldr	r2, [pc, #56]	; (800192c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f4:	e002      	b.n	80018fc <LoopCopyDataInit>

080018f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fa:	3304      	adds	r3, #4

080018fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001900:	d3f9      	bcc.n	80018f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001902:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001904:	4c0b      	ldr	r4, [pc, #44]	; (8001934 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001908:	e001      	b.n	800190e <LoopFillZerobss>

0800190a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800190c:	3204      	adds	r2, #4

0800190e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001910:	d3fb      	bcc.n	800190a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001912:	f7ff ffd7 	bl	80018c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001916:	f002 ff31 	bl	800477c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800191a:	f7ff fb59 	bl	8000fd0 <main>
  bx  lr    
 800191e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001920:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001928:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800192c:	08005108 	.word	0x08005108
  ldr r2, =_sbss
 8001930:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001934:	20000990 	.word	0x20000990

08001938 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001938:	e7fe      	b.n	8001938 <ADC_IRQHandler>
	...

0800193c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001940:	4b0e      	ldr	r3, [pc, #56]	; (800197c <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0d      	ldr	r2, [pc, #52]	; (800197c <HAL_Init+0x40>)
 8001946:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800194a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_Init+0x40>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0a      	ldr	r2, [pc, #40]	; (800197c <HAL_Init+0x40>)
 8001952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001956:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_Init+0x40>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a07      	ldr	r2, [pc, #28]	; (800197c <HAL_Init+0x40>)
 800195e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001962:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001964:	2003      	movs	r0, #3
 8001966:	f000 fd41 	bl	80023ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800196a:	2000      	movs	r0, #0
 800196c:	f000 f808 	bl	8001980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001970:	f7ff fd74 	bl	800145c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023c00 	.word	0x40023c00

08001980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_InitTick+0x54>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_InitTick+0x58>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001996:	fbb3 f3f1 	udiv	r3, r3, r1
 800199a:	fbb2 f3f3 	udiv	r3, r2, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 fd4b 	bl	800243a <HAL_SYSTICK_Config>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00e      	b.n	80019cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b0f      	cmp	r3, #15
 80019b2:	d80a      	bhi.n	80019ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b4:	2200      	movs	r2, #0
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	f000 fd21 	bl	8002402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c0:	4a06      	ldr	r2, [pc, #24]	; (80019dc <HAL_InitTick+0x5c>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e000      	b.n	80019cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000008 	.word	0x20000008
 80019dc:	20000004 	.word	0x20000004

080019e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_IncTick+0x20>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_IncTick+0x24>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <HAL_IncTick+0x24>)
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20000008 	.word	0x20000008
 8001a04:	20000844 	.word	0x20000844

08001a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <HAL_GetTick+0x14>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20000844 	.word	0x20000844

08001a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a28:	f7ff ffee 	bl	8001a08 <HAL_GetTick>
 8001a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a38:	d005      	beq.n	8001a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <HAL_Delay+0x44>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a46:	bf00      	nop
 8001a48:	f7ff ffde 	bl	8001a08 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d8f7      	bhi.n	8001a48 <HAL_Delay+0x28>
  {
  }
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000008 	.word	0x20000008

08001a68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e033      	b.n	8001ae6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d109      	bne.n	8001a9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff fd10 	bl	80014ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f003 0310 	and.w	r3, r3, #16
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d118      	bne.n	8001ad8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aae:	f023 0302 	bic.w	r3, r3, #2
 8001ab2:	f043 0202 	orr.w	r2, r3, #2
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 fae8 	bl	8002090 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f023 0303 	bic.w	r3, r3, #3
 8001ace:	f043 0201 	orr.w	r2, r3, #1
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ad6:	e001      	b.n	8001adc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_ADC_Start+0x1a>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e0b2      	b.n	8001c70 <HAL_ADC_Start+0x180>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d018      	beq.n	8001b52 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0201 	orr.w	r2, r2, #1
 8001b2e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b30:	4b52      	ldr	r3, [pc, #328]	; (8001c7c <HAL_ADC_Start+0x18c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a52      	ldr	r2, [pc, #328]	; (8001c80 <HAL_ADC_Start+0x190>)
 8001b36:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3a:	0c9a      	lsrs	r2, r3, #18
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	4413      	add	r3, r2
 8001b42:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b44:	e002      	b.n	8001b4c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f9      	bne.n	8001b46 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d17a      	bne.n	8001c56 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b68:	f023 0301 	bic.w	r3, r3, #1
 8001b6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d007      	beq.n	8001b92 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b9e:	d106      	bne.n	8001bae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba4:	f023 0206 	bic.w	r2, r3, #6
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	645a      	str	r2, [r3, #68]	; 0x44
 8001bac:	e002      	b.n	8001bb4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bbc:	4b31      	ldr	r3, [pc, #196]	; (8001c84 <HAL_ADC_Start+0x194>)
 8001bbe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001bc8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 031f 	and.w	r3, r3, #31
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d12a      	bne.n	8001c2c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a2b      	ldr	r2, [pc, #172]	; (8001c88 <HAL_ADC_Start+0x198>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d015      	beq.n	8001c0c <HAL_ADC_Start+0x11c>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a29      	ldr	r2, [pc, #164]	; (8001c8c <HAL_ADC_Start+0x19c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d105      	bne.n	8001bf6 <HAL_ADC_Start+0x106>
 8001bea:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <HAL_ADC_Start+0x194>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 031f 	and.w	r3, r3, #31
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00a      	beq.n	8001c0c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a25      	ldr	r2, [pc, #148]	; (8001c90 <HAL_ADC_Start+0x1a0>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d136      	bne.n	8001c6e <HAL_ADC_Start+0x17e>
 8001c00:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <HAL_ADC_Start+0x194>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0310 	and.w	r3, r3, #16
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d130      	bne.n	8001c6e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d129      	bne.n	8001c6e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	e020      	b.n	8001c6e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a15      	ldr	r2, [pc, #84]	; (8001c88 <HAL_ADC_Start+0x198>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d11b      	bne.n	8001c6e <HAL_ADC_Start+0x17e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d114      	bne.n	8001c6e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	e00b      	b.n	8001c6e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f043 0210 	orr.w	r2, r3, #16
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	f043 0201 	orr.w	r2, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	431bde83 	.word	0x431bde83
 8001c84:	40012300 	.word	0x40012300
 8001c88:	40012000 	.word	0x40012000
 8001c8c:	40012100 	.word	0x40012100
 8001c90:	40012200 	.word	0x40012200

08001c94 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_Stop+0x16>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e021      	b.n	8001cee <HAL_ADC_Stop+0x5a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0201 	bic.w	r2, r2, #1
 8001cc0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d109      	bne.n	8001ce4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cd8:	f023 0301 	bic.w	r3, r3, #1
 8001cdc:	f043 0201 	orr.w	r2, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d16:	d113      	bne.n	8001d40 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d26:	d10b      	bne.n	8001d40 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	f043 0220 	orr.w	r2, r3, #32
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e063      	b.n	8001e08 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d40:	f7ff fe62 	bl	8001a08 <HAL_GetTick>
 8001d44:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d46:	e021      	b.n	8001d8c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d4e:	d01d      	beq.n	8001d8c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d007      	beq.n	8001d66 <HAL_ADC_PollForConversion+0x6c>
 8001d56:	f7ff fe57 	bl	8001a08 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d212      	bcs.n	8001d8c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d00b      	beq.n	8001d8c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	f043 0204 	orr.w	r2, r3, #4
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e03d      	b.n	8001e08 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d1d6      	bne.n	8001d48 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f06f 0212 	mvn.w	r2, #18
 8001da2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d123      	bne.n	8001e06 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d11f      	bne.n	8001e06 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dcc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d006      	beq.n	8001de2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d111      	bne.n	8001e06 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d105      	bne.n	8001e06 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f043 0201 	orr.w	r2, r3, #1
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x1c>
 8001e44:	2302      	movs	r3, #2
 8001e46:	e113      	b.n	8002070 <HAL_ADC_ConfigChannel+0x244>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b09      	cmp	r3, #9
 8001e56:	d925      	bls.n	8001ea4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68d9      	ldr	r1, [r3, #12]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	4613      	mov	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3b1e      	subs	r3, #30
 8001e6e:	2207      	movs	r2, #7
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43da      	mvns	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	400a      	ands	r2, r1
 8001e7c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68d9      	ldr	r1, [r3, #12]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	4618      	mov	r0, r3
 8001e90:	4603      	mov	r3, r0
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	4403      	add	r3, r0
 8001e96:	3b1e      	subs	r3, #30
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	e022      	b.n	8001eea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6919      	ldr	r1, [r3, #16]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	2207      	movs	r2, #7
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	400a      	ands	r2, r1
 8001ec6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6919      	ldr	r1, [r3, #16]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	4618      	mov	r0, r3
 8001eda:	4603      	mov	r3, r0
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4403      	add	r3, r0
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b06      	cmp	r3, #6
 8001ef0:	d824      	bhi.n	8001f3c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	3b05      	subs	r3, #5
 8001f04:	221f      	movs	r2, #31
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	400a      	ands	r2, r1
 8001f12:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	4618      	mov	r0, r3
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3b05      	subs	r3, #5
 8001f2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	635a      	str	r2, [r3, #52]	; 0x34
 8001f3a:	e04c      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b0c      	cmp	r3, #12
 8001f42:	d824      	bhi.n	8001f8e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	3b23      	subs	r3, #35	; 0x23
 8001f56:	221f      	movs	r2, #31
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43da      	mvns	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	400a      	ands	r2, r1
 8001f64:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3b23      	subs	r3, #35	; 0x23
 8001f80:	fa00 f203 	lsl.w	r2, r0, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f8c:	e023      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3b41      	subs	r3, #65	; 0x41
 8001fa0:	221f      	movs	r2, #31
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	400a      	ands	r2, r1
 8001fae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3b41      	subs	r3, #65	; 0x41
 8001fca:	fa00 f203 	lsl.w	r2, r0, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fd6:	4b29      	ldr	r3, [pc, #164]	; (800207c <HAL_ADC_ConfigChannel+0x250>)
 8001fd8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a28      	ldr	r2, [pc, #160]	; (8002080 <HAL_ADC_ConfigChannel+0x254>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d10f      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x1d8>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b12      	cmp	r3, #18
 8001fea:	d10b      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a1d      	ldr	r2, [pc, #116]	; (8002080 <HAL_ADC_ConfigChannel+0x254>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d12b      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x23a>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a1c      	ldr	r2, [pc, #112]	; (8002084 <HAL_ADC_ConfigChannel+0x258>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d003      	beq.n	8002020 <HAL_ADC_ConfigChannel+0x1f4>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b11      	cmp	r3, #17
 800201e:	d122      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a11      	ldr	r2, [pc, #68]	; (8002084 <HAL_ADC_ConfigChannel+0x258>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d111      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002042:	4b11      	ldr	r3, [pc, #68]	; (8002088 <HAL_ADC_ConfigChannel+0x25c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a11      	ldr	r2, [pc, #68]	; (800208c <HAL_ADC_ConfigChannel+0x260>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	0c9a      	lsrs	r2, r3, #18
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002058:	e002      	b.n	8002060 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	3b01      	subs	r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f9      	bne.n	800205a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	40012300 	.word	0x40012300
 8002080:	40012000 	.word	0x40012000
 8002084:	10000012 	.word	0x10000012
 8002088:	20000000 	.word	0x20000000
 800208c:	431bde83 	.word	0x431bde83

08002090 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002098:	4b79      	ldr	r3, [pc, #484]	; (8002280 <ADC_Init+0x1f0>)
 800209a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	431a      	orrs	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6859      	ldr	r1, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	021a      	lsls	r2, r3, #8
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6859      	ldr	r1, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800210a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6899      	ldr	r1, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002122:	4a58      	ldr	r2, [pc, #352]	; (8002284 <ADC_Init+0x1f4>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d022      	beq.n	800216e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002136:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6899      	ldr	r1, [r3, #8]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002158:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6899      	ldr	r1, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	e00f      	b.n	800218e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800217c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800218c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0202 	bic.w	r2, r2, #2
 800219c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6899      	ldr	r1, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	7e1b      	ldrb	r3, [r3, #24]
 80021a8:	005a      	lsls	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d01b      	beq.n	80021f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6859      	ldr	r1, [r3, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	3b01      	subs	r3, #1
 80021e8:	035a      	lsls	r2, r3, #13
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	e007      	b.n	8002204 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002202:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	3b01      	subs	r3, #1
 8002220:	051a      	lsls	r2, r3, #20
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002238:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6899      	ldr	r1, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002246:	025a      	lsls	r2, r3, #9
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800225e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6899      	ldr	r1, [r3, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	029a      	lsls	r2, r3, #10
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	609a      	str	r2, [r3, #8]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	40012300 	.word	0x40012300
 8002284:	0f000001 	.word	0x0f000001

08002288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <__NVIC_SetPriorityGrouping+0x44>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a4:	4013      	ands	r3, r2
 80022a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ba:	4a04      	ldr	r2, [pc, #16]	; (80022cc <__NVIC_SetPriorityGrouping+0x44>)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	60d3      	str	r3, [r2, #12]
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d4:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <__NVIC_GetPriorityGrouping+0x18>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	0a1b      	lsrs	r3, r3, #8
 80022da:	f003 0307 	and.w	r3, r3, #7
}
 80022de:	4618      	mov	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	6039      	str	r1, [r7, #0]
 80022f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	db0a      	blt.n	8002316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	b2da      	uxtb	r2, r3
 8002304:	490c      	ldr	r1, [pc, #48]	; (8002338 <__NVIC_SetPriority+0x4c>)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	0112      	lsls	r2, r2, #4
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	440b      	add	r3, r1
 8002310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002314:	e00a      	b.n	800232c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	b2da      	uxtb	r2, r3
 800231a:	4908      	ldr	r1, [pc, #32]	; (800233c <__NVIC_SetPriority+0x50>)
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	3b04      	subs	r3, #4
 8002324:	0112      	lsls	r2, r2, #4
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	440b      	add	r3, r1
 800232a:	761a      	strb	r2, [r3, #24]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000e100 	.word	0xe000e100
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002340:	b480      	push	{r7}
 8002342:	b089      	sub	sp, #36	; 0x24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f1c3 0307 	rsb	r3, r3, #7
 800235a:	2b04      	cmp	r3, #4
 800235c:	bf28      	it	cs
 800235e:	2304      	movcs	r3, #4
 8002360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3304      	adds	r3, #4
 8002366:	2b06      	cmp	r3, #6
 8002368:	d902      	bls.n	8002370 <NVIC_EncodePriority+0x30>
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3b03      	subs	r3, #3
 800236e:	e000      	b.n	8002372 <NVIC_EncodePriority+0x32>
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002374:	f04f 32ff 	mov.w	r2, #4294967295
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43da      	mvns	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	401a      	ands	r2, r3
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002388:	f04f 31ff 	mov.w	r1, #4294967295
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	fa01 f303 	lsl.w	r3, r1, r3
 8002392:	43d9      	mvns	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002398:	4313      	orrs	r3, r2
         );
}
 800239a:	4618      	mov	r0, r3
 800239c:	3724      	adds	r7, #36	; 0x24
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b8:	d301      	bcc.n	80023be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00f      	b.n	80023de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023be:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <SysTick_Config+0x40>)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023c6:	210f      	movs	r1, #15
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	f7ff ff8e 	bl	80022ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <SysTick_Config+0x40>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023d6:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <SysTick_Config+0x40>)
 80023d8:	2207      	movs	r2, #7
 80023da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	e000e010 	.word	0xe000e010

080023ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ff47 	bl	8002288 <__NVIC_SetPriorityGrouping>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002414:	f7ff ff5c 	bl	80022d0 <__NVIC_GetPriorityGrouping>
 8002418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	6978      	ldr	r0, [r7, #20]
 8002420:	f7ff ff8e 	bl	8002340 <NVIC_EncodePriority>
 8002424:	4602      	mov	r2, r0
 8002426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff5d 	bl	80022ec <__NVIC_SetPriority>
}
 8002432:	bf00      	nop
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ffb0 	bl	80023a8 <SysTick_Config>
 8002448:	4603      	mov	r3, r0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e06c      	b.n	8002540 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800246c:	2b00      	cmp	r3, #0
 800246e:	d106      	bne.n	800247e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2223      	movs	r2, #35	; 0x23
 8002474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff f85b 	bl	8001534 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	4b31      	ldr	r3, [pc, #196]	; (8002548 <HAL_ETH_Init+0xf4>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	4a30      	ldr	r2, [pc, #192]	; (8002548 <HAL_ETH_Init+0xf4>)
 8002488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800248c:	6453      	str	r3, [r2, #68]	; 0x44
 800248e:	4b2e      	ldr	r3, [pc, #184]	; (8002548 <HAL_ETH_Init+0xf4>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800249a:	4b2c      	ldr	r3, [pc, #176]	; (800254c <HAL_ETH_Init+0xf8>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4a2b      	ldr	r2, [pc, #172]	; (800254c <HAL_ETH_Init+0xf8>)
 80024a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80024a4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80024a6:	4b29      	ldr	r3, [pc, #164]	; (800254c <HAL_ETH_Init+0xf8>)
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	4927      	ldr	r1, [pc, #156]	; (800254c <HAL_ETH_Init+0xf8>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80024b4:	4b25      	ldr	r3, [pc, #148]	; (800254c <HAL_ETH_Init+0xf8>)
 80024b6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024d0:	f7ff fa9a 	bl	8001a08 <HAL_GetTick>
 80024d4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80024d6:	e011      	b.n	80024fc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80024d8:	f7ff fa96 	bl	8001a08 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80024e6:	d909      	bls.n	80024fc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2204      	movs	r2, #4
 80024ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	22e0      	movs	r2, #224	; 0xe0
 80024f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e021      	b.n	8002540 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1e4      	bne.n	80024d8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f958 	bl	80027c4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f9ff 	bl	8002918 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 fa55 	bl	80029ca <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	461a      	mov	r2, r3
 8002526:	2100      	movs	r1, #0
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f9bd 	bl	80028a8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2210      	movs	r2, #16
 800253a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40023800 	.word	0x40023800
 800254c:	40013800 	.word	0x40013800

08002550 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4b51      	ldr	r3, [pc, #324]	; (80026ac <ETH_SetMACConfig+0x15c>)
 8002566:	4013      	ands	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	7c1b      	ldrb	r3, [r3, #16]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d102      	bne.n	8002578 <ETH_SetMACConfig+0x28>
 8002572:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002576:	e000      	b.n	800257a <ETH_SetMACConfig+0x2a>
 8002578:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	7c5b      	ldrb	r3, [r3, #17]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d102      	bne.n	8002588 <ETH_SetMACConfig+0x38>
 8002582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002586:	e000      	b.n	800258a <ETH_SetMACConfig+0x3a>
 8002588:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800258a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002590:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	7fdb      	ldrb	r3, [r3, #31]
 8002596:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002598:	431a      	orrs	r2, r3
                        macconf->Speed |
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800259e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	7f92      	ldrb	r2, [r2, #30]
 80025a4:	2a00      	cmp	r2, #0
 80025a6:	d102      	bne.n	80025ae <ETH_SetMACConfig+0x5e>
 80025a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025ac:	e000      	b.n	80025b0 <ETH_SetMACConfig+0x60>
 80025ae:	2200      	movs	r2, #0
                        macconf->Speed |
 80025b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	7f1b      	ldrb	r3, [r3, #28]
 80025b6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80025b8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80025be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	791b      	ldrb	r3, [r3, #4]
 80025c4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80025c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	f892 2020 	ldrb.w	r2, [r2, #32]
 80025ce:	2a00      	cmp	r2, #0
 80025d0:	d102      	bne.n	80025d8 <ETH_SetMACConfig+0x88>
 80025d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025d6:	e000      	b.n	80025da <ETH_SetMACConfig+0x8a>
 80025d8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80025da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	7bdb      	ldrb	r3, [r3, #15]
 80025e0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80025e2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80025e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025f0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025f2:	4313      	orrs	r3, r2
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800260a:	2001      	movs	r0, #1
 800260c:	f7ff fa08 	bl	8001a20 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002626:	4013      	ands	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002636:	2a00      	cmp	r2, #0
 8002638:	d101      	bne.n	800263e <ETH_SetMACConfig+0xee>
 800263a:	2280      	movs	r2, #128	; 0x80
 800263c:	e000      	b.n	8002640 <ETH_SetMACConfig+0xf0>
 800263e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002640:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002646:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800264e:	2a01      	cmp	r2, #1
 8002650:	d101      	bne.n	8002656 <ETH_SetMACConfig+0x106>
 8002652:	2208      	movs	r2, #8
 8002654:	e000      	b.n	8002658 <ETH_SetMACConfig+0x108>
 8002656:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002658:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002660:	2a01      	cmp	r2, #1
 8002662:	d101      	bne.n	8002668 <ETH_SetMACConfig+0x118>
 8002664:	2204      	movs	r2, #4
 8002666:	e000      	b.n	800266a <ETH_SetMACConfig+0x11a>
 8002668:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800266a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002672:	2a01      	cmp	r2, #1
 8002674:	d101      	bne.n	800267a <ETH_SetMACConfig+0x12a>
 8002676:	2202      	movs	r2, #2
 8002678:	e000      	b.n	800267c <ETH_SetMACConfig+0x12c>
 800267a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800267c:	4313      	orrs	r3, r2
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4313      	orrs	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002694:	2001      	movs	r0, #1
 8002696:	f7ff f9c3 	bl	8001a20 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	619a      	str	r2, [r3, #24]
}
 80026a2:	bf00      	nop
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	ff20810f 	.word	0xff20810f

080026b0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4b3d      	ldr	r3, [pc, #244]	; (80027c0 <ETH_SetDMAConfig+0x110>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	7b1b      	ldrb	r3, [r3, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d102      	bne.n	80026dc <ETH_SetDMAConfig+0x2c>
 80026d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80026da:	e000      	b.n	80026de <ETH_SetDMAConfig+0x2e>
 80026dc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	7b5b      	ldrb	r3, [r3, #13]
 80026e2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80026e4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	7f52      	ldrb	r2, [r2, #29]
 80026ea:	2a00      	cmp	r2, #0
 80026ec:	d102      	bne.n	80026f4 <ETH_SetDMAConfig+0x44>
 80026ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026f2:	e000      	b.n	80026f6 <ETH_SetDMAConfig+0x46>
 80026f4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80026f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	7b9b      	ldrb	r3, [r3, #14]
 80026fc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80026fe:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002704:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	7f1b      	ldrb	r3, [r3, #28]
 800270a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800270c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	7f9b      	ldrb	r3, [r3, #30]
 8002712:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002714:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800271a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002722:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002724:	4313      	orrs	r3, r2
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002734:	461a      	mov	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002746:	2001      	movs	r0, #1
 8002748:	f7ff f96a 	bl	8001a20 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002754:	461a      	mov	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	791b      	ldrb	r3, [r3, #4]
 800275e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002764:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800276a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002770:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002778:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800277a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002782:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002788:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002792:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002796:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027a4:	2001      	movs	r0, #1
 80027a6:	f7ff f93b 	bl	8001a20 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b2:	461a      	mov	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6013      	str	r3, [r2, #0]
}
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	f8de3f23 	.word	0xf8de3f23

080027c4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b0a6      	sub	sp, #152	; 0x98
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80027cc:	2301      	movs	r3, #1
 80027ce:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80027d2:	2301      	movs	r3, #1
 80027d4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80027d8:	2300      	movs	r3, #0
 80027da:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80027dc:	2300      	movs	r3, #0
 80027de:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80027e2:	2301      	movs	r3, #1
 80027e4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80027e8:	2300      	movs	r3, #0
 80027ea:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80027ee:	2301      	movs	r3, #1
 80027f0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80027f4:	2300      	movs	r3, #0
 80027f6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80027fa:	2300      	movs	r3, #0
 80027fc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002800:	2300      	movs	r3, #0
 8002802:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002804:	2300      	movs	r3, #0
 8002806:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800280a:	2300      	movs	r3, #0
 800280c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800280e:	2300      	movs	r3, #0
 8002810:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002814:	2300      	movs	r3, #0
 8002816:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002820:	2300      	movs	r3, #0
 8002822:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002826:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800282a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800282c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002830:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002832:	2300      	movs	r3, #0
 8002834:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002838:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800283c:	4619      	mov	r1, r3
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff fe86 	bl	8002550 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002844:	2301      	movs	r3, #1
 8002846:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002848:	2301      	movs	r3, #1
 800284a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800284c:	2301      	movs	r3, #1
 800284e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002852:	2301      	movs	r3, #1
 8002854:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800285a:	2300      	movs	r3, #0
 800285c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002860:	2300      	movs	r3, #0
 8002862:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002866:	2300      	movs	r3, #0
 8002868:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800286a:	2301      	movs	r3, #1
 800286c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002870:	2301      	movs	r3, #1
 8002872:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002874:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002878:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800287a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800287e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002880:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002884:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002886:	2301      	movs	r3, #1
 8002888:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800288c:	2300      	movs	r3, #0
 800288e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002890:	2300      	movs	r3, #0
 8002892:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002894:	f107 0308 	add.w	r3, r7, #8
 8002898:	4619      	mov	r1, r3
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff ff08 	bl	80026b0 <ETH_SetDMAConfig>
}
 80028a0:	bf00      	nop
 80028a2:	3798      	adds	r7, #152	; 0x98
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3305      	adds	r3, #5
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	021b      	lsls	r3, r3, #8
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	3204      	adds	r2, #4
 80028c0:	7812      	ldrb	r2, [r2, #0]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	4b11      	ldr	r3, [pc, #68]	; (8002910 <ETH_MACAddressConfig+0x68>)
 80028ca:	4413      	add	r3, r2
 80028cc:	461a      	mov	r2, r3
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3303      	adds	r3, #3
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	061a      	lsls	r2, r3, #24
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3302      	adds	r3, #2
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	041b      	lsls	r3, r3, #16
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3301      	adds	r3, #1
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	021b      	lsls	r3, r3, #8
 80028ec:	4313      	orrs	r3, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	7812      	ldrb	r2, [r2, #0]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <ETH_MACAddressConfig+0x6c>)
 80028fa:	4413      	add	r3, r2
 80028fc:	461a      	mov	r2, r3
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	6013      	str	r3, [r2, #0]
}
 8002902:	bf00      	nop
 8002904:	371c      	adds	r7, #28
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40028040 	.word	0x40028040
 8002914:	40028044 	.word	0x40028044

08002918 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	e03e      	b.n	80029a4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68d9      	ldr	r1, [r3, #12]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	440b      	add	r3, r1
 8002936:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2200      	movs	r2, #0
 8002942:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2200      	movs	r2, #0
 800294e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002950:	68b9      	ldr	r1, [r7, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	3206      	adds	r2, #6
 8002958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d80c      	bhi.n	8002988 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68d9      	ldr	r1, [r3, #12]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	4613      	mov	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	440b      	add	r3, r1
 8002980:	461a      	mov	r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	e004      	b.n	8002992 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	461a      	mov	r2, r3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	3301      	adds	r3, #1
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	d9bd      	bls.n	8002926 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029bc:	611a      	str	r2, [r3, #16]
}
 80029be:	bf00      	nop
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b085      	sub	sp, #20
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	e046      	b.n	8002a66 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6919      	ldr	r1, [r3, #16]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	440b      	add	r3, r1
 80029e8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2200      	movs	r2, #0
 80029f4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2200      	movs	r2, #0
 80029fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2200      	movs	r2, #0
 8002a00:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2200      	movs	r2, #0
 8002a06:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a14:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002a1c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	3212      	adds	r2, #18
 8002a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d80c      	bhi.n	8002a56 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6919      	ldr	r1, [r3, #16]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	1c5a      	adds	r2, r3, #1
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	440b      	add	r3, r1
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	60da      	str	r2, [r3, #12]
 8002a54:	e004      	b.n	8002a60 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3301      	adds	r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d9b5      	bls.n	80029d8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a96:	60da      	str	r2, [r3, #12]
}
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b089      	sub	sp, #36	; 0x24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
 8002abe:	e177      	b.n	8002db0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	f040 8166 	bne.w	8002daa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d005      	beq.n	8002af6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d130      	bne.n	8002b58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	2203      	movs	r2, #3
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43db      	mvns	r3, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	f003 0201 	and.w	r2, r3, #1
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	d017      	beq.n	8002b94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	2203      	movs	r2, #3
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d123      	bne.n	8002be8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	08da      	lsrs	r2, r3, #3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3208      	adds	r2, #8
 8002ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	220f      	movs	r2, #15
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	08da      	lsrs	r2, r3, #3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3208      	adds	r2, #8
 8002be2:	69b9      	ldr	r1, [r7, #24]
 8002be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	2203      	movs	r2, #3
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 0203 	and.w	r2, r3, #3
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 80c0 	beq.w	8002daa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	4b66      	ldr	r3, [pc, #408]	; (8002dc8 <HAL_GPIO_Init+0x324>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	4a65      	ldr	r2, [pc, #404]	; (8002dc8 <HAL_GPIO_Init+0x324>)
 8002c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c38:	6453      	str	r3, [r2, #68]	; 0x44
 8002c3a:	4b63      	ldr	r3, [pc, #396]	; (8002dc8 <HAL_GPIO_Init+0x324>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c46:	4a61      	ldr	r2, [pc, #388]	; (8002dcc <HAL_GPIO_Init+0x328>)
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	089b      	lsrs	r3, r3, #2
 8002c4c:	3302      	adds	r3, #2
 8002c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	220f      	movs	r2, #15
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43db      	mvns	r3, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4013      	ands	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a58      	ldr	r2, [pc, #352]	; (8002dd0 <HAL_GPIO_Init+0x32c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d037      	beq.n	8002ce2 <HAL_GPIO_Init+0x23e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a57      	ldr	r2, [pc, #348]	; (8002dd4 <HAL_GPIO_Init+0x330>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d031      	beq.n	8002cde <HAL_GPIO_Init+0x23a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a56      	ldr	r2, [pc, #344]	; (8002dd8 <HAL_GPIO_Init+0x334>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d02b      	beq.n	8002cda <HAL_GPIO_Init+0x236>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a55      	ldr	r2, [pc, #340]	; (8002ddc <HAL_GPIO_Init+0x338>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d025      	beq.n	8002cd6 <HAL_GPIO_Init+0x232>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a54      	ldr	r2, [pc, #336]	; (8002de0 <HAL_GPIO_Init+0x33c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d01f      	beq.n	8002cd2 <HAL_GPIO_Init+0x22e>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a53      	ldr	r2, [pc, #332]	; (8002de4 <HAL_GPIO_Init+0x340>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d019      	beq.n	8002cce <HAL_GPIO_Init+0x22a>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a52      	ldr	r2, [pc, #328]	; (8002de8 <HAL_GPIO_Init+0x344>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d013      	beq.n	8002cca <HAL_GPIO_Init+0x226>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a51      	ldr	r2, [pc, #324]	; (8002dec <HAL_GPIO_Init+0x348>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d00d      	beq.n	8002cc6 <HAL_GPIO_Init+0x222>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a50      	ldr	r2, [pc, #320]	; (8002df0 <HAL_GPIO_Init+0x34c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d007      	beq.n	8002cc2 <HAL_GPIO_Init+0x21e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a4f      	ldr	r2, [pc, #316]	; (8002df4 <HAL_GPIO_Init+0x350>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d101      	bne.n	8002cbe <HAL_GPIO_Init+0x21a>
 8002cba:	2309      	movs	r3, #9
 8002cbc:	e012      	b.n	8002ce4 <HAL_GPIO_Init+0x240>
 8002cbe:	230a      	movs	r3, #10
 8002cc0:	e010      	b.n	8002ce4 <HAL_GPIO_Init+0x240>
 8002cc2:	2308      	movs	r3, #8
 8002cc4:	e00e      	b.n	8002ce4 <HAL_GPIO_Init+0x240>
 8002cc6:	2307      	movs	r3, #7
 8002cc8:	e00c      	b.n	8002ce4 <HAL_GPIO_Init+0x240>
 8002cca:	2306      	movs	r3, #6
 8002ccc:	e00a      	b.n	8002ce4 <HAL_GPIO_Init+0x240>
 8002cce:	2305      	movs	r3, #5
 8002cd0:	e008      	b.n	8002ce4 <HAL_GPIO_Init+0x240>
 8002cd2:	2304      	movs	r3, #4
 8002cd4:	e006      	b.n	8002ce4 <HAL_GPIO_Init+0x240>
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e004      	b.n	8002ce4 <HAL_GPIO_Init+0x240>
 8002cda:	2302      	movs	r3, #2
 8002cdc:	e002      	b.n	8002ce4 <HAL_GPIO_Init+0x240>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <HAL_GPIO_Init+0x240>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	69fa      	ldr	r2, [r7, #28]
 8002ce6:	f002 0203 	and.w	r2, r2, #3
 8002cea:	0092      	lsls	r2, r2, #2
 8002cec:	4093      	lsls	r3, r2
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cf4:	4935      	ldr	r1, [pc, #212]	; (8002dcc <HAL_GPIO_Init+0x328>)
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	089b      	lsrs	r3, r3, #2
 8002cfa:	3302      	adds	r3, #2
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d02:	4b3d      	ldr	r3, [pc, #244]	; (8002df8 <HAL_GPIO_Init+0x354>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d26:	4a34      	ldr	r2, [pc, #208]	; (8002df8 <HAL_GPIO_Init+0x354>)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d2c:	4b32      	ldr	r3, [pc, #200]	; (8002df8 <HAL_GPIO_Init+0x354>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d50:	4a29      	ldr	r2, [pc, #164]	; (8002df8 <HAL_GPIO_Init+0x354>)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d56:	4b28      	ldr	r3, [pc, #160]	; (8002df8 <HAL_GPIO_Init+0x354>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d7a:	4a1f      	ldr	r2, [pc, #124]	; (8002df8 <HAL_GPIO_Init+0x354>)
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d80:	4b1d      	ldr	r3, [pc, #116]	; (8002df8 <HAL_GPIO_Init+0x354>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002da4:	4a14      	ldr	r2, [pc, #80]	; (8002df8 <HAL_GPIO_Init+0x354>)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3301      	adds	r3, #1
 8002dae:	61fb      	str	r3, [r7, #28]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	2b0f      	cmp	r3, #15
 8002db4:	f67f ae84 	bls.w	8002ac0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002db8:	bf00      	nop
 8002dba:	bf00      	nop
 8002dbc:	3724      	adds	r7, #36	; 0x24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40013800 	.word	0x40013800
 8002dd0:	40020000 	.word	0x40020000
 8002dd4:	40020400 	.word	0x40020400
 8002dd8:	40020800 	.word	0x40020800
 8002ddc:	40020c00 	.word	0x40020c00
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40021400 	.word	0x40021400
 8002de8:	40021800 	.word	0x40021800
 8002dec:	40021c00 	.word	0x40021c00
 8002df0:	40022000 	.word	0x40022000
 8002df4:	40022400 	.word	0x40022400
 8002df8:	40013c00 	.word	0x40013c00

08002dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	807b      	strh	r3, [r7, #2]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e0c:	787b      	ldrb	r3, [r7, #1]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e12:	887a      	ldrh	r2, [r7, #2]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e18:	e003      	b.n	8002e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e1a:	887b      	ldrh	r3, [r7, #2]
 8002e1c:	041a      	lsls	r2, r3, #16
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	619a      	str	r2, [r3, #24]
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e30:	b08f      	sub	sp, #60	; 0x3c
 8002e32:	af0a      	add	r7, sp, #40	; 0x28
 8002e34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e10f      	b.n	8003060 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d106      	bne.n	8002e60 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fe fc78 	bl	8001750 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2203      	movs	r2, #3
 8002e64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d102      	bne.n	8002e7a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f001 f9ad 	bl	80041de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	603b      	str	r3, [r7, #0]
 8002e8a:	687e      	ldr	r6, [r7, #4]
 8002e8c:	466d      	mov	r5, sp
 8002e8e:	f106 0410 	add.w	r4, r6, #16
 8002e92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ea2:	1d33      	adds	r3, r6, #4
 8002ea4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ea6:	6838      	ldr	r0, [r7, #0]
 8002ea8:	f001 f938 	bl	800411c <USB_CoreInit>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d005      	beq.n	8002ebe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e0d0      	b.n	8003060 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f001 f99b 	bl	8004200 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eca:	2300      	movs	r3, #0
 8002ecc:	73fb      	strb	r3, [r7, #15]
 8002ece:	e04a      	b.n	8002f66 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ed0:	7bfa      	ldrb	r2, [r7, #15]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	333d      	adds	r3, #61	; 0x3d
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ee4:	7bfa      	ldrb	r2, [r7, #15]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	333c      	adds	r3, #60	; 0x3c
 8002ef4:	7bfa      	ldrb	r2, [r7, #15]
 8002ef6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ef8:	7bfa      	ldrb	r2, [r7, #15]
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	b298      	uxth	r0, r3
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	3344      	adds	r3, #68	; 0x44
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	3340      	adds	r3, #64	; 0x40
 8002f20:	2200      	movs	r2, #0
 8002f22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f24:	7bfa      	ldrb	r2, [r7, #15]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	3348      	adds	r3, #72	; 0x48
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f38:	7bfa      	ldrb	r2, [r7, #15]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	334c      	adds	r3, #76	; 0x4c
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f4c:	7bfa      	ldrb	r2, [r7, #15]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	3354      	adds	r3, #84	; 0x54
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
 8002f62:	3301      	adds	r3, #1
 8002f64:	73fb      	strb	r3, [r7, #15]
 8002f66:	7bfa      	ldrb	r2, [r7, #15]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d3af      	bcc.n	8002ed0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f70:	2300      	movs	r3, #0
 8002f72:	73fb      	strb	r3, [r7, #15]
 8002f74:	e044      	b.n	8003000 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f76:	7bfa      	ldrb	r2, [r7, #15]
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4413      	add	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002f88:	2200      	movs	r2, #0
 8002f8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f8c:	7bfa      	ldrb	r2, [r7, #15]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f9e:	7bfa      	ldrb	r2, [r7, #15]
 8002fa0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fa2:	7bfa      	ldrb	r2, [r7, #15]
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	4413      	add	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fb8:	7bfa      	ldrb	r2, [r7, #15]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fce:	7bfa      	ldrb	r2, [r7, #15]
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	440b      	add	r3, r1
 8002fdc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fe4:	7bfa      	ldrb	r2, [r7, #15]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	73fb      	strb	r3, [r7, #15]
 8003000:	7bfa      	ldrb	r2, [r7, #15]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	429a      	cmp	r2, r3
 8003008:	d3b5      	bcc.n	8002f76 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	603b      	str	r3, [r7, #0]
 8003010:	687e      	ldr	r6, [r7, #4]
 8003012:	466d      	mov	r5, sp
 8003014:	f106 0410 	add.w	r4, r6, #16
 8003018:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800301a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800301c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800301e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003020:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003024:	e885 0003 	stmia.w	r5, {r0, r1}
 8003028:	1d33      	adds	r3, r6, #4
 800302a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800302c:	6838      	ldr	r0, [r7, #0]
 800302e:	f001 f933 	bl	8004298 <USB_DevInit>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e00d      	b.n	8003060 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f001 fafe 	bl	800465a <USB_DevDisconnect>

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003068 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e267      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d075      	beq.n	8003172 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003086:	4b88      	ldr	r3, [pc, #544]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	2b04      	cmp	r3, #4
 8003090:	d00c      	beq.n	80030ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003092:	4b85      	ldr	r3, [pc, #532]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800309a:	2b08      	cmp	r3, #8
 800309c:	d112      	bne.n	80030c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800309e:	4b82      	ldr	r3, [pc, #520]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030aa:	d10b      	bne.n	80030c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ac:	4b7e      	ldr	r3, [pc, #504]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d05b      	beq.n	8003170 <HAL_RCC_OscConfig+0x108>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d157      	bne.n	8003170 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e242      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030cc:	d106      	bne.n	80030dc <HAL_RCC_OscConfig+0x74>
 80030ce:	4b76      	ldr	r3, [pc, #472]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a75      	ldr	r2, [pc, #468]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	e01d      	b.n	8003118 <HAL_RCC_OscConfig+0xb0>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e4:	d10c      	bne.n	8003100 <HAL_RCC_OscConfig+0x98>
 80030e6:	4b70      	ldr	r3, [pc, #448]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a6f      	ldr	r2, [pc, #444]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	4b6d      	ldr	r3, [pc, #436]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a6c      	ldr	r2, [pc, #432]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	e00b      	b.n	8003118 <HAL_RCC_OscConfig+0xb0>
 8003100:	4b69      	ldr	r3, [pc, #420]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a68      	ldr	r2, [pc, #416]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	4b66      	ldr	r3, [pc, #408]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a65      	ldr	r2, [pc, #404]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d013      	beq.n	8003148 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7fe fc72 	bl	8001a08 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003128:	f7fe fc6e 	bl	8001a08 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	; 0x64
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e207      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313a:	4b5b      	ldr	r3, [pc, #364]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0xc0>
 8003146:	e014      	b.n	8003172 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003148:	f7fe fc5e 	bl	8001a08 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003150:	f7fe fc5a 	bl	8001a08 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b64      	cmp	r3, #100	; 0x64
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e1f3      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003162:	4b51      	ldr	r3, [pc, #324]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0xe8>
 800316e:	e000      	b.n	8003172 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d063      	beq.n	8003246 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800317e:	4b4a      	ldr	r3, [pc, #296]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00b      	beq.n	80031a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800318a:	4b47      	ldr	r3, [pc, #284]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003192:	2b08      	cmp	r3, #8
 8003194:	d11c      	bne.n	80031d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003196:	4b44      	ldr	r3, [pc, #272]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d116      	bne.n	80031d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a2:	4b41      	ldr	r3, [pc, #260]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d005      	beq.n	80031ba <HAL_RCC_OscConfig+0x152>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d001      	beq.n	80031ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e1c7      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ba:	4b3b      	ldr	r3, [pc, #236]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	4937      	ldr	r1, [pc, #220]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ce:	e03a      	b.n	8003246 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d020      	beq.n	800321a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031d8:	4b34      	ldr	r3, [pc, #208]	; (80032ac <HAL_RCC_OscConfig+0x244>)
 80031da:	2201      	movs	r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031de:	f7fe fc13 	bl	8001a08 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031e6:	f7fe fc0f 	bl	8001a08 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e1a8      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f8:	4b2b      	ldr	r3, [pc, #172]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0f0      	beq.n	80031e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003204:	4b28      	ldr	r3, [pc, #160]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4925      	ldr	r1, [pc, #148]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003214:	4313      	orrs	r3, r2
 8003216:	600b      	str	r3, [r1, #0]
 8003218:	e015      	b.n	8003246 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800321a:	4b24      	ldr	r3, [pc, #144]	; (80032ac <HAL_RCC_OscConfig+0x244>)
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003220:	f7fe fbf2 	bl	8001a08 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003228:	f7fe fbee 	bl	8001a08 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e187      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323a:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d036      	beq.n	80032c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d016      	beq.n	8003288 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800325a:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <HAL_RCC_OscConfig+0x248>)
 800325c:	2201      	movs	r2, #1
 800325e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fe fbd2 	bl	8001a08 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003268:	f7fe fbce 	bl	8001a08 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e167      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327a:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 800327c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0x200>
 8003286:	e01b      	b.n	80032c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003288:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <HAL_RCC_OscConfig+0x248>)
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328e:	f7fe fbbb 	bl	8001a08 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003294:	e00e      	b.n	80032b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003296:	f7fe fbb7 	bl	8001a08 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d907      	bls.n	80032b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e150      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
 80032a8:	40023800 	.word	0x40023800
 80032ac:	42470000 	.word	0x42470000
 80032b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b4:	4b88      	ldr	r3, [pc, #544]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 80032b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1ea      	bne.n	8003296 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 8097 	beq.w	80033fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ce:	2300      	movs	r3, #0
 80032d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032d2:	4b81      	ldr	r3, [pc, #516]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10f      	bne.n	80032fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	4b7d      	ldr	r3, [pc, #500]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	4a7c      	ldr	r2, [pc, #496]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 80032e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ec:	6413      	str	r3, [r2, #64]	; 0x40
 80032ee:	4b7a      	ldr	r3, [pc, #488]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f6:	60bb      	str	r3, [r7, #8]
 80032f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032fa:	2301      	movs	r3, #1
 80032fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fe:	4b77      	ldr	r3, [pc, #476]	; (80034dc <HAL_RCC_OscConfig+0x474>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d118      	bne.n	800333c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800330a:	4b74      	ldr	r3, [pc, #464]	; (80034dc <HAL_RCC_OscConfig+0x474>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a73      	ldr	r2, [pc, #460]	; (80034dc <HAL_RCC_OscConfig+0x474>)
 8003310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003316:	f7fe fb77 	bl	8001a08 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800331e:	f7fe fb73 	bl	8001a08 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e10c      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003330:	4b6a      	ldr	r3, [pc, #424]	; (80034dc <HAL_RCC_OscConfig+0x474>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f0      	beq.n	800331e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d106      	bne.n	8003352 <HAL_RCC_OscConfig+0x2ea>
 8003344:	4b64      	ldr	r3, [pc, #400]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003348:	4a63      	ldr	r2, [pc, #396]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	6713      	str	r3, [r2, #112]	; 0x70
 8003350:	e01c      	b.n	800338c <HAL_RCC_OscConfig+0x324>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	2b05      	cmp	r3, #5
 8003358:	d10c      	bne.n	8003374 <HAL_RCC_OscConfig+0x30c>
 800335a:	4b5f      	ldr	r3, [pc, #380]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 800335c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335e:	4a5e      	ldr	r2, [pc, #376]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003360:	f043 0304 	orr.w	r3, r3, #4
 8003364:	6713      	str	r3, [r2, #112]	; 0x70
 8003366:	4b5c      	ldr	r3, [pc, #368]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336a:	4a5b      	ldr	r2, [pc, #364]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	6713      	str	r3, [r2, #112]	; 0x70
 8003372:	e00b      	b.n	800338c <HAL_RCC_OscConfig+0x324>
 8003374:	4b58      	ldr	r3, [pc, #352]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003378:	4a57      	ldr	r2, [pc, #348]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 800337a:	f023 0301 	bic.w	r3, r3, #1
 800337e:	6713      	str	r3, [r2, #112]	; 0x70
 8003380:	4b55      	ldr	r3, [pc, #340]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003384:	4a54      	ldr	r2, [pc, #336]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003386:	f023 0304 	bic.w	r3, r3, #4
 800338a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d015      	beq.n	80033c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003394:	f7fe fb38 	bl	8001a08 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339a:	e00a      	b.n	80033b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800339c:	f7fe fb34 	bl	8001a08 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e0cb      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b2:	4b49      	ldr	r3, [pc, #292]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 80033b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0ee      	beq.n	800339c <HAL_RCC_OscConfig+0x334>
 80033be:	e014      	b.n	80033ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c0:	f7fe fb22 	bl	8001a08 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c6:	e00a      	b.n	80033de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c8:	f7fe fb1e 	bl	8001a08 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e0b5      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033de:	4b3e      	ldr	r3, [pc, #248]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1ee      	bne.n	80033c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d105      	bne.n	80033fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f0:	4b39      	ldr	r3, [pc, #228]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	4a38      	ldr	r2, [pc, #224]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 80033f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 80a1 	beq.w	8003548 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003406:	4b34      	ldr	r3, [pc, #208]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	2b08      	cmp	r3, #8
 8003410:	d05c      	beq.n	80034cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	2b02      	cmp	r3, #2
 8003418:	d141      	bne.n	800349e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341a:	4b31      	ldr	r3, [pc, #196]	; (80034e0 <HAL_RCC_OscConfig+0x478>)
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003420:	f7fe faf2 	bl	8001a08 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003428:	f7fe faee 	bl	8001a08 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e087      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343a:	4b27      	ldr	r3, [pc, #156]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69da      	ldr	r2, [r3, #28]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	019b      	lsls	r3, r3, #6
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	085b      	lsrs	r3, r3, #1
 800345e:	3b01      	subs	r3, #1
 8003460:	041b      	lsls	r3, r3, #16
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	061b      	lsls	r3, r3, #24
 800346a:	491b      	ldr	r1, [pc, #108]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 800346c:	4313      	orrs	r3, r2
 800346e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003470:	4b1b      	ldr	r3, [pc, #108]	; (80034e0 <HAL_RCC_OscConfig+0x478>)
 8003472:	2201      	movs	r2, #1
 8003474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003476:	f7fe fac7 	bl	8001a08 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800347e:	f7fe fac3 	bl	8001a08 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e05c      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003490:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x416>
 800349c:	e054      	b.n	8003548 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349e:	4b10      	ldr	r3, [pc, #64]	; (80034e0 <HAL_RCC_OscConfig+0x478>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7fe fab0 	bl	8001a08 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ac:	f7fe faac 	bl	8001a08 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e045      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034be:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x444>
 80034ca:	e03d      	b.n	8003548 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d107      	bne.n	80034e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e038      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
 80034d8:	40023800 	.word	0x40023800
 80034dc:	40007000 	.word	0x40007000
 80034e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034e4:	4b1b      	ldr	r3, [pc, #108]	; (8003554 <HAL_RCC_OscConfig+0x4ec>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d028      	beq.n	8003544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d121      	bne.n	8003544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800350a:	429a      	cmp	r2, r3
 800350c:	d11a      	bne.n	8003544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003514:	4013      	ands	r3, r2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800351a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800351c:	4293      	cmp	r3, r2
 800351e:	d111      	bne.n	8003544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352a:	085b      	lsrs	r3, r3, #1
 800352c:	3b01      	subs	r3, #1
 800352e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003530:	429a      	cmp	r2, r3
 8003532:	d107      	bne.n	8003544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003540:	429a      	cmp	r2, r3
 8003542:	d001      	beq.n	8003548 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40023800 	.word	0x40023800

08003558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0cc      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800356c:	4b68      	ldr	r3, [pc, #416]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 030f 	and.w	r3, r3, #15
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d90c      	bls.n	8003594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357a:	4b65      	ldr	r3, [pc, #404]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003582:	4b63      	ldr	r3, [pc, #396]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d001      	beq.n	8003594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0b8      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d020      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035ac:	4b59      	ldr	r3, [pc, #356]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4a58      	ldr	r2, [pc, #352]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035c4:	4b53      	ldr	r3, [pc, #332]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	4a52      	ldr	r2, [pc, #328]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d0:	4b50      	ldr	r3, [pc, #320]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	494d      	ldr	r1, [pc, #308]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d044      	beq.n	8003678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d107      	bne.n	8003606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f6:	4b47      	ldr	r3, [pc, #284]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d119      	bne.n	8003636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e07f      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b02      	cmp	r3, #2
 800360c:	d003      	beq.n	8003616 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003612:	2b03      	cmp	r3, #3
 8003614:	d107      	bne.n	8003626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003616:	4b3f      	ldr	r3, [pc, #252]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d109      	bne.n	8003636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e06f      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003626:	4b3b      	ldr	r3, [pc, #236]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e067      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003636:	4b37      	ldr	r3, [pc, #220]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f023 0203 	bic.w	r2, r3, #3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	4934      	ldr	r1, [pc, #208]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 8003644:	4313      	orrs	r3, r2
 8003646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003648:	f7fe f9de 	bl	8001a08 <HAL_GetTick>
 800364c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364e:	e00a      	b.n	8003666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003650:	f7fe f9da 	bl	8001a08 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	f241 3288 	movw	r2, #5000	; 0x1388
 800365e:	4293      	cmp	r3, r2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e04f      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003666:	4b2b      	ldr	r3, [pc, #172]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 020c 	and.w	r2, r3, #12
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	429a      	cmp	r2, r3
 8003676:	d1eb      	bne.n	8003650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003678:	4b25      	ldr	r3, [pc, #148]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 030f 	and.w	r3, r3, #15
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d20c      	bcs.n	80036a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003686:	4b22      	ldr	r3, [pc, #136]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800368e:	4b20      	ldr	r3, [pc, #128]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d001      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e032      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036ac:	4b19      	ldr	r3, [pc, #100]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	4916      	ldr	r1, [pc, #88]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d009      	beq.n	80036de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ca:	4b12      	ldr	r3, [pc, #72]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	490e      	ldr	r1, [pc, #56]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036de:	f000 f821 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 80036e2:	4602      	mov	r2, r0
 80036e4:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	091b      	lsrs	r3, r3, #4
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	490a      	ldr	r1, [pc, #40]	; (8003718 <HAL_RCC_ClockConfig+0x1c0>)
 80036f0:	5ccb      	ldrb	r3, [r1, r3]
 80036f2:	fa22 f303 	lsr.w	r3, r2, r3
 80036f6:	4a09      	ldr	r2, [pc, #36]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80036f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036fa:	4b09      	ldr	r3, [pc, #36]	; (8003720 <HAL_RCC_ClockConfig+0x1c8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fe f93e 	bl	8001980 <HAL_InitTick>

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40023c00 	.word	0x40023c00
 8003714:	40023800 	.word	0x40023800
 8003718:	080050ac 	.word	0x080050ac
 800371c:	20000000 	.word	0x20000000
 8003720:	20000004 	.word	0x20000004

08003724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003728:	b094      	sub	sp, #80	; 0x50
 800372a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	647b      	str	r3, [r7, #68]	; 0x44
 8003730:	2300      	movs	r3, #0
 8003732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003734:	2300      	movs	r3, #0
 8003736:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800373c:	4b79      	ldr	r3, [pc, #484]	; (8003924 <HAL_RCC_GetSysClockFreq+0x200>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 030c 	and.w	r3, r3, #12
 8003744:	2b08      	cmp	r3, #8
 8003746:	d00d      	beq.n	8003764 <HAL_RCC_GetSysClockFreq+0x40>
 8003748:	2b08      	cmp	r3, #8
 800374a:	f200 80e1 	bhi.w	8003910 <HAL_RCC_GetSysClockFreq+0x1ec>
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_RCC_GetSysClockFreq+0x34>
 8003752:	2b04      	cmp	r3, #4
 8003754:	d003      	beq.n	800375e <HAL_RCC_GetSysClockFreq+0x3a>
 8003756:	e0db      	b.n	8003910 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003758:	4b73      	ldr	r3, [pc, #460]	; (8003928 <HAL_RCC_GetSysClockFreq+0x204>)
 800375a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800375c:	e0db      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800375e:	4b73      	ldr	r3, [pc, #460]	; (800392c <HAL_RCC_GetSysClockFreq+0x208>)
 8003760:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003762:	e0d8      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003764:	4b6f      	ldr	r3, [pc, #444]	; (8003924 <HAL_RCC_GetSysClockFreq+0x200>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800376c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800376e:	4b6d      	ldr	r3, [pc, #436]	; (8003924 <HAL_RCC_GetSysClockFreq+0x200>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d063      	beq.n	8003842 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800377a:	4b6a      	ldr	r3, [pc, #424]	; (8003924 <HAL_RCC_GetSysClockFreq+0x200>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	099b      	lsrs	r3, r3, #6
 8003780:	2200      	movs	r2, #0
 8003782:	63bb      	str	r3, [r7, #56]	; 0x38
 8003784:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800378c:	633b      	str	r3, [r7, #48]	; 0x30
 800378e:	2300      	movs	r3, #0
 8003790:	637b      	str	r3, [r7, #52]	; 0x34
 8003792:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003796:	4622      	mov	r2, r4
 8003798:	462b      	mov	r3, r5
 800379a:	f04f 0000 	mov.w	r0, #0
 800379e:	f04f 0100 	mov.w	r1, #0
 80037a2:	0159      	lsls	r1, r3, #5
 80037a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037a8:	0150      	lsls	r0, r2, #5
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4621      	mov	r1, r4
 80037b0:	1a51      	subs	r1, r2, r1
 80037b2:	6139      	str	r1, [r7, #16]
 80037b4:	4629      	mov	r1, r5
 80037b6:	eb63 0301 	sbc.w	r3, r3, r1
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037c8:	4659      	mov	r1, fp
 80037ca:	018b      	lsls	r3, r1, #6
 80037cc:	4651      	mov	r1, sl
 80037ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037d2:	4651      	mov	r1, sl
 80037d4:	018a      	lsls	r2, r1, #6
 80037d6:	4651      	mov	r1, sl
 80037d8:	ebb2 0801 	subs.w	r8, r2, r1
 80037dc:	4659      	mov	r1, fp
 80037de:	eb63 0901 	sbc.w	r9, r3, r1
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	f04f 0300 	mov.w	r3, #0
 80037ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037f6:	4690      	mov	r8, r2
 80037f8:	4699      	mov	r9, r3
 80037fa:	4623      	mov	r3, r4
 80037fc:	eb18 0303 	adds.w	r3, r8, r3
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	462b      	mov	r3, r5
 8003804:	eb49 0303 	adc.w	r3, r9, r3
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003816:	4629      	mov	r1, r5
 8003818:	024b      	lsls	r3, r1, #9
 800381a:	4621      	mov	r1, r4
 800381c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003820:	4621      	mov	r1, r4
 8003822:	024a      	lsls	r2, r1, #9
 8003824:	4610      	mov	r0, r2
 8003826:	4619      	mov	r1, r3
 8003828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800382a:	2200      	movs	r2, #0
 800382c:	62bb      	str	r3, [r7, #40]	; 0x28
 800382e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003830:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003834:	f7fd f952 	bl	8000adc <__aeabi_uldivmod>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4613      	mov	r3, r2
 800383e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003840:	e058      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003842:	4b38      	ldr	r3, [pc, #224]	; (8003924 <HAL_RCC_GetSysClockFreq+0x200>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	099b      	lsrs	r3, r3, #6
 8003848:	2200      	movs	r2, #0
 800384a:	4618      	mov	r0, r3
 800384c:	4611      	mov	r1, r2
 800384e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003852:	623b      	str	r3, [r7, #32]
 8003854:	2300      	movs	r3, #0
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
 8003858:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800385c:	4642      	mov	r2, r8
 800385e:	464b      	mov	r3, r9
 8003860:	f04f 0000 	mov.w	r0, #0
 8003864:	f04f 0100 	mov.w	r1, #0
 8003868:	0159      	lsls	r1, r3, #5
 800386a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800386e:	0150      	lsls	r0, r2, #5
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4641      	mov	r1, r8
 8003876:	ebb2 0a01 	subs.w	sl, r2, r1
 800387a:	4649      	mov	r1, r9
 800387c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800388c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003890:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003894:	ebb2 040a 	subs.w	r4, r2, sl
 8003898:	eb63 050b 	sbc.w	r5, r3, fp
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	00eb      	lsls	r3, r5, #3
 80038a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038aa:	00e2      	lsls	r2, r4, #3
 80038ac:	4614      	mov	r4, r2
 80038ae:	461d      	mov	r5, r3
 80038b0:	4643      	mov	r3, r8
 80038b2:	18e3      	adds	r3, r4, r3
 80038b4:	603b      	str	r3, [r7, #0]
 80038b6:	464b      	mov	r3, r9
 80038b8:	eb45 0303 	adc.w	r3, r5, r3
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038ca:	4629      	mov	r1, r5
 80038cc:	028b      	lsls	r3, r1, #10
 80038ce:	4621      	mov	r1, r4
 80038d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038d4:	4621      	mov	r1, r4
 80038d6:	028a      	lsls	r2, r1, #10
 80038d8:	4610      	mov	r0, r2
 80038da:	4619      	mov	r1, r3
 80038dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038de:	2200      	movs	r2, #0
 80038e0:	61bb      	str	r3, [r7, #24]
 80038e2:	61fa      	str	r2, [r7, #28]
 80038e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038e8:	f7fd f8f8 	bl	8000adc <__aeabi_uldivmod>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4613      	mov	r3, r2
 80038f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038f4:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <HAL_RCC_GetSysClockFreq+0x200>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	0c1b      	lsrs	r3, r3, #16
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	3301      	adds	r3, #1
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003904:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003908:	fbb2 f3f3 	udiv	r3, r2, r3
 800390c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800390e:	e002      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003910:	4b05      	ldr	r3, [pc, #20]	; (8003928 <HAL_RCC_GetSysClockFreq+0x204>)
 8003912:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003918:	4618      	mov	r0, r3
 800391a:	3750      	adds	r7, #80	; 0x50
 800391c:	46bd      	mov	sp, r7
 800391e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003922:	bf00      	nop
 8003924:	40023800 	.word	0x40023800
 8003928:	00f42400 	.word	0x00f42400
 800392c:	007a1200 	.word	0x007a1200

08003930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003934:	4b03      	ldr	r3, [pc, #12]	; (8003944 <HAL_RCC_GetHCLKFreq+0x14>)
 8003936:	681b      	ldr	r3, [r3, #0]
}
 8003938:	4618      	mov	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	20000000 	.word	0x20000000

08003948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800394c:	f7ff fff0 	bl	8003930 <HAL_RCC_GetHCLKFreq>
 8003950:	4602      	mov	r2, r0
 8003952:	4b05      	ldr	r3, [pc, #20]	; (8003968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	0a9b      	lsrs	r3, r3, #10
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	4903      	ldr	r1, [pc, #12]	; (800396c <HAL_RCC_GetPCLK1Freq+0x24>)
 800395e:	5ccb      	ldrb	r3, [r1, r3]
 8003960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003964:	4618      	mov	r0, r3
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40023800 	.word	0x40023800
 800396c:	080050bc 	.word	0x080050bc

08003970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003974:	f7ff ffdc 	bl	8003930 <HAL_RCC_GetHCLKFreq>
 8003978:	4602      	mov	r2, r0
 800397a:	4b05      	ldr	r3, [pc, #20]	; (8003990 <HAL_RCC_GetPCLK2Freq+0x20>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	0b5b      	lsrs	r3, r3, #13
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	4903      	ldr	r1, [pc, #12]	; (8003994 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003986:	5ccb      	ldrb	r3, [r1, r3]
 8003988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800398c:	4618      	mov	r0, r3
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40023800 	.word	0x40023800
 8003994:	080050bc 	.word	0x080050bc

08003998 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e03f      	b.n	8003a2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fd fe7e 	bl	80016c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2224      	movs	r2, #36	; 0x24
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f929 	bl	8003c34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	691a      	ldr	r2, [r3, #16]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695a      	ldr	r2, [r3, #20]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68da      	ldr	r2, [r3, #12]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b08a      	sub	sp, #40	; 0x28
 8003a36:	af02      	add	r7, sp, #8
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	603b      	str	r3, [r7, #0]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b20      	cmp	r3, #32
 8003a50:	d17c      	bne.n	8003b4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <HAL_UART_Transmit+0x2c>
 8003a58:	88fb      	ldrh	r3, [r7, #6]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e075      	b.n	8003b4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_UART_Transmit+0x3e>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e06e      	b.n	8003b4e <HAL_UART_Transmit+0x11c>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2221      	movs	r2, #33	; 0x21
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a86:	f7fd ffbf 	bl	8001a08 <HAL_GetTick>
 8003a8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	88fa      	ldrh	r2, [r7, #6]
 8003a90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	88fa      	ldrh	r2, [r7, #6]
 8003a96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa0:	d108      	bne.n	8003ab4 <HAL_UART_Transmit+0x82>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d104      	bne.n	8003ab4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	61bb      	str	r3, [r7, #24]
 8003ab2:	e003      	b.n	8003abc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ac4:	e02a      	b.n	8003b1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2200      	movs	r2, #0
 8003ace:	2180      	movs	r1, #128	; 0x80
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 f840 	bl	8003b56 <UART_WaitOnFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e036      	b.n	8003b4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10b      	bne.n	8003afe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003af4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	3302      	adds	r3, #2
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	e007      	b.n	8003b0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	781a      	ldrb	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1cf      	bne.n	8003ac6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	2140      	movs	r1, #64	; 0x40
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 f810 	bl	8003b56 <UART_WaitOnFlagUntilTimeout>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e006      	b.n	8003b4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	e000      	b.n	8003b4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b4c:	2302      	movs	r3, #2
  }
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3720      	adds	r7, #32
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b090      	sub	sp, #64	; 0x40
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	603b      	str	r3, [r7, #0]
 8003b62:	4613      	mov	r3, r2
 8003b64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b66:	e050      	b.n	8003c0a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6e:	d04c      	beq.n	8003c0a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d007      	beq.n	8003b86 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b76:	f7fd ff47 	bl	8001a08 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d241      	bcs.n	8003c0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	330c      	adds	r3, #12
 8003b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b90:	e853 3f00 	ldrex	r3, [r3]
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	330c      	adds	r3, #12
 8003ba4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ba6:	637a      	str	r2, [r7, #52]	; 0x34
 8003ba8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003baa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bae:	e841 2300 	strex	r3, r2, [r1]
 8003bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1e5      	bne.n	8003b86 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	3314      	adds	r3, #20
 8003bc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	e853 3f00 	ldrex	r3, [r3]
 8003bc8:	613b      	str	r3, [r7, #16]
   return(result);
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	f023 0301 	bic.w	r3, r3, #1
 8003bd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3314      	adds	r3, #20
 8003bd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bda:	623a      	str	r2, [r7, #32]
 8003bdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bde:	69f9      	ldr	r1, [r7, #28]
 8003be0:	6a3a      	ldr	r2, [r7, #32]
 8003be2:	e841 2300 	strex	r3, r2, [r1]
 8003be6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1e5      	bne.n	8003bba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e00f      	b.n	8003c2a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4013      	ands	r3, r2
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	bf0c      	ite	eq
 8003c1a:	2301      	moveq	r3, #1
 8003c1c:	2300      	movne	r3, #0
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	461a      	mov	r2, r3
 8003c22:	79fb      	ldrb	r3, [r7, #7]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d09f      	beq.n	8003b68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3740      	adds	r7, #64	; 0x40
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c38:	b0c0      	sub	sp, #256	; 0x100
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c50:	68d9      	ldr	r1, [r3, #12]
 8003c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	ea40 0301 	orr.w	r3, r0, r1
 8003c5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	431a      	orrs	r2, r3
 8003c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c8c:	f021 010c 	bic.w	r1, r1, #12
 8003c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c9a:	430b      	orrs	r3, r1
 8003c9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cae:	6999      	ldr	r1, [r3, #24]
 8003cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	ea40 0301 	orr.w	r3, r0, r1
 8003cba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	4b8f      	ldr	r3, [pc, #572]	; (8003f00 <UART_SetConfig+0x2cc>)
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d005      	beq.n	8003cd4 <UART_SetConfig+0xa0>
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	4b8d      	ldr	r3, [pc, #564]	; (8003f04 <UART_SetConfig+0x2d0>)
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d104      	bne.n	8003cde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cd4:	f7ff fe4c 	bl	8003970 <HAL_RCC_GetPCLK2Freq>
 8003cd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003cdc:	e003      	b.n	8003ce6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cde:	f7ff fe33 	bl	8003948 <HAL_RCC_GetPCLK1Freq>
 8003ce2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf0:	f040 810c 	bne.w	8003f0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003cfe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d06:	4622      	mov	r2, r4
 8003d08:	462b      	mov	r3, r5
 8003d0a:	1891      	adds	r1, r2, r2
 8003d0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d0e:	415b      	adcs	r3, r3
 8003d10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d16:	4621      	mov	r1, r4
 8003d18:	eb12 0801 	adds.w	r8, r2, r1
 8003d1c:	4629      	mov	r1, r5
 8003d1e:	eb43 0901 	adc.w	r9, r3, r1
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d36:	4690      	mov	r8, r2
 8003d38:	4699      	mov	r9, r3
 8003d3a:	4623      	mov	r3, r4
 8003d3c:	eb18 0303 	adds.w	r3, r8, r3
 8003d40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d44:	462b      	mov	r3, r5
 8003d46:	eb49 0303 	adc.w	r3, r9, r3
 8003d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d62:	460b      	mov	r3, r1
 8003d64:	18db      	adds	r3, r3, r3
 8003d66:	653b      	str	r3, [r7, #80]	; 0x50
 8003d68:	4613      	mov	r3, r2
 8003d6a:	eb42 0303 	adc.w	r3, r2, r3
 8003d6e:	657b      	str	r3, [r7, #84]	; 0x54
 8003d70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d78:	f7fc feb0 	bl	8000adc <__aeabi_uldivmod>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4b61      	ldr	r3, [pc, #388]	; (8003f08 <UART_SetConfig+0x2d4>)
 8003d82:	fba3 2302 	umull	r2, r3, r3, r2
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	011c      	lsls	r4, r3, #4
 8003d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d9c:	4642      	mov	r2, r8
 8003d9e:	464b      	mov	r3, r9
 8003da0:	1891      	adds	r1, r2, r2
 8003da2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003da4:	415b      	adcs	r3, r3
 8003da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003da8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003dac:	4641      	mov	r1, r8
 8003dae:	eb12 0a01 	adds.w	sl, r2, r1
 8003db2:	4649      	mov	r1, r9
 8003db4:	eb43 0b01 	adc.w	fp, r3, r1
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003dc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003dc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dcc:	4692      	mov	sl, r2
 8003dce:	469b      	mov	fp, r3
 8003dd0:	4643      	mov	r3, r8
 8003dd2:	eb1a 0303 	adds.w	r3, sl, r3
 8003dd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dda:	464b      	mov	r3, r9
 8003ddc:	eb4b 0303 	adc.w	r3, fp, r3
 8003de0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003df0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003df4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	18db      	adds	r3, r3, r3
 8003dfc:	643b      	str	r3, [r7, #64]	; 0x40
 8003dfe:	4613      	mov	r3, r2
 8003e00:	eb42 0303 	adc.w	r3, r2, r3
 8003e04:	647b      	str	r3, [r7, #68]	; 0x44
 8003e06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e0e:	f7fc fe65 	bl	8000adc <__aeabi_uldivmod>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	4611      	mov	r1, r2
 8003e18:	4b3b      	ldr	r3, [pc, #236]	; (8003f08 <UART_SetConfig+0x2d4>)
 8003e1a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	2264      	movs	r2, #100	; 0x64
 8003e22:	fb02 f303 	mul.w	r3, r2, r3
 8003e26:	1acb      	subs	r3, r1, r3
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e2e:	4b36      	ldr	r3, [pc, #216]	; (8003f08 <UART_SetConfig+0x2d4>)
 8003e30:	fba3 2302 	umull	r2, r3, r3, r2
 8003e34:	095b      	lsrs	r3, r3, #5
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e3c:	441c      	add	r4, r3
 8003e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e50:	4642      	mov	r2, r8
 8003e52:	464b      	mov	r3, r9
 8003e54:	1891      	adds	r1, r2, r2
 8003e56:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e58:	415b      	adcs	r3, r3
 8003e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e60:	4641      	mov	r1, r8
 8003e62:	1851      	adds	r1, r2, r1
 8003e64:	6339      	str	r1, [r7, #48]	; 0x30
 8003e66:	4649      	mov	r1, r9
 8003e68:	414b      	adcs	r3, r1
 8003e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e78:	4659      	mov	r1, fp
 8003e7a:	00cb      	lsls	r3, r1, #3
 8003e7c:	4651      	mov	r1, sl
 8003e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e82:	4651      	mov	r1, sl
 8003e84:	00ca      	lsls	r2, r1, #3
 8003e86:	4610      	mov	r0, r2
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	4642      	mov	r2, r8
 8003e8e:	189b      	adds	r3, r3, r2
 8003e90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e94:	464b      	mov	r3, r9
 8003e96:	460a      	mov	r2, r1
 8003e98:	eb42 0303 	adc.w	r3, r2, r3
 8003e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003eac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003eb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	18db      	adds	r3, r3, r3
 8003eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eba:	4613      	mov	r3, r2
 8003ebc:	eb42 0303 	adc.w	r3, r2, r3
 8003ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ec2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ec6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003eca:	f7fc fe07 	bl	8000adc <__aeabi_uldivmod>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4b0d      	ldr	r3, [pc, #52]	; (8003f08 <UART_SetConfig+0x2d4>)
 8003ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	2164      	movs	r1, #100	; 0x64
 8003edc:	fb01 f303 	mul.w	r3, r1, r3
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	3332      	adds	r3, #50	; 0x32
 8003ee6:	4a08      	ldr	r2, [pc, #32]	; (8003f08 <UART_SetConfig+0x2d4>)
 8003ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	f003 0207 	and.w	r2, r3, #7
 8003ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4422      	add	r2, r4
 8003efa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003efc:	e106      	b.n	800410c <UART_SetConfig+0x4d8>
 8003efe:	bf00      	nop
 8003f00:	40011000 	.word	0x40011000
 8003f04:	40011400 	.word	0x40011400
 8003f08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f10:	2200      	movs	r2, #0
 8003f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f1e:	4642      	mov	r2, r8
 8003f20:	464b      	mov	r3, r9
 8003f22:	1891      	adds	r1, r2, r2
 8003f24:	6239      	str	r1, [r7, #32]
 8003f26:	415b      	adcs	r3, r3
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f2e:	4641      	mov	r1, r8
 8003f30:	1854      	adds	r4, r2, r1
 8003f32:	4649      	mov	r1, r9
 8003f34:	eb43 0501 	adc.w	r5, r3, r1
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	00eb      	lsls	r3, r5, #3
 8003f42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f46:	00e2      	lsls	r2, r4, #3
 8003f48:	4614      	mov	r4, r2
 8003f4a:	461d      	mov	r5, r3
 8003f4c:	4643      	mov	r3, r8
 8003f4e:	18e3      	adds	r3, r4, r3
 8003f50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f54:	464b      	mov	r3, r9
 8003f56:	eb45 0303 	adc.w	r3, r5, r3
 8003f5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	008b      	lsls	r3, r1, #2
 8003f7e:	4621      	mov	r1, r4
 8003f80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f84:	4621      	mov	r1, r4
 8003f86:	008a      	lsls	r2, r1, #2
 8003f88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f8c:	f7fc fda6 	bl	8000adc <__aeabi_uldivmod>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4b60      	ldr	r3, [pc, #384]	; (8004118 <UART_SetConfig+0x4e4>)
 8003f96:	fba3 2302 	umull	r2, r3, r3, r2
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	011c      	lsls	r4, r3, #4
 8003f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003fa8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003fac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003fb0:	4642      	mov	r2, r8
 8003fb2:	464b      	mov	r3, r9
 8003fb4:	1891      	adds	r1, r2, r2
 8003fb6:	61b9      	str	r1, [r7, #24]
 8003fb8:	415b      	adcs	r3, r3
 8003fba:	61fb      	str	r3, [r7, #28]
 8003fbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fc0:	4641      	mov	r1, r8
 8003fc2:	1851      	adds	r1, r2, r1
 8003fc4:	6139      	str	r1, [r7, #16]
 8003fc6:	4649      	mov	r1, r9
 8003fc8:	414b      	adcs	r3, r1
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fd8:	4659      	mov	r1, fp
 8003fda:	00cb      	lsls	r3, r1, #3
 8003fdc:	4651      	mov	r1, sl
 8003fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fe2:	4651      	mov	r1, sl
 8003fe4:	00ca      	lsls	r2, r1, #3
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4603      	mov	r3, r0
 8003fec:	4642      	mov	r2, r8
 8003fee:	189b      	adds	r3, r3, r2
 8003ff0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ff4:	464b      	mov	r3, r9
 8003ff6:	460a      	mov	r2, r1
 8003ff8:	eb42 0303 	adc.w	r3, r2, r3
 8003ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	67bb      	str	r3, [r7, #120]	; 0x78
 800400a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800400c:	f04f 0200 	mov.w	r2, #0
 8004010:	f04f 0300 	mov.w	r3, #0
 8004014:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004018:	4649      	mov	r1, r9
 800401a:	008b      	lsls	r3, r1, #2
 800401c:	4641      	mov	r1, r8
 800401e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004022:	4641      	mov	r1, r8
 8004024:	008a      	lsls	r2, r1, #2
 8004026:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800402a:	f7fc fd57 	bl	8000adc <__aeabi_uldivmod>
 800402e:	4602      	mov	r2, r0
 8004030:	460b      	mov	r3, r1
 8004032:	4611      	mov	r1, r2
 8004034:	4b38      	ldr	r3, [pc, #224]	; (8004118 <UART_SetConfig+0x4e4>)
 8004036:	fba3 2301 	umull	r2, r3, r3, r1
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	2264      	movs	r2, #100	; 0x64
 800403e:	fb02 f303 	mul.w	r3, r2, r3
 8004042:	1acb      	subs	r3, r1, r3
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	3332      	adds	r3, #50	; 0x32
 8004048:	4a33      	ldr	r2, [pc, #204]	; (8004118 <UART_SetConfig+0x4e4>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004054:	441c      	add	r4, r3
 8004056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800405a:	2200      	movs	r2, #0
 800405c:	673b      	str	r3, [r7, #112]	; 0x70
 800405e:	677a      	str	r2, [r7, #116]	; 0x74
 8004060:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004064:	4642      	mov	r2, r8
 8004066:	464b      	mov	r3, r9
 8004068:	1891      	adds	r1, r2, r2
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	415b      	adcs	r3, r3
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004074:	4641      	mov	r1, r8
 8004076:	1851      	adds	r1, r2, r1
 8004078:	6039      	str	r1, [r7, #0]
 800407a:	4649      	mov	r1, r9
 800407c:	414b      	adcs	r3, r1
 800407e:	607b      	str	r3, [r7, #4]
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800408c:	4659      	mov	r1, fp
 800408e:	00cb      	lsls	r3, r1, #3
 8004090:	4651      	mov	r1, sl
 8004092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004096:	4651      	mov	r1, sl
 8004098:	00ca      	lsls	r2, r1, #3
 800409a:	4610      	mov	r0, r2
 800409c:	4619      	mov	r1, r3
 800409e:	4603      	mov	r3, r0
 80040a0:	4642      	mov	r2, r8
 80040a2:	189b      	adds	r3, r3, r2
 80040a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80040a6:	464b      	mov	r3, r9
 80040a8:	460a      	mov	r2, r1
 80040aa:	eb42 0303 	adc.w	r3, r2, r3
 80040ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	663b      	str	r3, [r7, #96]	; 0x60
 80040ba:	667a      	str	r2, [r7, #100]	; 0x64
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80040c8:	4649      	mov	r1, r9
 80040ca:	008b      	lsls	r3, r1, #2
 80040cc:	4641      	mov	r1, r8
 80040ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040d2:	4641      	mov	r1, r8
 80040d4:	008a      	lsls	r2, r1, #2
 80040d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80040da:	f7fc fcff 	bl	8000adc <__aeabi_uldivmod>
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <UART_SetConfig+0x4e4>)
 80040e4:	fba3 1302 	umull	r1, r3, r3, r2
 80040e8:	095b      	lsrs	r3, r3, #5
 80040ea:	2164      	movs	r1, #100	; 0x64
 80040ec:	fb01 f303 	mul.w	r3, r1, r3
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	011b      	lsls	r3, r3, #4
 80040f4:	3332      	adds	r3, #50	; 0x32
 80040f6:	4a08      	ldr	r2, [pc, #32]	; (8004118 <UART_SetConfig+0x4e4>)
 80040f8:	fba2 2303 	umull	r2, r3, r2, r3
 80040fc:	095b      	lsrs	r3, r3, #5
 80040fe:	f003 020f 	and.w	r2, r3, #15
 8004102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4422      	add	r2, r4
 800410a:	609a      	str	r2, [r3, #8]
}
 800410c:	bf00      	nop
 800410e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004112:	46bd      	mov	sp, r7
 8004114:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004118:	51eb851f 	.word	0x51eb851f

0800411c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800411c:	b084      	sub	sp, #16
 800411e:	b580      	push	{r7, lr}
 8004120:	b084      	sub	sp, #16
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	f107 001c 	add.w	r0, r7, #28
 800412a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800412e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004130:	2b01      	cmp	r3, #1
 8004132:	d122      	bne.n	800417a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004138:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800415c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800415e:	2b01      	cmp	r3, #1
 8004160:	d105      	bne.n	800416e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 faa2 	bl	80046b8 <USB_CoreReset>
 8004174:	4603      	mov	r3, r0
 8004176:	73fb      	strb	r3, [r7, #15]
 8004178:	e01a      	b.n	80041b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 fa96 	bl	80046b8 <USB_CoreReset>
 800418c:	4603      	mov	r3, r0
 800418e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	d106      	bne.n	80041a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	639a      	str	r2, [r3, #56]	; 0x38
 80041a2:	e005      	b.n	80041b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80041b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d10b      	bne.n	80041ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f043 0206 	orr.w	r2, r3, #6
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f043 0220 	orr.w	r2, r3, #32
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041da:	b004      	add	sp, #16
 80041dc:	4770      	bx	lr

080041de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f023 0201 	bic.w	r2, r3, #1
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	460b      	mov	r3, r1
 800420a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800421c:	78fb      	ldrb	r3, [r7, #3]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d115      	bne.n	800424e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800422e:	2001      	movs	r0, #1
 8004230:	f7fd fbf6 	bl	8001a20 <HAL_Delay>
      ms++;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	3301      	adds	r3, #1
 8004238:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fa2e 	bl	800469c <USB_GetMode>
 8004240:	4603      	mov	r3, r0
 8004242:	2b01      	cmp	r3, #1
 8004244:	d01e      	beq.n	8004284 <USB_SetCurrentMode+0x84>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b31      	cmp	r3, #49	; 0x31
 800424a:	d9f0      	bls.n	800422e <USB_SetCurrentMode+0x2e>
 800424c:	e01a      	b.n	8004284 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800424e:	78fb      	ldrb	r3, [r7, #3]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d115      	bne.n	8004280 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004260:	2001      	movs	r0, #1
 8004262:	f7fd fbdd 	bl	8001a20 <HAL_Delay>
      ms++;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	3301      	adds	r3, #1
 800426a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fa15 	bl	800469c <USB_GetMode>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <USB_SetCurrentMode+0x84>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b31      	cmp	r3, #49	; 0x31
 800427c:	d9f0      	bls.n	8004260 <USB_SetCurrentMode+0x60>
 800427e:	e001      	b.n	8004284 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e005      	b.n	8004290 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b32      	cmp	r3, #50	; 0x32
 8004288:	d101      	bne.n	800428e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e000      	b.n	8004290 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004298:	b084      	sub	sp, #16
 800429a:	b580      	push	{r7, lr}
 800429c:	b086      	sub	sp, #24
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80042a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80042b2:	2300      	movs	r3, #0
 80042b4:	613b      	str	r3, [r7, #16]
 80042b6:	e009      	b.n	80042cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	3340      	adds	r3, #64	; 0x40
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	2200      	movs	r2, #0
 80042c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	3301      	adds	r3, #1
 80042ca:	613b      	str	r3, [r7, #16]
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	2b0e      	cmp	r3, #14
 80042d0:	d9f2      	bls.n	80042b8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80042d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d11c      	bne.n	8004312 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042e6:	f043 0302 	orr.w	r3, r3, #2
 80042ea:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	639a      	str	r2, [r3, #56]	; 0x38
 8004310:	e00b      	b.n	800432a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004316:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004322:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004330:	461a      	mov	r2, r3
 8004332:	2300      	movs	r3, #0
 8004334:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800433c:	4619      	mov	r1, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004344:	461a      	mov	r2, r3
 8004346:	680b      	ldr	r3, [r1, #0]
 8004348:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800434a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434c:	2b01      	cmp	r3, #1
 800434e:	d10c      	bne.n	800436a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004352:	2b00      	cmp	r3, #0
 8004354:	d104      	bne.n	8004360 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004356:	2100      	movs	r1, #0
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f965 	bl	8004628 <USB_SetDevSpeed>
 800435e:	e008      	b.n	8004372 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004360:	2101      	movs	r1, #1
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f960 	bl	8004628 <USB_SetDevSpeed>
 8004368:	e003      	b.n	8004372 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800436a:	2103      	movs	r1, #3
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f95b 	bl	8004628 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004372:	2110      	movs	r1, #16
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f8f3 	bl	8004560 <USB_FlushTxFifo>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f91f 	bl	80045c8 <USB_FlushRxFifo>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800439a:	461a      	mov	r2, r3
 800439c:	2300      	movs	r3, #0
 800439e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a6:	461a      	mov	r2, r3
 80043a8:	2300      	movs	r3, #0
 80043aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b2:	461a      	mov	r2, r3
 80043b4:	2300      	movs	r3, #0
 80043b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043b8:	2300      	movs	r3, #0
 80043ba:	613b      	str	r3, [r7, #16]
 80043bc:	e043      	b.n	8004446 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043d4:	d118      	bne.n	8004408 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10a      	bne.n	80043f2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e8:	461a      	mov	r2, r3
 80043ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	e013      	b.n	800441a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043fe:	461a      	mov	r2, r3
 8004400:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	e008      	b.n	800441a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4413      	add	r3, r2
 8004410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004414:	461a      	mov	r2, r3
 8004416:	2300      	movs	r3, #0
 8004418:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004426:	461a      	mov	r2, r3
 8004428:	2300      	movs	r3, #0
 800442a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004438:	461a      	mov	r2, r3
 800443a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800443e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	3301      	adds	r3, #1
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	429a      	cmp	r2, r3
 800444c:	d3b7      	bcc.n	80043be <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800444e:	2300      	movs	r3, #0
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	e043      	b.n	80044dc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4413      	add	r3, r2
 800445c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004466:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800446a:	d118      	bne.n	800449e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10a      	bne.n	8004488 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4413      	add	r3, r2
 800447a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447e:	461a      	mov	r2, r3
 8004480:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	e013      	b.n	80044b0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004494:	461a      	mov	r2, r3
 8004496:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	e008      	b.n	80044b0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044aa:	461a      	mov	r2, r3
 80044ac:	2300      	movs	r3, #0
 80044ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044bc:	461a      	mov	r2, r3
 80044be:	2300      	movs	r3, #0
 80044c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ce:	461a      	mov	r2, r3
 80044d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	3301      	adds	r3, #1
 80044da:	613b      	str	r3, [r7, #16]
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d3b7      	bcc.n	8004454 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004504:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	2b00      	cmp	r3, #0
 800450a:	d105      	bne.n	8004518 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	f043 0210 	orr.w	r2, r3, #16
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699a      	ldr	r2, [r3, #24]
 800451c:	4b0f      	ldr	r3, [pc, #60]	; (800455c <USB_DevInit+0x2c4>)
 800451e:	4313      	orrs	r3, r2
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	f043 0208 	orr.w	r2, r3, #8
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004538:	2b01      	cmp	r3, #1
 800453a:	d107      	bne.n	800454c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004544:	f043 0304 	orr.w	r3, r3, #4
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800454c:	7dfb      	ldrb	r3, [r7, #23]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004558:	b004      	add	sp, #16
 800455a:	4770      	bx	lr
 800455c:	803c3800 	.word	0x803c3800

08004560 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	3301      	adds	r3, #1
 8004572:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4a13      	ldr	r2, [pc, #76]	; (80045c4 <USB_FlushTxFifo+0x64>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d901      	bls.n	8004580 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e01b      	b.n	80045b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	daf2      	bge.n	800456e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	019b      	lsls	r3, r3, #6
 8004590:	f043 0220 	orr.w	r2, r3, #32
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	3301      	adds	r3, #1
 800459c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4a08      	ldr	r2, [pc, #32]	; (80045c4 <USB_FlushTxFifo+0x64>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d901      	bls.n	80045aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e006      	b.n	80045b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f003 0320 	and.w	r3, r3, #32
 80045b2:	2b20      	cmp	r3, #32
 80045b4:	d0f0      	beq.n	8004598 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	00030d40 	.word	0x00030d40

080045c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	3301      	adds	r3, #1
 80045d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4a11      	ldr	r2, [pc, #68]	; (8004624 <USB_FlushRxFifo+0x5c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d901      	bls.n	80045e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e018      	b.n	8004618 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	daf2      	bge.n	80045d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2210      	movs	r2, #16
 80045f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	3301      	adds	r3, #1
 80045fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4a08      	ldr	r2, [pc, #32]	; (8004624 <USB_FlushRxFifo+0x5c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d901      	bls.n	800460a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e006      	b.n	8004618 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0310 	and.w	r3, r3, #16
 8004612:	2b10      	cmp	r3, #16
 8004614:	d0f0      	beq.n	80045f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	00030d40 	.word	0x00030d40

08004628 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	460b      	mov	r3, r1
 8004632:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	78fb      	ldrb	r3, [r7, #3]
 8004642:	68f9      	ldr	r1, [r7, #12]
 8004644:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004648:	4313      	orrs	r3, r2
 800464a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800465a:	b480      	push	{r7}
 800465c:	b085      	sub	sp, #20
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004674:	f023 0303 	bic.w	r3, r3, #3
 8004678:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004688:	f043 0302 	orr.w	r3, r3, #2
 800468c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	f003 0301 	and.w	r3, r3, #1
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	3301      	adds	r3, #1
 80046c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4a13      	ldr	r2, [pc, #76]	; (800471c <USB_CoreReset+0x64>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d901      	bls.n	80046d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e01b      	b.n	800470e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	daf2      	bge.n	80046c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f043 0201 	orr.w	r2, r3, #1
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	3301      	adds	r3, #1
 80046f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4a09      	ldr	r2, [pc, #36]	; (800471c <USB_CoreReset+0x64>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d901      	bls.n	8004700 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e006      	b.n	800470e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b01      	cmp	r3, #1
 800470a:	d0f0      	beq.n	80046ee <USB_CoreReset+0x36>

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	00030d40 	.word	0x00030d40

08004720 <siprintf>:
 8004720:	b40e      	push	{r1, r2, r3}
 8004722:	b500      	push	{lr}
 8004724:	b09c      	sub	sp, #112	; 0x70
 8004726:	ab1d      	add	r3, sp, #116	; 0x74
 8004728:	9002      	str	r0, [sp, #8]
 800472a:	9006      	str	r0, [sp, #24]
 800472c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004730:	4809      	ldr	r0, [pc, #36]	; (8004758 <siprintf+0x38>)
 8004732:	9107      	str	r1, [sp, #28]
 8004734:	9104      	str	r1, [sp, #16]
 8004736:	4909      	ldr	r1, [pc, #36]	; (800475c <siprintf+0x3c>)
 8004738:	f853 2b04 	ldr.w	r2, [r3], #4
 800473c:	9105      	str	r1, [sp, #20]
 800473e:	6800      	ldr	r0, [r0, #0]
 8004740:	9301      	str	r3, [sp, #4]
 8004742:	a902      	add	r1, sp, #8
 8004744:	f000 f9a0 	bl	8004a88 <_svfiprintf_r>
 8004748:	9b02      	ldr	r3, [sp, #8]
 800474a:	2200      	movs	r2, #0
 800474c:	701a      	strb	r2, [r3, #0]
 800474e:	b01c      	add	sp, #112	; 0x70
 8004750:	f85d eb04 	ldr.w	lr, [sp], #4
 8004754:	b003      	add	sp, #12
 8004756:	4770      	bx	lr
 8004758:	20000058 	.word	0x20000058
 800475c:	ffff0208 	.word	0xffff0208

08004760 <memset>:
 8004760:	4402      	add	r2, r0
 8004762:	4603      	mov	r3, r0
 8004764:	4293      	cmp	r3, r2
 8004766:	d100      	bne.n	800476a <memset+0xa>
 8004768:	4770      	bx	lr
 800476a:	f803 1b01 	strb.w	r1, [r3], #1
 800476e:	e7f9      	b.n	8004764 <memset+0x4>

08004770 <__errno>:
 8004770:	4b01      	ldr	r3, [pc, #4]	; (8004778 <__errno+0x8>)
 8004772:	6818      	ldr	r0, [r3, #0]
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	20000058 	.word	0x20000058

0800477c <__libc_init_array>:
 800477c:	b570      	push	{r4, r5, r6, lr}
 800477e:	4d0d      	ldr	r5, [pc, #52]	; (80047b4 <__libc_init_array+0x38>)
 8004780:	4c0d      	ldr	r4, [pc, #52]	; (80047b8 <__libc_init_array+0x3c>)
 8004782:	1b64      	subs	r4, r4, r5
 8004784:	10a4      	asrs	r4, r4, #2
 8004786:	2600      	movs	r6, #0
 8004788:	42a6      	cmp	r6, r4
 800478a:	d109      	bne.n	80047a0 <__libc_init_array+0x24>
 800478c:	4d0b      	ldr	r5, [pc, #44]	; (80047bc <__libc_init_array+0x40>)
 800478e:	4c0c      	ldr	r4, [pc, #48]	; (80047c0 <__libc_init_array+0x44>)
 8004790:	f000 fc6a 	bl	8005068 <_init>
 8004794:	1b64      	subs	r4, r4, r5
 8004796:	10a4      	asrs	r4, r4, #2
 8004798:	2600      	movs	r6, #0
 800479a:	42a6      	cmp	r6, r4
 800479c:	d105      	bne.n	80047aa <__libc_init_array+0x2e>
 800479e:	bd70      	pop	{r4, r5, r6, pc}
 80047a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047a4:	4798      	blx	r3
 80047a6:	3601      	adds	r6, #1
 80047a8:	e7ee      	b.n	8004788 <__libc_init_array+0xc>
 80047aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ae:	4798      	blx	r3
 80047b0:	3601      	adds	r6, #1
 80047b2:	e7f2      	b.n	800479a <__libc_init_array+0x1e>
 80047b4:	08005100 	.word	0x08005100
 80047b8:	08005100 	.word	0x08005100
 80047bc:	08005100 	.word	0x08005100
 80047c0:	08005104 	.word	0x08005104

080047c4 <__retarget_lock_acquire_recursive>:
 80047c4:	4770      	bx	lr

080047c6 <__retarget_lock_release_recursive>:
 80047c6:	4770      	bx	lr

080047c8 <memcpy>:
 80047c8:	440a      	add	r2, r1
 80047ca:	4291      	cmp	r1, r2
 80047cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80047d0:	d100      	bne.n	80047d4 <memcpy+0xc>
 80047d2:	4770      	bx	lr
 80047d4:	b510      	push	{r4, lr}
 80047d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047de:	4291      	cmp	r1, r2
 80047e0:	d1f9      	bne.n	80047d6 <memcpy+0xe>
 80047e2:	bd10      	pop	{r4, pc}

080047e4 <_free_r>:
 80047e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047e6:	2900      	cmp	r1, #0
 80047e8:	d044      	beq.n	8004874 <_free_r+0x90>
 80047ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047ee:	9001      	str	r0, [sp, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f1a1 0404 	sub.w	r4, r1, #4
 80047f6:	bfb8      	it	lt
 80047f8:	18e4      	addlt	r4, r4, r3
 80047fa:	f000 f8df 	bl	80049bc <__malloc_lock>
 80047fe:	4a1e      	ldr	r2, [pc, #120]	; (8004878 <_free_r+0x94>)
 8004800:	9801      	ldr	r0, [sp, #4]
 8004802:	6813      	ldr	r3, [r2, #0]
 8004804:	b933      	cbnz	r3, 8004814 <_free_r+0x30>
 8004806:	6063      	str	r3, [r4, #4]
 8004808:	6014      	str	r4, [r2, #0]
 800480a:	b003      	add	sp, #12
 800480c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004810:	f000 b8da 	b.w	80049c8 <__malloc_unlock>
 8004814:	42a3      	cmp	r3, r4
 8004816:	d908      	bls.n	800482a <_free_r+0x46>
 8004818:	6825      	ldr	r5, [r4, #0]
 800481a:	1961      	adds	r1, r4, r5
 800481c:	428b      	cmp	r3, r1
 800481e:	bf01      	itttt	eq
 8004820:	6819      	ldreq	r1, [r3, #0]
 8004822:	685b      	ldreq	r3, [r3, #4]
 8004824:	1949      	addeq	r1, r1, r5
 8004826:	6021      	streq	r1, [r4, #0]
 8004828:	e7ed      	b.n	8004806 <_free_r+0x22>
 800482a:	461a      	mov	r2, r3
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	b10b      	cbz	r3, 8004834 <_free_r+0x50>
 8004830:	42a3      	cmp	r3, r4
 8004832:	d9fa      	bls.n	800482a <_free_r+0x46>
 8004834:	6811      	ldr	r1, [r2, #0]
 8004836:	1855      	adds	r5, r2, r1
 8004838:	42a5      	cmp	r5, r4
 800483a:	d10b      	bne.n	8004854 <_free_r+0x70>
 800483c:	6824      	ldr	r4, [r4, #0]
 800483e:	4421      	add	r1, r4
 8004840:	1854      	adds	r4, r2, r1
 8004842:	42a3      	cmp	r3, r4
 8004844:	6011      	str	r1, [r2, #0]
 8004846:	d1e0      	bne.n	800480a <_free_r+0x26>
 8004848:	681c      	ldr	r4, [r3, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	6053      	str	r3, [r2, #4]
 800484e:	440c      	add	r4, r1
 8004850:	6014      	str	r4, [r2, #0]
 8004852:	e7da      	b.n	800480a <_free_r+0x26>
 8004854:	d902      	bls.n	800485c <_free_r+0x78>
 8004856:	230c      	movs	r3, #12
 8004858:	6003      	str	r3, [r0, #0]
 800485a:	e7d6      	b.n	800480a <_free_r+0x26>
 800485c:	6825      	ldr	r5, [r4, #0]
 800485e:	1961      	adds	r1, r4, r5
 8004860:	428b      	cmp	r3, r1
 8004862:	bf04      	itt	eq
 8004864:	6819      	ldreq	r1, [r3, #0]
 8004866:	685b      	ldreq	r3, [r3, #4]
 8004868:	6063      	str	r3, [r4, #4]
 800486a:	bf04      	itt	eq
 800486c:	1949      	addeq	r1, r1, r5
 800486e:	6021      	streq	r1, [r4, #0]
 8004870:	6054      	str	r4, [r2, #4]
 8004872:	e7ca      	b.n	800480a <_free_r+0x26>
 8004874:	b003      	add	sp, #12
 8004876:	bd30      	pop	{r4, r5, pc}
 8004878:	20000988 	.word	0x20000988

0800487c <sbrk_aligned>:
 800487c:	b570      	push	{r4, r5, r6, lr}
 800487e:	4e0e      	ldr	r6, [pc, #56]	; (80048b8 <sbrk_aligned+0x3c>)
 8004880:	460c      	mov	r4, r1
 8004882:	6831      	ldr	r1, [r6, #0]
 8004884:	4605      	mov	r5, r0
 8004886:	b911      	cbnz	r1, 800488e <sbrk_aligned+0x12>
 8004888:	f000 fba6 	bl	8004fd8 <_sbrk_r>
 800488c:	6030      	str	r0, [r6, #0]
 800488e:	4621      	mov	r1, r4
 8004890:	4628      	mov	r0, r5
 8004892:	f000 fba1 	bl	8004fd8 <_sbrk_r>
 8004896:	1c43      	adds	r3, r0, #1
 8004898:	d00a      	beq.n	80048b0 <sbrk_aligned+0x34>
 800489a:	1cc4      	adds	r4, r0, #3
 800489c:	f024 0403 	bic.w	r4, r4, #3
 80048a0:	42a0      	cmp	r0, r4
 80048a2:	d007      	beq.n	80048b4 <sbrk_aligned+0x38>
 80048a4:	1a21      	subs	r1, r4, r0
 80048a6:	4628      	mov	r0, r5
 80048a8:	f000 fb96 	bl	8004fd8 <_sbrk_r>
 80048ac:	3001      	adds	r0, #1
 80048ae:	d101      	bne.n	80048b4 <sbrk_aligned+0x38>
 80048b0:	f04f 34ff 	mov.w	r4, #4294967295
 80048b4:	4620      	mov	r0, r4
 80048b6:	bd70      	pop	{r4, r5, r6, pc}
 80048b8:	2000098c 	.word	0x2000098c

080048bc <_malloc_r>:
 80048bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048c0:	1ccd      	adds	r5, r1, #3
 80048c2:	f025 0503 	bic.w	r5, r5, #3
 80048c6:	3508      	adds	r5, #8
 80048c8:	2d0c      	cmp	r5, #12
 80048ca:	bf38      	it	cc
 80048cc:	250c      	movcc	r5, #12
 80048ce:	2d00      	cmp	r5, #0
 80048d0:	4607      	mov	r7, r0
 80048d2:	db01      	blt.n	80048d8 <_malloc_r+0x1c>
 80048d4:	42a9      	cmp	r1, r5
 80048d6:	d905      	bls.n	80048e4 <_malloc_r+0x28>
 80048d8:	230c      	movs	r3, #12
 80048da:	603b      	str	r3, [r7, #0]
 80048dc:	2600      	movs	r6, #0
 80048de:	4630      	mov	r0, r6
 80048e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80049b8 <_malloc_r+0xfc>
 80048e8:	f000 f868 	bl	80049bc <__malloc_lock>
 80048ec:	f8d8 3000 	ldr.w	r3, [r8]
 80048f0:	461c      	mov	r4, r3
 80048f2:	bb5c      	cbnz	r4, 800494c <_malloc_r+0x90>
 80048f4:	4629      	mov	r1, r5
 80048f6:	4638      	mov	r0, r7
 80048f8:	f7ff ffc0 	bl	800487c <sbrk_aligned>
 80048fc:	1c43      	adds	r3, r0, #1
 80048fe:	4604      	mov	r4, r0
 8004900:	d155      	bne.n	80049ae <_malloc_r+0xf2>
 8004902:	f8d8 4000 	ldr.w	r4, [r8]
 8004906:	4626      	mov	r6, r4
 8004908:	2e00      	cmp	r6, #0
 800490a:	d145      	bne.n	8004998 <_malloc_r+0xdc>
 800490c:	2c00      	cmp	r4, #0
 800490e:	d048      	beq.n	80049a2 <_malloc_r+0xe6>
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	4631      	mov	r1, r6
 8004914:	4638      	mov	r0, r7
 8004916:	eb04 0903 	add.w	r9, r4, r3
 800491a:	f000 fb5d 	bl	8004fd8 <_sbrk_r>
 800491e:	4581      	cmp	r9, r0
 8004920:	d13f      	bne.n	80049a2 <_malloc_r+0xe6>
 8004922:	6821      	ldr	r1, [r4, #0]
 8004924:	1a6d      	subs	r5, r5, r1
 8004926:	4629      	mov	r1, r5
 8004928:	4638      	mov	r0, r7
 800492a:	f7ff ffa7 	bl	800487c <sbrk_aligned>
 800492e:	3001      	adds	r0, #1
 8004930:	d037      	beq.n	80049a2 <_malloc_r+0xe6>
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	442b      	add	r3, r5
 8004936:	6023      	str	r3, [r4, #0]
 8004938:	f8d8 3000 	ldr.w	r3, [r8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d038      	beq.n	80049b2 <_malloc_r+0xf6>
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	42a2      	cmp	r2, r4
 8004944:	d12b      	bne.n	800499e <_malloc_r+0xe2>
 8004946:	2200      	movs	r2, #0
 8004948:	605a      	str	r2, [r3, #4]
 800494a:	e00f      	b.n	800496c <_malloc_r+0xb0>
 800494c:	6822      	ldr	r2, [r4, #0]
 800494e:	1b52      	subs	r2, r2, r5
 8004950:	d41f      	bmi.n	8004992 <_malloc_r+0xd6>
 8004952:	2a0b      	cmp	r2, #11
 8004954:	d917      	bls.n	8004986 <_malloc_r+0xca>
 8004956:	1961      	adds	r1, r4, r5
 8004958:	42a3      	cmp	r3, r4
 800495a:	6025      	str	r5, [r4, #0]
 800495c:	bf18      	it	ne
 800495e:	6059      	strne	r1, [r3, #4]
 8004960:	6863      	ldr	r3, [r4, #4]
 8004962:	bf08      	it	eq
 8004964:	f8c8 1000 	streq.w	r1, [r8]
 8004968:	5162      	str	r2, [r4, r5]
 800496a:	604b      	str	r3, [r1, #4]
 800496c:	4638      	mov	r0, r7
 800496e:	f104 060b 	add.w	r6, r4, #11
 8004972:	f000 f829 	bl	80049c8 <__malloc_unlock>
 8004976:	f026 0607 	bic.w	r6, r6, #7
 800497a:	1d23      	adds	r3, r4, #4
 800497c:	1af2      	subs	r2, r6, r3
 800497e:	d0ae      	beq.n	80048de <_malloc_r+0x22>
 8004980:	1b9b      	subs	r3, r3, r6
 8004982:	50a3      	str	r3, [r4, r2]
 8004984:	e7ab      	b.n	80048de <_malloc_r+0x22>
 8004986:	42a3      	cmp	r3, r4
 8004988:	6862      	ldr	r2, [r4, #4]
 800498a:	d1dd      	bne.n	8004948 <_malloc_r+0x8c>
 800498c:	f8c8 2000 	str.w	r2, [r8]
 8004990:	e7ec      	b.n	800496c <_malloc_r+0xb0>
 8004992:	4623      	mov	r3, r4
 8004994:	6864      	ldr	r4, [r4, #4]
 8004996:	e7ac      	b.n	80048f2 <_malloc_r+0x36>
 8004998:	4634      	mov	r4, r6
 800499a:	6876      	ldr	r6, [r6, #4]
 800499c:	e7b4      	b.n	8004908 <_malloc_r+0x4c>
 800499e:	4613      	mov	r3, r2
 80049a0:	e7cc      	b.n	800493c <_malloc_r+0x80>
 80049a2:	230c      	movs	r3, #12
 80049a4:	603b      	str	r3, [r7, #0]
 80049a6:	4638      	mov	r0, r7
 80049a8:	f000 f80e 	bl	80049c8 <__malloc_unlock>
 80049ac:	e797      	b.n	80048de <_malloc_r+0x22>
 80049ae:	6025      	str	r5, [r4, #0]
 80049b0:	e7dc      	b.n	800496c <_malloc_r+0xb0>
 80049b2:	605b      	str	r3, [r3, #4]
 80049b4:	deff      	udf	#255	; 0xff
 80049b6:	bf00      	nop
 80049b8:	20000988 	.word	0x20000988

080049bc <__malloc_lock>:
 80049bc:	4801      	ldr	r0, [pc, #4]	; (80049c4 <__malloc_lock+0x8>)
 80049be:	f7ff bf01 	b.w	80047c4 <__retarget_lock_acquire_recursive>
 80049c2:	bf00      	nop
 80049c4:	20000984 	.word	0x20000984

080049c8 <__malloc_unlock>:
 80049c8:	4801      	ldr	r0, [pc, #4]	; (80049d0 <__malloc_unlock+0x8>)
 80049ca:	f7ff befc 	b.w	80047c6 <__retarget_lock_release_recursive>
 80049ce:	bf00      	nop
 80049d0:	20000984 	.word	0x20000984

080049d4 <__ssputs_r>:
 80049d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049d8:	688e      	ldr	r6, [r1, #8]
 80049da:	461f      	mov	r7, r3
 80049dc:	42be      	cmp	r6, r7
 80049de:	680b      	ldr	r3, [r1, #0]
 80049e0:	4682      	mov	sl, r0
 80049e2:	460c      	mov	r4, r1
 80049e4:	4690      	mov	r8, r2
 80049e6:	d82c      	bhi.n	8004a42 <__ssputs_r+0x6e>
 80049e8:	898a      	ldrh	r2, [r1, #12]
 80049ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80049ee:	d026      	beq.n	8004a3e <__ssputs_r+0x6a>
 80049f0:	6965      	ldr	r5, [r4, #20]
 80049f2:	6909      	ldr	r1, [r1, #16]
 80049f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049f8:	eba3 0901 	sub.w	r9, r3, r1
 80049fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a00:	1c7b      	adds	r3, r7, #1
 8004a02:	444b      	add	r3, r9
 8004a04:	106d      	asrs	r5, r5, #1
 8004a06:	429d      	cmp	r5, r3
 8004a08:	bf38      	it	cc
 8004a0a:	461d      	movcc	r5, r3
 8004a0c:	0553      	lsls	r3, r2, #21
 8004a0e:	d527      	bpl.n	8004a60 <__ssputs_r+0x8c>
 8004a10:	4629      	mov	r1, r5
 8004a12:	f7ff ff53 	bl	80048bc <_malloc_r>
 8004a16:	4606      	mov	r6, r0
 8004a18:	b360      	cbz	r0, 8004a74 <__ssputs_r+0xa0>
 8004a1a:	6921      	ldr	r1, [r4, #16]
 8004a1c:	464a      	mov	r2, r9
 8004a1e:	f7ff fed3 	bl	80047c8 <memcpy>
 8004a22:	89a3      	ldrh	r3, [r4, #12]
 8004a24:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a2c:	81a3      	strh	r3, [r4, #12]
 8004a2e:	6126      	str	r6, [r4, #16]
 8004a30:	6165      	str	r5, [r4, #20]
 8004a32:	444e      	add	r6, r9
 8004a34:	eba5 0509 	sub.w	r5, r5, r9
 8004a38:	6026      	str	r6, [r4, #0]
 8004a3a:	60a5      	str	r5, [r4, #8]
 8004a3c:	463e      	mov	r6, r7
 8004a3e:	42be      	cmp	r6, r7
 8004a40:	d900      	bls.n	8004a44 <__ssputs_r+0x70>
 8004a42:	463e      	mov	r6, r7
 8004a44:	6820      	ldr	r0, [r4, #0]
 8004a46:	4632      	mov	r2, r6
 8004a48:	4641      	mov	r1, r8
 8004a4a:	f000 faab 	bl	8004fa4 <memmove>
 8004a4e:	68a3      	ldr	r3, [r4, #8]
 8004a50:	1b9b      	subs	r3, r3, r6
 8004a52:	60a3      	str	r3, [r4, #8]
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	4433      	add	r3, r6
 8004a58:	6023      	str	r3, [r4, #0]
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a60:	462a      	mov	r2, r5
 8004a62:	f000 fac9 	bl	8004ff8 <_realloc_r>
 8004a66:	4606      	mov	r6, r0
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	d1e0      	bne.n	8004a2e <__ssputs_r+0x5a>
 8004a6c:	6921      	ldr	r1, [r4, #16]
 8004a6e:	4650      	mov	r0, sl
 8004a70:	f7ff feb8 	bl	80047e4 <_free_r>
 8004a74:	230c      	movs	r3, #12
 8004a76:	f8ca 3000 	str.w	r3, [sl]
 8004a7a:	89a3      	ldrh	r3, [r4, #12]
 8004a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a80:	81a3      	strh	r3, [r4, #12]
 8004a82:	f04f 30ff 	mov.w	r0, #4294967295
 8004a86:	e7e9      	b.n	8004a5c <__ssputs_r+0x88>

08004a88 <_svfiprintf_r>:
 8004a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a8c:	4698      	mov	r8, r3
 8004a8e:	898b      	ldrh	r3, [r1, #12]
 8004a90:	061b      	lsls	r3, r3, #24
 8004a92:	b09d      	sub	sp, #116	; 0x74
 8004a94:	4607      	mov	r7, r0
 8004a96:	460d      	mov	r5, r1
 8004a98:	4614      	mov	r4, r2
 8004a9a:	d50e      	bpl.n	8004aba <_svfiprintf_r+0x32>
 8004a9c:	690b      	ldr	r3, [r1, #16]
 8004a9e:	b963      	cbnz	r3, 8004aba <_svfiprintf_r+0x32>
 8004aa0:	2140      	movs	r1, #64	; 0x40
 8004aa2:	f7ff ff0b 	bl	80048bc <_malloc_r>
 8004aa6:	6028      	str	r0, [r5, #0]
 8004aa8:	6128      	str	r0, [r5, #16]
 8004aaa:	b920      	cbnz	r0, 8004ab6 <_svfiprintf_r+0x2e>
 8004aac:	230c      	movs	r3, #12
 8004aae:	603b      	str	r3, [r7, #0]
 8004ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab4:	e0d0      	b.n	8004c58 <_svfiprintf_r+0x1d0>
 8004ab6:	2340      	movs	r3, #64	; 0x40
 8004ab8:	616b      	str	r3, [r5, #20]
 8004aba:	2300      	movs	r3, #0
 8004abc:	9309      	str	r3, [sp, #36]	; 0x24
 8004abe:	2320      	movs	r3, #32
 8004ac0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ac4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ac8:	2330      	movs	r3, #48	; 0x30
 8004aca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004c70 <_svfiprintf_r+0x1e8>
 8004ace:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ad2:	f04f 0901 	mov.w	r9, #1
 8004ad6:	4623      	mov	r3, r4
 8004ad8:	469a      	mov	sl, r3
 8004ada:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ade:	b10a      	cbz	r2, 8004ae4 <_svfiprintf_r+0x5c>
 8004ae0:	2a25      	cmp	r2, #37	; 0x25
 8004ae2:	d1f9      	bne.n	8004ad8 <_svfiprintf_r+0x50>
 8004ae4:	ebba 0b04 	subs.w	fp, sl, r4
 8004ae8:	d00b      	beq.n	8004b02 <_svfiprintf_r+0x7a>
 8004aea:	465b      	mov	r3, fp
 8004aec:	4622      	mov	r2, r4
 8004aee:	4629      	mov	r1, r5
 8004af0:	4638      	mov	r0, r7
 8004af2:	f7ff ff6f 	bl	80049d4 <__ssputs_r>
 8004af6:	3001      	adds	r0, #1
 8004af8:	f000 80a9 	beq.w	8004c4e <_svfiprintf_r+0x1c6>
 8004afc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004afe:	445a      	add	r2, fp
 8004b00:	9209      	str	r2, [sp, #36]	; 0x24
 8004b02:	f89a 3000 	ldrb.w	r3, [sl]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 80a1 	beq.w	8004c4e <_svfiprintf_r+0x1c6>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b16:	f10a 0a01 	add.w	sl, sl, #1
 8004b1a:	9304      	str	r3, [sp, #16]
 8004b1c:	9307      	str	r3, [sp, #28]
 8004b1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b22:	931a      	str	r3, [sp, #104]	; 0x68
 8004b24:	4654      	mov	r4, sl
 8004b26:	2205      	movs	r2, #5
 8004b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b2c:	4850      	ldr	r0, [pc, #320]	; (8004c70 <_svfiprintf_r+0x1e8>)
 8004b2e:	f7fb fb67 	bl	8000200 <memchr>
 8004b32:	9a04      	ldr	r2, [sp, #16]
 8004b34:	b9d8      	cbnz	r0, 8004b6e <_svfiprintf_r+0xe6>
 8004b36:	06d0      	lsls	r0, r2, #27
 8004b38:	bf44      	itt	mi
 8004b3a:	2320      	movmi	r3, #32
 8004b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b40:	0711      	lsls	r1, r2, #28
 8004b42:	bf44      	itt	mi
 8004b44:	232b      	movmi	r3, #43	; 0x2b
 8004b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8004b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8004b50:	d015      	beq.n	8004b7e <_svfiprintf_r+0xf6>
 8004b52:	9a07      	ldr	r2, [sp, #28]
 8004b54:	4654      	mov	r4, sl
 8004b56:	2000      	movs	r0, #0
 8004b58:	f04f 0c0a 	mov.w	ip, #10
 8004b5c:	4621      	mov	r1, r4
 8004b5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b62:	3b30      	subs	r3, #48	; 0x30
 8004b64:	2b09      	cmp	r3, #9
 8004b66:	d94d      	bls.n	8004c04 <_svfiprintf_r+0x17c>
 8004b68:	b1b0      	cbz	r0, 8004b98 <_svfiprintf_r+0x110>
 8004b6a:	9207      	str	r2, [sp, #28]
 8004b6c:	e014      	b.n	8004b98 <_svfiprintf_r+0x110>
 8004b6e:	eba0 0308 	sub.w	r3, r0, r8
 8004b72:	fa09 f303 	lsl.w	r3, r9, r3
 8004b76:	4313      	orrs	r3, r2
 8004b78:	9304      	str	r3, [sp, #16]
 8004b7a:	46a2      	mov	sl, r4
 8004b7c:	e7d2      	b.n	8004b24 <_svfiprintf_r+0x9c>
 8004b7e:	9b03      	ldr	r3, [sp, #12]
 8004b80:	1d19      	adds	r1, r3, #4
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	9103      	str	r1, [sp, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	bfbb      	ittet	lt
 8004b8a:	425b      	neglt	r3, r3
 8004b8c:	f042 0202 	orrlt.w	r2, r2, #2
 8004b90:	9307      	strge	r3, [sp, #28]
 8004b92:	9307      	strlt	r3, [sp, #28]
 8004b94:	bfb8      	it	lt
 8004b96:	9204      	strlt	r2, [sp, #16]
 8004b98:	7823      	ldrb	r3, [r4, #0]
 8004b9a:	2b2e      	cmp	r3, #46	; 0x2e
 8004b9c:	d10c      	bne.n	8004bb8 <_svfiprintf_r+0x130>
 8004b9e:	7863      	ldrb	r3, [r4, #1]
 8004ba0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ba2:	d134      	bne.n	8004c0e <_svfiprintf_r+0x186>
 8004ba4:	9b03      	ldr	r3, [sp, #12]
 8004ba6:	1d1a      	adds	r2, r3, #4
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	9203      	str	r2, [sp, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	bfb8      	it	lt
 8004bb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004bb4:	3402      	adds	r4, #2
 8004bb6:	9305      	str	r3, [sp, #20]
 8004bb8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004c80 <_svfiprintf_r+0x1f8>
 8004bbc:	7821      	ldrb	r1, [r4, #0]
 8004bbe:	2203      	movs	r2, #3
 8004bc0:	4650      	mov	r0, sl
 8004bc2:	f7fb fb1d 	bl	8000200 <memchr>
 8004bc6:	b138      	cbz	r0, 8004bd8 <_svfiprintf_r+0x150>
 8004bc8:	9b04      	ldr	r3, [sp, #16]
 8004bca:	eba0 000a 	sub.w	r0, r0, sl
 8004bce:	2240      	movs	r2, #64	; 0x40
 8004bd0:	4082      	lsls	r2, r0
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	3401      	adds	r4, #1
 8004bd6:	9304      	str	r3, [sp, #16]
 8004bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bdc:	4825      	ldr	r0, [pc, #148]	; (8004c74 <_svfiprintf_r+0x1ec>)
 8004bde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004be2:	2206      	movs	r2, #6
 8004be4:	f7fb fb0c 	bl	8000200 <memchr>
 8004be8:	2800      	cmp	r0, #0
 8004bea:	d038      	beq.n	8004c5e <_svfiprintf_r+0x1d6>
 8004bec:	4b22      	ldr	r3, [pc, #136]	; (8004c78 <_svfiprintf_r+0x1f0>)
 8004bee:	bb1b      	cbnz	r3, 8004c38 <_svfiprintf_r+0x1b0>
 8004bf0:	9b03      	ldr	r3, [sp, #12]
 8004bf2:	3307      	adds	r3, #7
 8004bf4:	f023 0307 	bic.w	r3, r3, #7
 8004bf8:	3308      	adds	r3, #8
 8004bfa:	9303      	str	r3, [sp, #12]
 8004bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bfe:	4433      	add	r3, r6
 8004c00:	9309      	str	r3, [sp, #36]	; 0x24
 8004c02:	e768      	b.n	8004ad6 <_svfiprintf_r+0x4e>
 8004c04:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c08:	460c      	mov	r4, r1
 8004c0a:	2001      	movs	r0, #1
 8004c0c:	e7a6      	b.n	8004b5c <_svfiprintf_r+0xd4>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	3401      	adds	r4, #1
 8004c12:	9305      	str	r3, [sp, #20]
 8004c14:	4619      	mov	r1, r3
 8004c16:	f04f 0c0a 	mov.w	ip, #10
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c20:	3a30      	subs	r2, #48	; 0x30
 8004c22:	2a09      	cmp	r2, #9
 8004c24:	d903      	bls.n	8004c2e <_svfiprintf_r+0x1a6>
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0c6      	beq.n	8004bb8 <_svfiprintf_r+0x130>
 8004c2a:	9105      	str	r1, [sp, #20]
 8004c2c:	e7c4      	b.n	8004bb8 <_svfiprintf_r+0x130>
 8004c2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c32:	4604      	mov	r4, r0
 8004c34:	2301      	movs	r3, #1
 8004c36:	e7f0      	b.n	8004c1a <_svfiprintf_r+0x192>
 8004c38:	ab03      	add	r3, sp, #12
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	462a      	mov	r2, r5
 8004c3e:	4b0f      	ldr	r3, [pc, #60]	; (8004c7c <_svfiprintf_r+0x1f4>)
 8004c40:	a904      	add	r1, sp, #16
 8004c42:	4638      	mov	r0, r7
 8004c44:	f3af 8000 	nop.w
 8004c48:	1c42      	adds	r2, r0, #1
 8004c4a:	4606      	mov	r6, r0
 8004c4c:	d1d6      	bne.n	8004bfc <_svfiprintf_r+0x174>
 8004c4e:	89ab      	ldrh	r3, [r5, #12]
 8004c50:	065b      	lsls	r3, r3, #25
 8004c52:	f53f af2d 	bmi.w	8004ab0 <_svfiprintf_r+0x28>
 8004c56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c58:	b01d      	add	sp, #116	; 0x74
 8004c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c5e:	ab03      	add	r3, sp, #12
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	462a      	mov	r2, r5
 8004c64:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <_svfiprintf_r+0x1f4>)
 8004c66:	a904      	add	r1, sp, #16
 8004c68:	4638      	mov	r0, r7
 8004c6a:	f000 f879 	bl	8004d60 <_printf_i>
 8004c6e:	e7eb      	b.n	8004c48 <_svfiprintf_r+0x1c0>
 8004c70:	080050c4 	.word	0x080050c4
 8004c74:	080050ce 	.word	0x080050ce
 8004c78:	00000000 	.word	0x00000000
 8004c7c:	080049d5 	.word	0x080049d5
 8004c80:	080050ca 	.word	0x080050ca

08004c84 <_printf_common>:
 8004c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c88:	4616      	mov	r6, r2
 8004c8a:	4699      	mov	r9, r3
 8004c8c:	688a      	ldr	r2, [r1, #8]
 8004c8e:	690b      	ldr	r3, [r1, #16]
 8004c90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c94:	4293      	cmp	r3, r2
 8004c96:	bfb8      	it	lt
 8004c98:	4613      	movlt	r3, r2
 8004c9a:	6033      	str	r3, [r6, #0]
 8004c9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ca0:	4607      	mov	r7, r0
 8004ca2:	460c      	mov	r4, r1
 8004ca4:	b10a      	cbz	r2, 8004caa <_printf_common+0x26>
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	6033      	str	r3, [r6, #0]
 8004caa:	6823      	ldr	r3, [r4, #0]
 8004cac:	0699      	lsls	r1, r3, #26
 8004cae:	bf42      	ittt	mi
 8004cb0:	6833      	ldrmi	r3, [r6, #0]
 8004cb2:	3302      	addmi	r3, #2
 8004cb4:	6033      	strmi	r3, [r6, #0]
 8004cb6:	6825      	ldr	r5, [r4, #0]
 8004cb8:	f015 0506 	ands.w	r5, r5, #6
 8004cbc:	d106      	bne.n	8004ccc <_printf_common+0x48>
 8004cbe:	f104 0a19 	add.w	sl, r4, #25
 8004cc2:	68e3      	ldr	r3, [r4, #12]
 8004cc4:	6832      	ldr	r2, [r6, #0]
 8004cc6:	1a9b      	subs	r3, r3, r2
 8004cc8:	42ab      	cmp	r3, r5
 8004cca:	dc26      	bgt.n	8004d1a <_printf_common+0x96>
 8004ccc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cd0:	1e13      	subs	r3, r2, #0
 8004cd2:	6822      	ldr	r2, [r4, #0]
 8004cd4:	bf18      	it	ne
 8004cd6:	2301      	movne	r3, #1
 8004cd8:	0692      	lsls	r2, r2, #26
 8004cda:	d42b      	bmi.n	8004d34 <_printf_common+0xb0>
 8004cdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ce0:	4649      	mov	r1, r9
 8004ce2:	4638      	mov	r0, r7
 8004ce4:	47c0      	blx	r8
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	d01e      	beq.n	8004d28 <_printf_common+0xa4>
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	6922      	ldr	r2, [r4, #16]
 8004cee:	f003 0306 	and.w	r3, r3, #6
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	bf02      	ittt	eq
 8004cf6:	68e5      	ldreq	r5, [r4, #12]
 8004cf8:	6833      	ldreq	r3, [r6, #0]
 8004cfa:	1aed      	subeq	r5, r5, r3
 8004cfc:	68a3      	ldr	r3, [r4, #8]
 8004cfe:	bf0c      	ite	eq
 8004d00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d04:	2500      	movne	r5, #0
 8004d06:	4293      	cmp	r3, r2
 8004d08:	bfc4      	itt	gt
 8004d0a:	1a9b      	subgt	r3, r3, r2
 8004d0c:	18ed      	addgt	r5, r5, r3
 8004d0e:	2600      	movs	r6, #0
 8004d10:	341a      	adds	r4, #26
 8004d12:	42b5      	cmp	r5, r6
 8004d14:	d11a      	bne.n	8004d4c <_printf_common+0xc8>
 8004d16:	2000      	movs	r0, #0
 8004d18:	e008      	b.n	8004d2c <_printf_common+0xa8>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	4652      	mov	r2, sl
 8004d1e:	4649      	mov	r1, r9
 8004d20:	4638      	mov	r0, r7
 8004d22:	47c0      	blx	r8
 8004d24:	3001      	adds	r0, #1
 8004d26:	d103      	bne.n	8004d30 <_printf_common+0xac>
 8004d28:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d30:	3501      	adds	r5, #1
 8004d32:	e7c6      	b.n	8004cc2 <_printf_common+0x3e>
 8004d34:	18e1      	adds	r1, r4, r3
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	2030      	movs	r0, #48	; 0x30
 8004d3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d3e:	4422      	add	r2, r4
 8004d40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d48:	3302      	adds	r3, #2
 8004d4a:	e7c7      	b.n	8004cdc <_printf_common+0x58>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	4622      	mov	r2, r4
 8004d50:	4649      	mov	r1, r9
 8004d52:	4638      	mov	r0, r7
 8004d54:	47c0      	blx	r8
 8004d56:	3001      	adds	r0, #1
 8004d58:	d0e6      	beq.n	8004d28 <_printf_common+0xa4>
 8004d5a:	3601      	adds	r6, #1
 8004d5c:	e7d9      	b.n	8004d12 <_printf_common+0x8e>
	...

08004d60 <_printf_i>:
 8004d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d64:	7e0f      	ldrb	r7, [r1, #24]
 8004d66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d68:	2f78      	cmp	r7, #120	; 0x78
 8004d6a:	4691      	mov	r9, r2
 8004d6c:	4680      	mov	r8, r0
 8004d6e:	460c      	mov	r4, r1
 8004d70:	469a      	mov	sl, r3
 8004d72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d76:	d807      	bhi.n	8004d88 <_printf_i+0x28>
 8004d78:	2f62      	cmp	r7, #98	; 0x62
 8004d7a:	d80a      	bhi.n	8004d92 <_printf_i+0x32>
 8004d7c:	2f00      	cmp	r7, #0
 8004d7e:	f000 80d4 	beq.w	8004f2a <_printf_i+0x1ca>
 8004d82:	2f58      	cmp	r7, #88	; 0x58
 8004d84:	f000 80c0 	beq.w	8004f08 <_printf_i+0x1a8>
 8004d88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d90:	e03a      	b.n	8004e08 <_printf_i+0xa8>
 8004d92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d96:	2b15      	cmp	r3, #21
 8004d98:	d8f6      	bhi.n	8004d88 <_printf_i+0x28>
 8004d9a:	a101      	add	r1, pc, #4	; (adr r1, 8004da0 <_printf_i+0x40>)
 8004d9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004da0:	08004df9 	.word	0x08004df9
 8004da4:	08004e0d 	.word	0x08004e0d
 8004da8:	08004d89 	.word	0x08004d89
 8004dac:	08004d89 	.word	0x08004d89
 8004db0:	08004d89 	.word	0x08004d89
 8004db4:	08004d89 	.word	0x08004d89
 8004db8:	08004e0d 	.word	0x08004e0d
 8004dbc:	08004d89 	.word	0x08004d89
 8004dc0:	08004d89 	.word	0x08004d89
 8004dc4:	08004d89 	.word	0x08004d89
 8004dc8:	08004d89 	.word	0x08004d89
 8004dcc:	08004f11 	.word	0x08004f11
 8004dd0:	08004e39 	.word	0x08004e39
 8004dd4:	08004ecb 	.word	0x08004ecb
 8004dd8:	08004d89 	.word	0x08004d89
 8004ddc:	08004d89 	.word	0x08004d89
 8004de0:	08004f33 	.word	0x08004f33
 8004de4:	08004d89 	.word	0x08004d89
 8004de8:	08004e39 	.word	0x08004e39
 8004dec:	08004d89 	.word	0x08004d89
 8004df0:	08004d89 	.word	0x08004d89
 8004df4:	08004ed3 	.word	0x08004ed3
 8004df8:	682b      	ldr	r3, [r5, #0]
 8004dfa:	1d1a      	adds	r2, r3, #4
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	602a      	str	r2, [r5, #0]
 8004e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e09f      	b.n	8004f4c <_printf_i+0x1ec>
 8004e0c:	6820      	ldr	r0, [r4, #0]
 8004e0e:	682b      	ldr	r3, [r5, #0]
 8004e10:	0607      	lsls	r7, r0, #24
 8004e12:	f103 0104 	add.w	r1, r3, #4
 8004e16:	6029      	str	r1, [r5, #0]
 8004e18:	d501      	bpl.n	8004e1e <_printf_i+0xbe>
 8004e1a:	681e      	ldr	r6, [r3, #0]
 8004e1c:	e003      	b.n	8004e26 <_printf_i+0xc6>
 8004e1e:	0646      	lsls	r6, r0, #25
 8004e20:	d5fb      	bpl.n	8004e1a <_printf_i+0xba>
 8004e22:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004e26:	2e00      	cmp	r6, #0
 8004e28:	da03      	bge.n	8004e32 <_printf_i+0xd2>
 8004e2a:	232d      	movs	r3, #45	; 0x2d
 8004e2c:	4276      	negs	r6, r6
 8004e2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e32:	485a      	ldr	r0, [pc, #360]	; (8004f9c <_printf_i+0x23c>)
 8004e34:	230a      	movs	r3, #10
 8004e36:	e012      	b.n	8004e5e <_printf_i+0xfe>
 8004e38:	682b      	ldr	r3, [r5, #0]
 8004e3a:	6820      	ldr	r0, [r4, #0]
 8004e3c:	1d19      	adds	r1, r3, #4
 8004e3e:	6029      	str	r1, [r5, #0]
 8004e40:	0605      	lsls	r5, r0, #24
 8004e42:	d501      	bpl.n	8004e48 <_printf_i+0xe8>
 8004e44:	681e      	ldr	r6, [r3, #0]
 8004e46:	e002      	b.n	8004e4e <_printf_i+0xee>
 8004e48:	0641      	lsls	r1, r0, #25
 8004e4a:	d5fb      	bpl.n	8004e44 <_printf_i+0xe4>
 8004e4c:	881e      	ldrh	r6, [r3, #0]
 8004e4e:	4853      	ldr	r0, [pc, #332]	; (8004f9c <_printf_i+0x23c>)
 8004e50:	2f6f      	cmp	r7, #111	; 0x6f
 8004e52:	bf0c      	ite	eq
 8004e54:	2308      	moveq	r3, #8
 8004e56:	230a      	movne	r3, #10
 8004e58:	2100      	movs	r1, #0
 8004e5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e5e:	6865      	ldr	r5, [r4, #4]
 8004e60:	60a5      	str	r5, [r4, #8]
 8004e62:	2d00      	cmp	r5, #0
 8004e64:	bfa2      	ittt	ge
 8004e66:	6821      	ldrge	r1, [r4, #0]
 8004e68:	f021 0104 	bicge.w	r1, r1, #4
 8004e6c:	6021      	strge	r1, [r4, #0]
 8004e6e:	b90e      	cbnz	r6, 8004e74 <_printf_i+0x114>
 8004e70:	2d00      	cmp	r5, #0
 8004e72:	d04b      	beq.n	8004f0c <_printf_i+0x1ac>
 8004e74:	4615      	mov	r5, r2
 8004e76:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e7a:	fb03 6711 	mls	r7, r3, r1, r6
 8004e7e:	5dc7      	ldrb	r7, [r0, r7]
 8004e80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e84:	4637      	mov	r7, r6
 8004e86:	42bb      	cmp	r3, r7
 8004e88:	460e      	mov	r6, r1
 8004e8a:	d9f4      	bls.n	8004e76 <_printf_i+0x116>
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d10b      	bne.n	8004ea8 <_printf_i+0x148>
 8004e90:	6823      	ldr	r3, [r4, #0]
 8004e92:	07de      	lsls	r6, r3, #31
 8004e94:	d508      	bpl.n	8004ea8 <_printf_i+0x148>
 8004e96:	6923      	ldr	r3, [r4, #16]
 8004e98:	6861      	ldr	r1, [r4, #4]
 8004e9a:	4299      	cmp	r1, r3
 8004e9c:	bfde      	ittt	le
 8004e9e:	2330      	movle	r3, #48	; 0x30
 8004ea0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ea4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ea8:	1b52      	subs	r2, r2, r5
 8004eaa:	6122      	str	r2, [r4, #16]
 8004eac:	f8cd a000 	str.w	sl, [sp]
 8004eb0:	464b      	mov	r3, r9
 8004eb2:	aa03      	add	r2, sp, #12
 8004eb4:	4621      	mov	r1, r4
 8004eb6:	4640      	mov	r0, r8
 8004eb8:	f7ff fee4 	bl	8004c84 <_printf_common>
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	d14a      	bne.n	8004f56 <_printf_i+0x1f6>
 8004ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec4:	b004      	add	sp, #16
 8004ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	f043 0320 	orr.w	r3, r3, #32
 8004ed0:	6023      	str	r3, [r4, #0]
 8004ed2:	4833      	ldr	r0, [pc, #204]	; (8004fa0 <_printf_i+0x240>)
 8004ed4:	2778      	movs	r7, #120	; 0x78
 8004ed6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	6829      	ldr	r1, [r5, #0]
 8004ede:	061f      	lsls	r7, r3, #24
 8004ee0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ee4:	d402      	bmi.n	8004eec <_printf_i+0x18c>
 8004ee6:	065f      	lsls	r7, r3, #25
 8004ee8:	bf48      	it	mi
 8004eea:	b2b6      	uxthmi	r6, r6
 8004eec:	07df      	lsls	r7, r3, #31
 8004eee:	bf48      	it	mi
 8004ef0:	f043 0320 	orrmi.w	r3, r3, #32
 8004ef4:	6029      	str	r1, [r5, #0]
 8004ef6:	bf48      	it	mi
 8004ef8:	6023      	strmi	r3, [r4, #0]
 8004efa:	b91e      	cbnz	r6, 8004f04 <_printf_i+0x1a4>
 8004efc:	6823      	ldr	r3, [r4, #0]
 8004efe:	f023 0320 	bic.w	r3, r3, #32
 8004f02:	6023      	str	r3, [r4, #0]
 8004f04:	2310      	movs	r3, #16
 8004f06:	e7a7      	b.n	8004e58 <_printf_i+0xf8>
 8004f08:	4824      	ldr	r0, [pc, #144]	; (8004f9c <_printf_i+0x23c>)
 8004f0a:	e7e4      	b.n	8004ed6 <_printf_i+0x176>
 8004f0c:	4615      	mov	r5, r2
 8004f0e:	e7bd      	b.n	8004e8c <_printf_i+0x12c>
 8004f10:	682b      	ldr	r3, [r5, #0]
 8004f12:	6826      	ldr	r6, [r4, #0]
 8004f14:	6961      	ldr	r1, [r4, #20]
 8004f16:	1d18      	adds	r0, r3, #4
 8004f18:	6028      	str	r0, [r5, #0]
 8004f1a:	0635      	lsls	r5, r6, #24
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	d501      	bpl.n	8004f24 <_printf_i+0x1c4>
 8004f20:	6019      	str	r1, [r3, #0]
 8004f22:	e002      	b.n	8004f2a <_printf_i+0x1ca>
 8004f24:	0670      	lsls	r0, r6, #25
 8004f26:	d5fb      	bpl.n	8004f20 <_printf_i+0x1c0>
 8004f28:	8019      	strh	r1, [r3, #0]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	6123      	str	r3, [r4, #16]
 8004f2e:	4615      	mov	r5, r2
 8004f30:	e7bc      	b.n	8004eac <_printf_i+0x14c>
 8004f32:	682b      	ldr	r3, [r5, #0]
 8004f34:	1d1a      	adds	r2, r3, #4
 8004f36:	602a      	str	r2, [r5, #0]
 8004f38:	681d      	ldr	r5, [r3, #0]
 8004f3a:	6862      	ldr	r2, [r4, #4]
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	4628      	mov	r0, r5
 8004f40:	f7fb f95e 	bl	8000200 <memchr>
 8004f44:	b108      	cbz	r0, 8004f4a <_printf_i+0x1ea>
 8004f46:	1b40      	subs	r0, r0, r5
 8004f48:	6060      	str	r0, [r4, #4]
 8004f4a:	6863      	ldr	r3, [r4, #4]
 8004f4c:	6123      	str	r3, [r4, #16]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f54:	e7aa      	b.n	8004eac <_printf_i+0x14c>
 8004f56:	6923      	ldr	r3, [r4, #16]
 8004f58:	462a      	mov	r2, r5
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	4640      	mov	r0, r8
 8004f5e:	47d0      	blx	sl
 8004f60:	3001      	adds	r0, #1
 8004f62:	d0ad      	beq.n	8004ec0 <_printf_i+0x160>
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	079b      	lsls	r3, r3, #30
 8004f68:	d413      	bmi.n	8004f92 <_printf_i+0x232>
 8004f6a:	68e0      	ldr	r0, [r4, #12]
 8004f6c:	9b03      	ldr	r3, [sp, #12]
 8004f6e:	4298      	cmp	r0, r3
 8004f70:	bfb8      	it	lt
 8004f72:	4618      	movlt	r0, r3
 8004f74:	e7a6      	b.n	8004ec4 <_printf_i+0x164>
 8004f76:	2301      	movs	r3, #1
 8004f78:	4632      	mov	r2, r6
 8004f7a:	4649      	mov	r1, r9
 8004f7c:	4640      	mov	r0, r8
 8004f7e:	47d0      	blx	sl
 8004f80:	3001      	adds	r0, #1
 8004f82:	d09d      	beq.n	8004ec0 <_printf_i+0x160>
 8004f84:	3501      	adds	r5, #1
 8004f86:	68e3      	ldr	r3, [r4, #12]
 8004f88:	9903      	ldr	r1, [sp, #12]
 8004f8a:	1a5b      	subs	r3, r3, r1
 8004f8c:	42ab      	cmp	r3, r5
 8004f8e:	dcf2      	bgt.n	8004f76 <_printf_i+0x216>
 8004f90:	e7eb      	b.n	8004f6a <_printf_i+0x20a>
 8004f92:	2500      	movs	r5, #0
 8004f94:	f104 0619 	add.w	r6, r4, #25
 8004f98:	e7f5      	b.n	8004f86 <_printf_i+0x226>
 8004f9a:	bf00      	nop
 8004f9c:	080050d5 	.word	0x080050d5
 8004fa0:	080050e6 	.word	0x080050e6

08004fa4 <memmove>:
 8004fa4:	4288      	cmp	r0, r1
 8004fa6:	b510      	push	{r4, lr}
 8004fa8:	eb01 0402 	add.w	r4, r1, r2
 8004fac:	d902      	bls.n	8004fb4 <memmove+0x10>
 8004fae:	4284      	cmp	r4, r0
 8004fb0:	4623      	mov	r3, r4
 8004fb2:	d807      	bhi.n	8004fc4 <memmove+0x20>
 8004fb4:	1e43      	subs	r3, r0, #1
 8004fb6:	42a1      	cmp	r1, r4
 8004fb8:	d008      	beq.n	8004fcc <memmove+0x28>
 8004fba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fc2:	e7f8      	b.n	8004fb6 <memmove+0x12>
 8004fc4:	4402      	add	r2, r0
 8004fc6:	4601      	mov	r1, r0
 8004fc8:	428a      	cmp	r2, r1
 8004fca:	d100      	bne.n	8004fce <memmove+0x2a>
 8004fcc:	bd10      	pop	{r4, pc}
 8004fce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fd6:	e7f7      	b.n	8004fc8 <memmove+0x24>

08004fd8 <_sbrk_r>:
 8004fd8:	b538      	push	{r3, r4, r5, lr}
 8004fda:	4d06      	ldr	r5, [pc, #24]	; (8004ff4 <_sbrk_r+0x1c>)
 8004fdc:	2300      	movs	r3, #0
 8004fde:	4604      	mov	r4, r0
 8004fe0:	4608      	mov	r0, r1
 8004fe2:	602b      	str	r3, [r5, #0]
 8004fe4:	f7fc fc38 	bl	8001858 <_sbrk>
 8004fe8:	1c43      	adds	r3, r0, #1
 8004fea:	d102      	bne.n	8004ff2 <_sbrk_r+0x1a>
 8004fec:	682b      	ldr	r3, [r5, #0]
 8004fee:	b103      	cbz	r3, 8004ff2 <_sbrk_r+0x1a>
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	bd38      	pop	{r3, r4, r5, pc}
 8004ff4:	20000980 	.word	0x20000980

08004ff8 <_realloc_r>:
 8004ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ffc:	4680      	mov	r8, r0
 8004ffe:	4614      	mov	r4, r2
 8005000:	460e      	mov	r6, r1
 8005002:	b921      	cbnz	r1, 800500e <_realloc_r+0x16>
 8005004:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005008:	4611      	mov	r1, r2
 800500a:	f7ff bc57 	b.w	80048bc <_malloc_r>
 800500e:	b92a      	cbnz	r2, 800501c <_realloc_r+0x24>
 8005010:	f7ff fbe8 	bl	80047e4 <_free_r>
 8005014:	4625      	mov	r5, r4
 8005016:	4628      	mov	r0, r5
 8005018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800501c:	f000 f81b 	bl	8005056 <_malloc_usable_size_r>
 8005020:	4284      	cmp	r4, r0
 8005022:	4607      	mov	r7, r0
 8005024:	d802      	bhi.n	800502c <_realloc_r+0x34>
 8005026:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800502a:	d812      	bhi.n	8005052 <_realloc_r+0x5a>
 800502c:	4621      	mov	r1, r4
 800502e:	4640      	mov	r0, r8
 8005030:	f7ff fc44 	bl	80048bc <_malloc_r>
 8005034:	4605      	mov	r5, r0
 8005036:	2800      	cmp	r0, #0
 8005038:	d0ed      	beq.n	8005016 <_realloc_r+0x1e>
 800503a:	42bc      	cmp	r4, r7
 800503c:	4622      	mov	r2, r4
 800503e:	4631      	mov	r1, r6
 8005040:	bf28      	it	cs
 8005042:	463a      	movcs	r2, r7
 8005044:	f7ff fbc0 	bl	80047c8 <memcpy>
 8005048:	4631      	mov	r1, r6
 800504a:	4640      	mov	r0, r8
 800504c:	f7ff fbca 	bl	80047e4 <_free_r>
 8005050:	e7e1      	b.n	8005016 <_realloc_r+0x1e>
 8005052:	4635      	mov	r5, r6
 8005054:	e7df      	b.n	8005016 <_realloc_r+0x1e>

08005056 <_malloc_usable_size_r>:
 8005056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800505a:	1f18      	subs	r0, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	bfbc      	itt	lt
 8005060:	580b      	ldrlt	r3, [r1, r0]
 8005062:	18c0      	addlt	r0, r0, r3
 8005064:	4770      	bx	lr
	...

08005068 <_init>:
 8005068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506a:	bf00      	nop
 800506c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800506e:	bc08      	pop	{r3}
 8005070:	469e      	mov	lr, r3
 8005072:	4770      	bx	lr

08005074 <_fini>:
 8005074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005076:	bf00      	nop
 8005078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507a:	bc08      	pop	{r3}
 800507c:	469e      	mov	lr, r3
 800507e:	4770      	bx	lr
