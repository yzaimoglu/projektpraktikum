
prototypsolar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d58  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08006f08  08006f08  00016f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f84  08006f84  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006f84  08006f84  00016f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f8c  08006f8c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f8c  08006f8c  00016f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f90  08006f90  00016f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00000a6c  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000acc  20000acc  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019230  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002fa9  00000000  00000000  00039303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001578  00000000  00000000  0003c2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010ea  00000000  00000000  0003d828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027a3c  00000000  00000000  0003e912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a5be  00000000  00000000  0006634e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f1e3b  00000000  00000000  0008090c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000062b8  00000000  00000000  00172748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00178a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006ef0 	.word	0x08006ef0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08006ef0 	.word	0x08006ef0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <_LCD_SendInternal>:
#define LCD_I2C_TIMEOUT 200

#define COLUMNS 16
#define ROWS 2

HAL_StatusTypeDef _LCD_SendInternal(LCD_HandleTypeDef *dev, uint8_t data, uint8_t flags) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af02      	add	r7, sp, #8
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	460b      	mov	r3, r1
 80005a6:	70fb      	strb	r3, [r7, #3]
 80005a8:	4613      	mov	r3, r2
 80005aa:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef res;
    for(int i=0;i<5;i++) {
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	e010      	b.n	80005d4 <_LCD_SendInternal+0x38>
        res = HAL_I2C_IsDeviceReady(dev->i2c, dev->i2c_addr, 1, LCD_I2C_TIMEOUT);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6858      	ldr	r0, [r3, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	b299      	uxth	r1, r3
 80005bc:	23c8      	movs	r3, #200	; 0xc8
 80005be:	2201      	movs	r2, #1
 80005c0:	f002 ffb8 	bl	8003534 <HAL_I2C_IsDeviceReady>
 80005c4:	4603      	mov	r3, r0
 80005c6:	75fb      	strb	r3, [r7, #23]
        if(res == HAL_OK)
 80005c8:	7dfb      	ldrb	r3, [r7, #23]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d006      	beq.n	80005dc <_LCD_SendInternal+0x40>
    for(int i=0;i<5;i++) {
 80005ce:	693b      	ldr	r3, [r7, #16]
 80005d0:	3301      	adds	r3, #1
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]
 80005d6:	2b04      	cmp	r3, #4
 80005d8:	ddeb      	ble.n	80005b2 <_LCD_SendInternal+0x16>
 80005da:	e000      	b.n	80005de <_LCD_SendInternal+0x42>
            break;
 80005dc:	bf00      	nop
    }
    if(res!=HAL_OK) {
 80005de:	7dfb      	ldrb	r3, [r7, #23]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <_LCD_SendInternal+0x4c>
    	return res;
 80005e4:	7dfb      	ldrb	r3, [r7, #23]
 80005e6:	e04b      	b.n	8000680 <_LCD_SendInternal+0xe4>
    }


    uint8_t up = data & 0xF0;
 80005e8:	78fb      	ldrb	r3, [r7, #3]
 80005ea:	f023 030f 	bic.w	r3, r3, #15
 80005ee:	73fb      	strb	r3, [r7, #15]
    uint8_t lo = (data << 4) & 0xF0;
 80005f0:	78fb      	ldrb	r3, [r7, #3]
 80005f2:	011b      	lsls	r3, r3, #4
 80005f4:	73bb      	strb	r3, [r7, #14]
    uint8_t backlight = dev->backlight_enable?BACKLIGHT:0;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	7a1b      	ldrb	r3, [r3, #8]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <_LCD_SendInternal+0x66>
 80005fe:	2308      	movs	r3, #8
 8000600:	e000      	b.n	8000604 <_LCD_SendInternal+0x68>
 8000602:	2300      	movs	r3, #0
 8000604:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|backlight|PIN_EN;
 8000606:	7bfa      	ldrb	r2, [r7, #15]
 8000608:	78bb      	ldrb	r3, [r7, #2]
 800060a:	4313      	orrs	r3, r2
 800060c:	b2da      	uxtb	r2, r3
 800060e:	7b7b      	ldrb	r3, [r7, #13]
 8000610:	4313      	orrs	r3, r2
 8000612:	b2db      	uxtb	r3, r3
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	b2db      	uxtb	r3, r3
 800061a:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|backlight;
 800061c:	7bfa      	ldrb	r2, [r7, #15]
 800061e:	78bb      	ldrb	r3, [r7, #2]
 8000620:	4313      	orrs	r3, r2
 8000622:	b2da      	uxtb	r2, r3
 8000624:	7b7b      	ldrb	r3, [r7, #13]
 8000626:	4313      	orrs	r3, r2
 8000628:	b2db      	uxtb	r3, r3
 800062a:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|backlight|PIN_EN;
 800062c:	7bba      	ldrb	r2, [r7, #14]
 800062e:	78bb      	ldrb	r3, [r7, #2]
 8000630:	4313      	orrs	r3, r2
 8000632:	b2da      	uxtb	r2, r3
 8000634:	7b7b      	ldrb	r3, [r7, #13]
 8000636:	4313      	orrs	r3, r2
 8000638:	b2db      	uxtb	r3, r3
 800063a:	f043 0304 	orr.w	r3, r3, #4
 800063e:	b2db      	uxtb	r3, r3
 8000640:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|backlight;
 8000642:	7bba      	ldrb	r2, [r7, #14]
 8000644:	78bb      	ldrb	r3, [r7, #2]
 8000646:	4313      	orrs	r3, r2
 8000648:	b2da      	uxtb	r2, r3
 800064a:	7b7b      	ldrb	r3, [r7, #13]
 800064c:	4313      	orrs	r3, r2
 800064e:	b2db      	uxtb	r3, r3
 8000650:	72fb      	strb	r3, [r7, #11]

    //TODO send data_arr to the device
    res = HAL_I2C_Master_Transmit(dev->i2c, dev->i2c_addr, data_arr, sizeof(data_arr), LCD_I2C_TIMEOUT);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	6858      	ldr	r0, [r3, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	b299      	uxth	r1, r3
 800065c:	f107 0208 	add.w	r2, r7, #8
 8000660:	23c8      	movs	r3, #200	; 0xc8
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2304      	movs	r3, #4
 8000666:	f002 fe67 	bl	8003338 <HAL_I2C_Master_Transmit>
 800066a:	4603      	mov	r3, r0
 800066c:	75fb      	strb	r3, [r7, #23]
    if(res != HAL_OK) {
 800066e:	7dfb      	ldrb	r3, [r7, #23]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <_LCD_SendInternal+0xdc>
        return res;
 8000674:	7dfb      	ldrb	r3, [r7, #23]
 8000676:	e003      	b.n	8000680 <_LCD_SendInternal+0xe4>
    }


    HAL_Delay(LCD_DELAY_MS); //delay afterwards to not overwhelm display
 8000678:	2005      	movs	r0, #5
 800067a:	f001 facd 	bl	8001c18 <HAL_Delay>
    return res;
 800067e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3718      	adds	r7, #24
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <_LCD_SendCommand>:

HAL_StatusTypeDef _LCD_SendCommand(LCD_HandleTypeDef *dev, uint8_t cmd) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]
    return _LCD_SendInternal(dev, cmd, 0);
 8000694:	78fb      	ldrb	r3, [r7, #3]
 8000696:	2200      	movs	r2, #0
 8000698:	4619      	mov	r1, r3
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f7ff ff7e 	bl	800059c <_LCD_SendInternal>
 80006a0:	4603      	mov	r3, r0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <_LCD_SendData>:

HAL_StatusTypeDef _LCD_SendData(LCD_HandleTypeDef *dev, uint8_t data) {
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b082      	sub	sp, #8
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
 80006b2:	460b      	mov	r3, r1
 80006b4:	70fb      	strb	r3, [r7, #3]
    return _LCD_SendInternal(dev, data, PIN_RS);
 80006b6:	78fb      	ldrb	r3, [r7, #3]
 80006b8:	2201      	movs	r2, #1
 80006ba:	4619      	mov	r1, r3
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff ff6d 	bl	800059c <_LCD_SendInternal>
 80006c2:	4603      	mov	r3, r0
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <LCD_Print>:

#define RETURN_IF_NOT_OK if(status!=HAL_OK)return status;

HAL_StatusTypeDef LCD_Print(LCD_HandleTypeDef *dev, const char *str) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
    while(*str) {
 80006d6:	e00f      	b.n	80006f8 <LCD_Print+0x2c>
    	status = _LCD_SendData(dev, (uint8_t)(*str));
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4619      	mov	r1, r3
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	f7ff ffe3 	bl	80006aa <_LCD_SendData>
 80006e4:	4603      	mov	r3, r0
 80006e6:	73fb      	strb	r3, [r7, #15]
        RETURN_IF_NOT_OK;
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <LCD_Print+0x26>
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	e007      	b.n	8000702 <LCD_Print+0x36>
        str++;
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	3301      	adds	r3, #1
 80006f6:	603b      	str	r3, [r7, #0]
    while(*str) {
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d1eb      	bne.n	80006d8 <LCD_Print+0xc>
    }
    return HAL_OK;
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <LCD_Begin>:
    RETURN_IF_NOT_OK;
    status = LCD_Print(dev, " !!! ");
    return status;
}

HAL_StatusTypeDef LCD_Begin(LCD_HandleTypeDef *dev) {
 800070a:	b580      	push	{r7, lr}
 800070c:	b084      	sub	sp, #16
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
	dev->backlight_enable=true;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2201      	movs	r2, #1
 8000716:	721a      	strb	r2, [r3, #8]
	HAL_StatusTypeDef status;

    // 4-bit mode, 2 lines, 5x7 format
    status = _LCD_SendCommand(dev, 0b00110000);
 8000718:	2130      	movs	r1, #48	; 0x30
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f7ff ffb4 	bl	8000688 <_LCD_SendCommand>
 8000720:	4603      	mov	r3, r0
 8000722:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <LCD_Begin+0x24>
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	e01c      	b.n	8000768 <LCD_Begin+0x5e>

    // display & cursor home (keep this!)
    status = _LCD_SendCommand(dev, 0b00000010);
 800072e:	2102      	movs	r1, #2
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f7ff ffa9 	bl	8000688 <_LCD_SendCommand>
 8000736:	4603      	mov	r3, r0
 8000738:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <LCD_Begin+0x3a>
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	e011      	b.n	8000768 <LCD_Begin+0x5e>

    // display on, right shift, underline off, blink off
    status = _LCD_SendCommand(dev, 0b00001100);
 8000744:	210c      	movs	r1, #12
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff ff9e 	bl	8000688 <_LCD_SendCommand>
 800074c:	4603      	mov	r3, r0
 800074e:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <LCD_Begin+0x50>
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	e006      	b.n	8000768 <LCD_Begin+0x5e>

    // clear display (optional here)
    status = _LCD_SendCommand(dev, 0b00000001);
 800075a:	2101      	movs	r1, #1
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff ff93 	bl	8000688 <_LCD_SendCommand>
 8000762:	4603      	mov	r3, r0
 8000764:	73fb      	strb	r3, [r7, #15]
    return status;
 8000766:	7bfb      	ldrb	r3, [r7, #15]
}
 8000768:	4618      	mov	r0, r3
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <LCD_SetCursor>:


HAL_StatusTypeDef LCD_SetCursor(LCD_HandleTypeDef *dev, uint8_t row, uint8_t col) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	460b      	mov	r3, r1
 800077a:	70fb      	strb	r3, [r7, #3]
 800077c:	4613      	mov	r3, r2
 800077e:	70bb      	strb	r3, [r7, #2]
	if(row<0 || row>=ROWS || col<0 || col>=COLUMNS) {
 8000780:	78fb      	ldrb	r3, [r7, #3]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d802      	bhi.n	800078c <LCD_SetCursor+0x1c>
 8000786:	78bb      	ldrb	r3, [r7, #2]
 8000788:	2b0f      	cmp	r3, #15
 800078a:	d901      	bls.n	8000790 <LCD_SetCursor+0x20>
		return HAL_ERROR;
 800078c:	2301      	movs	r3, #1
 800078e:	e010      	b.n	80007b2 <LCD_SetCursor+0x42>
	}
	uint8_t cmd = row==0?0b10000000:0b11000000;
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <LCD_SetCursor+0x2a>
 8000796:	2380      	movs	r3, #128	; 0x80
 8000798:	e000      	b.n	800079c <LCD_SetCursor+0x2c>
 800079a:	23c0      	movs	r3, #192	; 0xc0
 800079c:	73fb      	strb	r3, [r7, #15]
	cmd+=col;
 800079e:	7bfa      	ldrb	r2, [r7, #15]
 80007a0:	78bb      	ldrb	r3, [r7, #2]
 80007a2:	4413      	add	r3, r2
 80007a4:	73fb      	strb	r3, [r7, #15]
	return _LCD_SendCommand(dev, cmd);
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	4619      	mov	r1, r3
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff ff6c 	bl	8000688 <_LCD_SendCommand>
 80007b0:	4603      	mov	r3, r0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <LCD_Printf>:

HAL_StatusTypeDef LCD_Printf(LCD_HandleTypeDef *dev, const char *format, ...) {
 80007ba:	b40e      	push	{r1, r2, r3}
 80007bc:	b580      	push	{r7, lr}
 80007be:	b089      	sub	sp, #36	; 0x24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	char lcd_buffer[COLUMNS + 1];
	va_list args;
	va_start(args, format);
 80007c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007c8:	60bb      	str	r3, [r7, #8]
	vsnprintf(lcd_buffer, COLUMNS + 1, format, args);
 80007ca:	f107 000c 	add.w	r0, r7, #12
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007d2:	2111      	movs	r1, #17
 80007d4:	f005 fefa 	bl	80065cc <vsniprintf>
	va_end(args);
	return LCD_Print(dev, lcd_buffer);
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	4619      	mov	r1, r3
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff ff74 	bl	80006cc <LCD_Print>
 80007e4:	4603      	mov	r3, r0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3724      	adds	r7, #36	; 0x24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007f0:	b003      	add	sp, #12
 80007f2:	4770      	bx	lr

080007f4 <ldr_init>:
#include "ldr.h"
#include <stdio.h>
#include <stdint.h>
#include <string.h>

void ldr_init(ADC_HandleTypeDef type) {
 80007f4:	b084      	sub	sp, #16
 80007f6:	b580      	push	{r7, lr}
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	f107 0c08 	add.w	ip, r7, #8
 80007fe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_ADC_Start(&type);
 8000802:	f107 0008 	add.w	r0, r7, #8
 8000806:	f001 fa6f 	bl	8001ce8 <HAL_ADC_Start>
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000812:	b004      	add	sp, #16
 8000814:	4770      	bx	lr

08000816 <ldr_stop>:
void ldr_stop(ADC_HandleTypeDef type) {
 8000816:	b084      	sub	sp, #16
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
 800081c:	f107 0c08 	add.w	ip, r7, #8
 8000820:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_ADC_Stop(&type);
 8000824:	f107 0008 	add.w	r0, r7, #8
 8000828:	f001 fb30 	bl	8001e8c <HAL_ADC_Stop>
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000834:	b004      	add	sp, #16
 8000836:	4770      	bx	lr

08000838 <ldr_get_value>:

uint32_t ldr_get_value(ADC_HandleTypeDef type, uint32_t delay_ms) {
 8000838:	b084      	sub	sp, #16
 800083a:	b5b0      	push	{r4, r5, r7, lr}
 800083c:	b090      	sub	sp, #64	; 0x40
 800083e:	af0e      	add	r7, sp, #56	; 0x38
 8000840:	f107 0418 	add.w	r4, r7, #24
 8000844:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t aValue;
	ldr_init(type);
 8000848:	466d      	mov	r5, sp
 800084a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800084e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000850:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000852:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000854:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000858:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800085a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800085e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000862:	f107 0318 	add.w	r3, r7, #24
 8000866:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000868:	f7ff ffc4 	bl	80007f4 <ldr_init>
	if (HAL_ADC_PollForConversion(&type, 1000) == HAL_OK) {
 800086c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000870:	f107 0018 	add.w	r0, r7, #24
 8000874:	f001 fb3d 	bl	8001ef2 <HAL_ADC_PollForConversion>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d11b      	bne.n	80008b6 <ldr_get_value+0x7e>
		aValue = HAL_ADC_GetValue(&type);
 800087e:	f107 0018 	add.w	r0, r7, #24
 8000882:	f001 fbc1 	bl	8002008 <HAL_ADC_GetValue>
 8000886:	6078      	str	r0, [r7, #4]
	} else {
		return ERROR_NUM;
	}
	ldr_stop(type);
 8000888:	466d      	mov	r5, sp
 800088a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800088e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000890:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000892:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000894:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000896:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000898:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800089a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800089e:	e885 0003 	stmia.w	r5, {r0, r1}
 80008a2:	f107 0318 	add.w	r3, r7, #24
 80008a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008a8:	f7ff ffb5 	bl	8000816 <ldr_stop>
	HAL_Delay(delay_ms);
 80008ac:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80008ae:	f001 f9b3 	bl	8001c18 <HAL_Delay>
	return aValue;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	e001      	b.n	80008ba <ldr_get_value+0x82>
		return ERROR_NUM;
 80008b6:	f241 3388 	movw	r3, #5000	; 0x1388
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80008c4:	b004      	add	sp, #16
 80008c6:	4770      	bx	lr

080008c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ca:	b0ad      	sub	sp, #180	; 0xb4
 80008cc:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ce:	f001 f931 	bl	8001b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d2:	f000 f90b 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d6:	f000 fbc5 	bl	8001064 <MX_GPIO_Init>
  MX_ETH_Init();
 80008da:	f000 fa67 	bl	8000dac <MX_ETH_Init>
  MX_USART3_UART_Init();
 80008de:	f000 fb69 	bl	8000fb4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008e2:	f000 fb91 	bl	8001008 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80008e6:	f000 faef 	bl	8000ec8 <MX_TIM2_Init>
  MX_ADC1_Init();
 80008ea:	f000 f969 	bl	8000bc0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80008ee:	f000 f9b9 	bl	8000c64 <MX_ADC2_Init>
  MX_ADC3_Init();
 80008f2:	f000 fa09 	bl	8000d08 <MX_ADC3_Init>
  MX_I2C2_Init();
 80008f6:	f000 faa7 	bl	8000e48 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  char voltageMsg[20];
  LCD_HandleTypeDef lcd_handle = {
 80008fa:	4a6f      	ldr	r2, [pc, #444]	; (8000ab8 <main+0x1f0>)
 80008fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000900:	ca07      	ldmia	r2, {r0, r1, r2}
 8000902:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		  .i2c_addr = LCD_DEFAULT_ADDR,
  	  	  .i2c = &hi2c2,
  	  	  .backlight_enable = true };
  LCD_Begin(&lcd_handle);
 8000906:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fefd 	bl	800070a <LCD_Begin>
  servo_start_init(&htim2, TIM_CHANNEL_2);
 8000910:	2104      	movs	r1, #4
 8000912:	486a      	ldr	r0, [pc, #424]	; (8000abc <main+0x1f4>)
 8000914:	f000 fcf6 	bl	8001304 <servo_start_init>
  servo_reset();
 8000918:	f000 fd10 	bl	800133c <servo_reset>

  uint8_t iterator = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  iterator++;
 8000922:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000926:	3301      	adds	r3, #1
 8000928:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	  uint16_t first = ldr_get_value(hadc1, 0);
 800092c:	4e64      	ldr	r6, [pc, #400]	; (8000ac0 <main+0x1f8>)
 800092e:	2300      	movs	r3, #0
 8000930:	930e      	str	r3, [sp, #56]	; 0x38
 8000932:	466d      	mov	r5, sp
 8000934:	f106 0410 	add.w	r4, r6, #16
 8000938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800093a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800093c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800093e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000942:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000944:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000948:	e885 0003 	stmia.w	r5, {r0, r1}
 800094c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000950:	f7ff ff72 	bl	8000838 <ldr_get_value>
 8000954:	4603      	mov	r3, r0
 8000956:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	  uint16_t second = ldr_get_value(hadc2, 0);
 800095a:	4e5a      	ldr	r6, [pc, #360]	; (8000ac4 <main+0x1fc>)
 800095c:	2300      	movs	r3, #0
 800095e:	930e      	str	r3, [sp, #56]	; 0x38
 8000960:	466d      	mov	r5, sp
 8000962:	f106 0410 	add.w	r4, r6, #16
 8000966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800096a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800096c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800096e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000972:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000976:	e885 0003 	stmia.w	r5, {r0, r1}
 800097a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800097e:	f7ff ff5b 	bl	8000838 <ldr_get_value>
 8000982:	4603      	mov	r3, r0
 8000984:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	  int16_t per_diff = first - second;
 8000988:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800098c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	b29b      	uxth	r3, r3
 8000994:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	  uint16_t currentpulse = servo_rot(per_diff);
 8000998:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fcd7 	bl	8001350 <servo_rot>
 80009a2:	4603      	mov	r3, r0
 80009a4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	  uint16_t solar_value = ldr_get_value(hadc3, 0);
 80009a8:	4e47      	ldr	r6, [pc, #284]	; (8000ac8 <main+0x200>)
 80009aa:	2300      	movs	r3, #0
 80009ac:	930e      	str	r3, [sp, #56]	; 0x38
 80009ae:	466d      	mov	r5, sp
 80009b0:	f106 0410 	add.w	r4, r6, #16
 80009b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80009c8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80009cc:	f7ff ff34 	bl	8000838 <ldr_get_value>
 80009d0:	4603      	mov	r3, r0
 80009d2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	  if(iterator % 75 == 0) {
 80009d6:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 80009da:	4b3c      	ldr	r3, [pc, #240]	; (8000acc <main+0x204>)
 80009dc:	fba3 2301 	umull	r2, r3, r3, r1
 80009e0:	08da      	lsrs	r2, r3, #3
 80009e2:	4613      	mov	r3, r2
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	4413      	add	r3, r2
 80009e8:	011a      	lsls	r2, r3, #4
 80009ea:	1ad2      	subs	r2, r2, r3
 80009ec:	1a8b      	subs	r3, r1, r2
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d142      	bne.n	8000a7a <main+0x1b2>
		  float voltage = (float)solar_value * 3.3f / 4095.0f * 1000.0f;
 80009f4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80009f8:	ee07 3a90 	vmov	s15, r3
 80009fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a00:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8000ad0 <main+0x208>
 8000a04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a08:	eddf 6a32 	vldr	s13, [pc, #200]	; 8000ad4 <main+0x20c>
 8000a0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a10:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000ad8 <main+0x210>
 8000a14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a18:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		  int voltageInt = (int)(voltage);
 8000a1c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000a20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a24:	ee17 3a90 	vmov	r3, s15
 8000a28:	65fb      	str	r3, [r7, #92]	; 0x5c
		  int voltageFrac = (int)((voltage - voltageInt) * 10);
 8000a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a2c:	ee07 3a90 	vmov	s15, r3
 8000a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a34:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000a38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a3c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000a40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a48:	ee17 3a90 	vmov	r3, s15
 8000a4c:	65bb      	str	r3, [r7, #88]	; 0x58
		  sprintf(voltageMsg, "Voltage:%d.%01dmV", voltageInt, voltageFrac);
 8000a4e:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000a52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000a56:	4921      	ldr	r1, [pc, #132]	; (8000adc <main+0x214>)
 8000a58:	f005 fd6c 	bl	8006534 <siprintf>
		  //snprintf(voltageMsg, sizeof(voltageMsg), "Voltage: %.2f mV", voltage);
		  LCD_SetCursor(&lcd_handle, 0, 0);
 8000a5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fe83 	bl	8000770 <LCD_SetCursor>
		  LCD_Printf(&lcd_handle, voltageMsg);
 8000a6a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000a6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fea0 	bl	80007ba <LCD_Printf>
	  }
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET) {
 8000a7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7e:	4818      	ldr	r0, [pc, #96]	; (8000ae0 <main+0x218>)
 8000a80:	f002 fae4 	bl	800304c <HAL_GPIO_ReadPin>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d101      	bne.n	8000a8e <main+0x1c6>
		  servo_reset();
 8000a8a:	f000 fc57 	bl	800133c <servo_reset>
	  }
	  char buf[50];
	  sprintf(buf, "Pulse: %lu\r\n", currentpulse);
 8000a8e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	4913      	ldr	r1, [pc, #76]	; (8000ae4 <main+0x21c>)
 8000a96:	4618      	mov	r0, r3
 8000a98:	f005 fd4c 	bl	8006534 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), 1000);
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fba6 	bl	80001f0 <strlen>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	1d39      	adds	r1, r7, #4
 8000aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aae:	480e      	ldr	r0, [pc, #56]	; (8000ae8 <main+0x220>)
 8000ab0:	f004 fec9 	bl	8005846 <HAL_UART_Transmit>
  {
 8000ab4:	e735      	b.n	8000922 <main+0x5a>
 8000ab6:	bf00      	nop
 8000ab8:	08006f2c 	.word	0x08006f2c
 8000abc:	200003d0 	.word	0x200003d0
 8000ac0:	200001f4 	.word	0x200001f4
 8000ac4:	2000023c 	.word	0x2000023c
 8000ac8:	20000284 	.word	0x20000284
 8000acc:	1b4e81b5 	.word	0x1b4e81b5
 8000ad0:	40533333 	.word	0x40533333
 8000ad4:	457ff000 	.word	0x457ff000
 8000ad8:	447a0000 	.word	0x447a0000
 8000adc:	08006f08 	.word	0x08006f08
 8000ae0:	40020800 	.word	0x40020800
 8000ae4:	08006f1c 	.word	0x08006f1c
 8000ae8:	20000418 	.word	0x20000418

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b094      	sub	sp, #80	; 0x50
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 0320 	add.w	r3, r7, #32
 8000af6:	2230      	movs	r2, #48	; 0x30
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f005 fd74 	bl	80065e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	4b28      	ldr	r3, [pc, #160]	; (8000bb8 <SystemClock_Config+0xcc>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	4a27      	ldr	r2, [pc, #156]	; (8000bb8 <SystemClock_Config+0xcc>)
 8000b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b20:	4b25      	ldr	r3, [pc, #148]	; (8000bb8 <SystemClock_Config+0xcc>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <SystemClock_Config+0xd0>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a21      	ldr	r2, [pc, #132]	; (8000bbc <SystemClock_Config+0xd0>)
 8000b36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <SystemClock_Config+0xd0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b4c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b52:	2302      	movs	r3, #2
 8000b54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b5c:	2304      	movs	r3, #4
 8000b5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b60:	23a8      	movs	r3, #168	; 0xa8
 8000b62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b64:	2302      	movs	r3, #2
 8000b66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b68:	2307      	movs	r3, #7
 8000b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6c:	f107 0320 	add.w	r3, r7, #32
 8000b70:	4618      	mov	r0, r3
 8000b72:	f003 f9af 	bl	8003ed4 <HAL_RCC_OscConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b7c:	f000 fb70 	bl	8001260 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b80:	230f      	movs	r3, #15
 8000b82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b84:	2302      	movs	r3, #2
 8000b86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000b8c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	2105      	movs	r1, #5
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f003 fc10 	bl	80043c4 <HAL_RCC_ClockConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000baa:	f000 fb59 	bl	8001260 <Error_Handler>
  }
}
 8000bae:	bf00      	nop
 8000bb0:	3750      	adds	r7, #80	; 0x50
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40007000 	.word	0x40007000

08000bc0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bd2:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <MX_ADC1_Init+0x98>)
 8000bd4:	4a21      	ldr	r2, [pc, #132]	; (8000c5c <MX_ADC1_Init+0x9c>)
 8000bd6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <MX_ADC1_Init+0x98>)
 8000bda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bde:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000be0:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <MX_ADC1_Init+0x98>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000be6:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <MX_ADC1_Init+0x98>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <MX_ADC1_Init+0x98>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <MX_ADC1_Init+0x98>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bfa:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <MX_ADC1_Init+0x98>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c00:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <MX_ADC1_Init+0x98>)
 8000c02:	4a17      	ldr	r2, [pc, #92]	; (8000c60 <MX_ADC1_Init+0xa0>)
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <MX_ADC1_Init+0x98>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <MX_ADC1_Init+0x98>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_ADC1_Init+0x98>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_ADC1_Init+0x98>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c20:	480d      	ldr	r0, [pc, #52]	; (8000c58 <MX_ADC1_Init+0x98>)
 8000c22:	f001 f81d 	bl	8001c60 <HAL_ADC_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c2c:	f000 fb18 	bl	8001260 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000c30:	230a      	movs	r3, #10
 8000c32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c34:	2301      	movs	r3, #1
 8000c36:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4805      	ldr	r0, [pc, #20]	; (8000c58 <MX_ADC1_Init+0x98>)
 8000c42:	f001 f9ef 	bl	8002024 <HAL_ADC_ConfigChannel>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c4c:	f000 fb08 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c50:	bf00      	nop
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	200001f4 	.word	0x200001f4
 8000c5c:	40012000 	.word	0x40012000
 8000c60:	0f000001 	.word	0x0f000001

08000c64 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <MX_ADC2_Init+0x98>)
 8000c78:	4a21      	ldr	r2, [pc, #132]	; (8000d00 <MX_ADC2_Init+0x9c>)
 8000c7a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <MX_ADC2_Init+0x98>)
 8000c7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c82:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c84:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <MX_ADC2_Init+0x98>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <MX_ADC2_Init+0x98>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <MX_ADC2_Init+0x98>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_ADC2_Init+0x98>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_ADC2_Init+0x98>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <MX_ADC2_Init+0x98>)
 8000ca6:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <MX_ADC2_Init+0xa0>)
 8000ca8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_ADC2_Init+0x98>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_ADC2_Init+0x98>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_ADC2_Init+0x98>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_ADC2_Init+0x98>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <MX_ADC2_Init+0x98>)
 8000cc6:	f000 ffcb 	bl	8001c60 <HAL_ADC_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000cd0:	f000 fac6 	bl	8001260 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000cd4:	230d      	movs	r3, #13
 8000cd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_ADC2_Init+0x98>)
 8000ce6:	f001 f99d 	bl	8002024 <HAL_ADC_ConfigChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000cf0:	f000 fab6 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	2000023c 	.word	0x2000023c
 8000d00:	40012100 	.word	0x40012100
 8000d04:	0f000001 	.word	0x0f000001

08000d08 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d0e:	463b      	mov	r3, r7
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000d1a:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d1c:	4a21      	ldr	r2, [pc, #132]	; (8000da4 <MX_ADC3_Init+0x9c>)
 8000d1e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d20:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d26:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d42:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d4a:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <MX_ADC3_Init+0xa0>)
 8000d4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d68:	480d      	ldr	r0, [pc, #52]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d6a:	f000 ff79 	bl	8001c60 <HAL_ADC_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000d74:	f000 fa74 	bl	8001260 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d78:	2309      	movs	r3, #9
 8000d7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d84:	463b      	mov	r3, r7
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d8a:	f001 f94b 	bl	8002024 <HAL_ADC_ConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000d94:	f000 fa64 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000284 	.word	0x20000284
 8000da4:	40012200 	.word	0x40012200
 8000da8:	0f000001 	.word	0x0f000001

08000dac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000db0:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <MX_ETH_Init+0x84>)
 8000db2:	4a20      	ldr	r2, [pc, #128]	; (8000e34 <MX_ETH_Init+0x88>)
 8000db4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <MX_ETH_Init+0x8c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000dbc:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <MX_ETH_Init+0x8c>)
 8000dbe:	2280      	movs	r2, #128	; 0x80
 8000dc0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <MX_ETH_Init+0x8c>)
 8000dc4:	22e1      	movs	r2, #225	; 0xe1
 8000dc6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <MX_ETH_Init+0x8c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <MX_ETH_Init+0x8c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000dd4:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_ETH_Init+0x8c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <MX_ETH_Init+0x84>)
 8000ddc:	4a16      	ldr	r2, [pc, #88]	; (8000e38 <MX_ETH_Init+0x8c>)
 8000dde:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <MX_ETH_Init+0x84>)
 8000de2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000de6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_ETH_Init+0x84>)
 8000dea:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <MX_ETH_Init+0x90>)
 8000dec:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <MX_ETH_Init+0x84>)
 8000df0:	4a13      	ldr	r2, [pc, #76]	; (8000e40 <MX_ETH_Init+0x94>)
 8000df2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000df4:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_ETH_Init+0x84>)
 8000df6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000dfa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <MX_ETH_Init+0x84>)
 8000dfe:	f001 fc51 	bl	80026a4 <HAL_ETH_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000e08:	f000 fa2a 	bl	8001260 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000e0c:	2238      	movs	r2, #56	; 0x38
 8000e0e:	2100      	movs	r1, #0
 8000e10:	480c      	ldr	r0, [pc, #48]	; (8000e44 <MX_ETH_Init+0x98>)
 8000e12:	f005 fbe9 	bl	80065e8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <MX_ETH_Init+0x98>)
 8000e18:	2221      	movs	r2, #33	; 0x21
 8000e1a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <MX_ETH_Init+0x98>)
 8000e1e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000e22:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000e24:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <MX_ETH_Init+0x98>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200002cc 	.word	0x200002cc
 8000e34:	40028000 	.word	0x40028000
 8000e38:	20000968 	.word	0x20000968
 8000e3c:	20000154 	.word	0x20000154
 8000e40:	200000b4 	.word	0x200000b4
 8000e44:	2000007c 	.word	0x2000007c

08000e48 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ec0 <MX_I2C2_Init+0x78>)
 8000e50:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e54:	4a1b      	ldr	r2, [pc, #108]	; (8000ec4 <MX_I2C2_Init+0x7c>)
 8000e56:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e58:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e64:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e6a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e86:	f002 f913 	bl	80030b0 <HAL_I2C_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000e90:	f000 f9e6 	bl	8001260 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e94:	2100      	movs	r1, #0
 8000e96:	4809      	ldr	r0, [pc, #36]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e98:	f002 fe83 	bl	8003ba2 <HAL_I2CEx_ConfigAnalogFilter>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000ea2:	f000 f9dd 	bl	8001260 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4804      	ldr	r0, [pc, #16]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000eaa:	f002 feb6 	bl	8003c1a <HAL_I2CEx_ConfigDigitalFilter>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000eb4:	f000 f9d4 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	2000037c 	.word	0x2000037c
 8000ec0:	40005800 	.word	0x40005800
 8000ec4:	000186a0 	.word	0x000186a0

08000ec8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08e      	sub	sp, #56	; 0x38
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ece:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000edc:	f107 0320 	add.w	r3, r7, #32
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
 8000ef4:	615a      	str	r2, [r3, #20]
 8000ef6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <MX_TIM2_Init+0xe8>)
 8000efa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000efe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 419;
 8000f00:	4b2b      	ldr	r3, [pc, #172]	; (8000fb0 <MX_TIM2_Init+0xe8>)
 8000f02:	f240 12a3 	movw	r2, #419	; 0x1a3
 8000f06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f08:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <MX_TIM2_Init+0xe8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000f0e:	4b28      	ldr	r3, [pc, #160]	; (8000fb0 <MX_TIM2_Init+0xe8>)
 8000f10:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f16:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <MX_TIM2_Init+0xe8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1c:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <MX_TIM2_Init+0xe8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f22:	4823      	ldr	r0, [pc, #140]	; (8000fb0 <MX_TIM2_Init+0xe8>)
 8000f24:	f003 fc6e 	bl	8004804 <HAL_TIM_Base_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000f2e:	f000 f997 	bl	8001260 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	481c      	ldr	r0, [pc, #112]	; (8000fb0 <MX_TIM2_Init+0xe8>)
 8000f40:	f003 ff9a 	bl	8004e78 <HAL_TIM_ConfigClockSource>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000f4a:	f000 f989 	bl	8001260 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f4e:	4818      	ldr	r0, [pc, #96]	; (8000fb0 <MX_TIM2_Init+0xe8>)
 8000f50:	f003 fca7 	bl	80048a2 <HAL_TIM_PWM_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000f5a:	f000 f981 	bl	8001260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f66:	f107 0320 	add.w	r3, r7, #32
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4810      	ldr	r0, [pc, #64]	; (8000fb0 <MX_TIM2_Init+0xe8>)
 8000f6e:	f004 fb8d 	bl	800568c <HAL_TIMEx_MasterConfigSynchronization>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f78:	f000 f972 	bl	8001260 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f7c:	2360      	movs	r3, #96	; 0x60
 8000f7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2204      	movs	r2, #4
 8000f90:	4619      	mov	r1, r3
 8000f92:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <MX_TIM2_Init+0xe8>)
 8000f94:	f003 feae 	bl	8004cf4 <HAL_TIM_PWM_ConfigChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000f9e:	f000 f95f 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fa2:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <MX_TIM2_Init+0xe8>)
 8000fa4:	f000 fc46 	bl	8001834 <HAL_TIM_MspPostInit>

}
 8000fa8:	bf00      	nop
 8000faa:	3738      	adds	r7, #56	; 0x38
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200003d0 	.word	0x200003d0

08000fb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fba:	4a12      	ldr	r2, [pc, #72]	; (8001004 <MX_USART3_UART_Init+0x50>)
 8000fbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fda:	220c      	movs	r2, #12
 8000fdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fec:	f004 fbde 	bl	80057ac <HAL_UART_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ff6:	f000 f933 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000418 	.word	0x20000418
 8001004:	40004800 	.word	0x40004800

08001008 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800100e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001012:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001016:	2204      	movs	r2, #4
 8001018:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800101c:	2202      	movs	r2, #2
 800101e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001028:	2202      	movs	r2, #2
 800102a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800102e:	2201      	movs	r2, #1
 8001030:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001040:	2201      	movs	r2, #1
 8001042:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001046:	2200      	movs	r2, #0
 8001048:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800104c:	f002 fe24 	bl	8003c98 <HAL_PCD_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001056:	f000 f903 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	2000045c 	.word	0x2000045c

08001064 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08e      	sub	sp, #56	; 0x38
 8001068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
 800107e:	4b72      	ldr	r3, [pc, #456]	; (8001248 <MX_GPIO_Init+0x1e4>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a71      	ldr	r2, [pc, #452]	; (8001248 <MX_GPIO_Init+0x1e4>)
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b6f      	ldr	r3, [pc, #444]	; (8001248 <MX_GPIO_Init+0x1e4>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0304 	and.w	r3, r3, #4
 8001092:	623b      	str	r3, [r7, #32]
 8001094:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
 800109a:	4b6b      	ldr	r3, [pc, #428]	; (8001248 <MX_GPIO_Init+0x1e4>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a6a      	ldr	r2, [pc, #424]	; (8001248 <MX_GPIO_Init+0x1e4>)
 80010a0:	f043 0320 	orr.w	r3, r3, #32
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b68      	ldr	r3, [pc, #416]	; (8001248 <MX_GPIO_Init+0x1e4>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0320 	and.w	r3, r3, #32
 80010ae:	61fb      	str	r3, [r7, #28]
 80010b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
 80010b6:	4b64      	ldr	r3, [pc, #400]	; (8001248 <MX_GPIO_Init+0x1e4>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a63      	ldr	r2, [pc, #396]	; (8001248 <MX_GPIO_Init+0x1e4>)
 80010bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b61      	ldr	r3, [pc, #388]	; (8001248 <MX_GPIO_Init+0x1e4>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ca:	61bb      	str	r3, [r7, #24]
 80010cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	4b5d      	ldr	r3, [pc, #372]	; (8001248 <MX_GPIO_Init+0x1e4>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a5c      	ldr	r2, [pc, #368]	; (8001248 <MX_GPIO_Init+0x1e4>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b5a      	ldr	r3, [pc, #360]	; (8001248 <MX_GPIO_Init+0x1e4>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	4b56      	ldr	r3, [pc, #344]	; (8001248 <MX_GPIO_Init+0x1e4>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a55      	ldr	r2, [pc, #340]	; (8001248 <MX_GPIO_Init+0x1e4>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b53      	ldr	r3, [pc, #332]	; (8001248 <MX_GPIO_Init+0x1e4>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	4b4f      	ldr	r3, [pc, #316]	; (8001248 <MX_GPIO_Init+0x1e4>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a4e      	ldr	r2, [pc, #312]	; (8001248 <MX_GPIO_Init+0x1e4>)
 8001110:	f043 0310 	orr.w	r3, r3, #16
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b4c      	ldr	r3, [pc, #304]	; (8001248 <MX_GPIO_Init+0x1e4>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0310 	and.w	r3, r3, #16
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	4b48      	ldr	r3, [pc, #288]	; (8001248 <MX_GPIO_Init+0x1e4>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a47      	ldr	r2, [pc, #284]	; (8001248 <MX_GPIO_Init+0x1e4>)
 800112c:	f043 0308 	orr.w	r3, r3, #8
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b45      	ldr	r3, [pc, #276]	; (8001248 <MX_GPIO_Init+0x1e4>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	4b41      	ldr	r3, [pc, #260]	; (8001248 <MX_GPIO_Init+0x1e4>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a40      	ldr	r2, [pc, #256]	; (8001248 <MX_GPIO_Init+0x1e4>)
 8001148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b3e      	ldr	r3, [pc, #248]	; (8001248 <MX_GPIO_Init+0x1e4>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001160:	483a      	ldr	r0, [pc, #232]	; (800124c <MX_GPIO_Init+0x1e8>)
 8001162:	f001 ff8b 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800116c:	4838      	ldr	r0, [pc, #224]	; (8001250 <MX_GPIO_Init+0x1ec>)
 800116e:	f001 ff85 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8001172:	2201      	movs	r2, #1
 8001174:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001178:	4836      	ldr	r0, [pc, #216]	; (8001254 <MX_GPIO_Init+0x1f0>)
 800117a:	f001 ff7f 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	2140      	movs	r1, #64	; 0x40
 8001182:	4835      	ldr	r0, [pc, #212]	; (8001258 <MX_GPIO_Init+0x1f4>)
 8001184:	f001 ff7a 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800118e:	4832      	ldr	r0, [pc, #200]	; (8001258 <MX_GPIO_Init+0x1f4>)
 8001190:	f001 ff74 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001194:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800119a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a8:	4619      	mov	r1, r3
 80011aa:	482c      	ldr	r0, [pc, #176]	; (800125c <MX_GPIO_Init+0x1f8>)
 80011ac:	f001 fda2 	bl	8002cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80011b0:	f244 0381 	movw	r3, #16513	; 0x4081
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c6:	4619      	mov	r1, r3
 80011c8:	4820      	ldr	r0, [pc, #128]	; (800124c <MX_GPIO_Init+0x1e8>)
 80011ca:	f001 fd93 	bl	8002cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e4:	4619      	mov	r1, r3
 80011e6:	481a      	ldr	r0, [pc, #104]	; (8001250 <MX_GPIO_Init+0x1ec>)
 80011e8:	f001 fd84 	bl	8002cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001202:	4619      	mov	r1, r3
 8001204:	4813      	ldr	r0, [pc, #76]	; (8001254 <MX_GPIO_Init+0x1f0>)
 8001206:	f001 fd75 	bl	8002cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin PG14 */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|GPIO_PIN_14;
 800120a:	f244 0340 	movw	r3, #16448	; 0x4040
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800121c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001220:	4619      	mov	r1, r3
 8001222:	480d      	ldr	r0, [pc, #52]	; (8001258 <MX_GPIO_Init+0x1f4>)
 8001224:	f001 fd66 	bl	8002cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122c:	2300      	movs	r3, #0
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001238:	4619      	mov	r1, r3
 800123a:	4807      	ldr	r0, [pc, #28]	; (8001258 <MX_GPIO_Init+0x1f4>)
 800123c:	f001 fd5a 	bl	8002cf4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001240:	bf00      	nop
 8001242:	3738      	adds	r7, #56	; 0x38
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40023800 	.word	0x40023800
 800124c:	40020400 	.word	0x40020400
 8001250:	40021400 	.word	0x40021400
 8001254:	40021000 	.word	0x40021000
 8001258:	40021800 	.word	0x40021800
 800125c:	40020800 	.word	0x40020800

08001260 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001264:	b672      	cpsid	i
}
 8001266:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001268:	e7fe      	b.n	8001268 <Error_Handler+0x8>
	...

0800126c <set_Pulse>:
static uint32_t currentpulse = LOWER_PULSE_LIMIT;



static void set_Pulse(uint32_t pulse)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	if(pulse <= UPPER_PULSE_LIMIT && pulse >= LOWER_PULSE_LIMIT)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2bfa      	cmp	r3, #250	; 0xfa
 8001278:	d828      	bhi.n	80012cc <set_Pulse+0x60>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b31      	cmp	r3, #49	; 0x31
 800127e:	d925      	bls.n	80012cc <set_Pulse+0x60>
	{
		currentpulse = pulse;
 8001280:	4a15      	ldr	r2, [pc, #84]	; (80012d8 <set_Pulse+0x6c>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(timhandle,channel,pulse);
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <set_Pulse+0x70>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d105      	bne.n	800129a <set_Pulse+0x2e>
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <set_Pulse+0x74>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8001298:	e018      	b.n	80012cc <set_Pulse+0x60>
		__HAL_TIM_SET_COMPARE(timhandle,channel,pulse);
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <set_Pulse+0x70>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b04      	cmp	r3, #4
 80012a0:	d105      	bne.n	80012ae <set_Pulse+0x42>
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <set_Pulse+0x74>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6393      	str	r3, [r2, #56]	; 0x38
}
 80012ac:	e00e      	b.n	80012cc <set_Pulse+0x60>
		__HAL_TIM_SET_COMPARE(timhandle,channel,pulse);
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <set_Pulse+0x70>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	d105      	bne.n	80012c2 <set_Pulse+0x56>
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <set_Pulse+0x74>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80012c0:	e004      	b.n	80012cc <set_Pulse+0x60>
		__HAL_TIM_SET_COMPARE(timhandle,channel,pulse);
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <set_Pulse+0x74>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20000974 	.word	0x20000974
 80012e0:	20000970 	.word	0x20000970

080012e4 <set_Servospeed>:


static void set_Servospeed(SERVO_Speed speed)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
	servospeed = speed;
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	4a03      	ldr	r2, [pc, #12]	; (8001300 <set_Servospeed+0x1c>)
 80012f2:	6013      	str	r3, [r2, #0]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	20000978 	.word	0x20000978

08001304 <servo_start_init>:


HAL_StatusTypeDef servo_start_init(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
	timhandle = htim;
 800130e:	4a09      	ldr	r2, [pc, #36]	; (8001334 <servo_start_init+0x30>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6013      	str	r3, [r2, #0]
	channel = Channel;
 8001314:	4a08      	ldr	r2, [pc, #32]	; (8001338 <servo_start_init+0x34>)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	6013      	str	r3, [r2, #0]
	set_Servospeed(SERVO_SPEED_NORMAL);
 800131a:	200a      	movs	r0, #10
 800131c:	f7ff ffe2 	bl	80012e4 <set_Servospeed>
	return HAL_TIM_PWM_Start(htim, Channel);
 8001320:	6839      	ldr	r1, [r7, #0]
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f003 fb16 	bl	8004954 <HAL_TIM_PWM_Start>
 8001328:	4603      	mov	r3, r0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000970 	.word	0x20000970
 8001338:	20000974 	.word	0x20000974

0800133c <servo_reset>:


void servo_reset()
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	set_Pulse(150);
 8001340:	2096      	movs	r0, #150	; 0x96
 8001342:	f7ff ff93 	bl	800126c <set_Pulse>
	HAL_Delay(200);
 8001346:	20c8      	movs	r0, #200	; 0xc8
 8001348:	f000 fc66 	bl	8001c18 <HAL_Delay>
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}

08001350 <servo_rot>:


uint16_t servo_rot(int16_t sensorval)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	80fb      	strh	r3, [r7, #6]
	uint32_t abssens = abs(sensorval);
 800135a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135e:	2b00      	cmp	r3, #0
 8001360:	bfb8      	it	lt
 8001362:	425b      	neglt	r3, r3
 8001364:	b29b      	uxth	r3, r3
 8001366:	60fb      	str	r3, [r7, #12]
	if(abssens <= CHANGE_THRESHOLD) return currentpulse;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2b0a      	cmp	r3, #10
 800136c:	d803      	bhi.n	8001376 <servo_rot+0x26>
 800136e:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <servo_rot+0xd4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	b29b      	uxth	r3, r3
 8001374:	e052      	b.n	800141c <servo_rot+0xcc>

	int8_t i = (sensorval > 0) ? 1: -1;
 8001376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137a:	2b00      	cmp	r3, #0
 800137c:	dd01      	ble.n	8001382 <servo_rot+0x32>
 800137e:	2301      	movs	r3, #1
 8001380:	e001      	b.n	8001386 <servo_rot+0x36>
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	72fb      	strb	r3, [r7, #11]

	if((currentpulse + i) >= UPPER_PULSE_LIMIT) {
 8001388:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800138c:	4b25      	ldr	r3, [pc, #148]	; (8001424 <servo_rot+0xd4>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4413      	add	r3, r2
 8001392:	2bf9      	cmp	r3, #249	; 0xf9
 8001394:	d903      	bls.n	800139e <servo_rot+0x4e>
		currentpulse = UPPER_PULSE_LIMIT;
 8001396:	4b23      	ldr	r3, [pc, #140]	; (8001424 <servo_rot+0xd4>)
 8001398:	22fa      	movs	r2, #250	; 0xfa
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	e011      	b.n	80013c2 <servo_rot+0x72>
	} else if((currentpulse + i) <= LOWER_PULSE_LIMIT) {
 800139e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80013a2:	4b20      	ldr	r3, [pc, #128]	; (8001424 <servo_rot+0xd4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	2b32      	cmp	r3, #50	; 0x32
 80013aa:	d803      	bhi.n	80013b4 <servo_rot+0x64>
		currentpulse = LOWER_PULSE_LIMIT;
 80013ac:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <servo_rot+0xd4>)
 80013ae:	2232      	movs	r2, #50	; 0x32
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	e006      	b.n	80013c2 <servo_rot+0x72>
	} else {
		currentpulse += i;
 80013b4:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80013b8:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <servo_rot+0xd4>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4413      	add	r3, r2
 80013be:	4a19      	ldr	r2, [pc, #100]	; (8001424 <servo_rot+0xd4>)
 80013c0:	6013      	str	r3, [r2, #0]
	}
	__HAL_TIM_SET_COMPARE(timhandle,channel,currentpulse);
 80013c2:	4b19      	ldr	r3, [pc, #100]	; (8001428 <servo_rot+0xd8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d106      	bne.n	80013d8 <servo_rot+0x88>
 80013ca:	4b18      	ldr	r3, [pc, #96]	; (800142c <servo_rot+0xdc>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a14      	ldr	r2, [pc, #80]	; (8001424 <servo_rot+0xd4>)
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	635a      	str	r2, [r3, #52]	; 0x34
 80013d6:	e01b      	b.n	8001410 <servo_rot+0xc0>
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <servo_rot+0xd8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d106      	bne.n	80013ee <servo_rot+0x9e>
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <servo_rot+0xdc>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <servo_rot+0xd4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6393      	str	r3, [r2, #56]	; 0x38
 80013ec:	e010      	b.n	8001410 <servo_rot+0xc0>
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <servo_rot+0xd8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d106      	bne.n	8001404 <servo_rot+0xb4>
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <servo_rot+0xdc>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <servo_rot+0xd4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001402:	e005      	b.n	8001410 <servo_rot+0xc0>
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <servo_rot+0xdc>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <servo_rot+0xd4>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6413      	str	r3, [r2, #64]	; 0x40

	// HAL_Delay((4095/abssens)+4);
    HAL_Delay(10);
 8001410:	200a      	movs	r0, #10
 8001412:	f000 fc01 	bl	8001c18 <HAL_Delay>
	return currentpulse;
 8001416:	4b03      	ldr	r3, [pc, #12]	; (8001424 <servo_rot+0xd4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000000 	.word	0x20000000
 8001428:	20000974 	.word	0x20000974
 800142c:	20000970 	.word	0x20000970

08001430 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <HAL_MspInit+0x4c>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	4a0f      	ldr	r2, [pc, #60]	; (800147c <HAL_MspInit+0x4c>)
 8001440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001444:	6453      	str	r3, [r2, #68]	; 0x44
 8001446:	4b0d      	ldr	r3, [pc, #52]	; (800147c <HAL_MspInit+0x4c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	603b      	str	r3, [r7, #0]
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_MspInit+0x4c>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a08      	ldr	r2, [pc, #32]	; (800147c <HAL_MspInit+0x4c>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_MspInit+0x4c>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800

08001480 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08e      	sub	sp, #56	; 0x38
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a45      	ldr	r2, [pc, #276]	; (80015b4 <HAL_ADC_MspInit+0x134>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d128      	bne.n	80014f4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
 80014a6:	4b44      	ldr	r3, [pc, #272]	; (80015b8 <HAL_ADC_MspInit+0x138>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	4a43      	ldr	r2, [pc, #268]	; (80015b8 <HAL_ADC_MspInit+0x138>)
 80014ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b0:	6453      	str	r3, [r2, #68]	; 0x44
 80014b2:	4b41      	ldr	r3, [pc, #260]	; (80015b8 <HAL_ADC_MspInit+0x138>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ba:	623b      	str	r3, [r7, #32]
 80014bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
 80014c2:	4b3d      	ldr	r3, [pc, #244]	; (80015b8 <HAL_ADC_MspInit+0x138>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a3c      	ldr	r2, [pc, #240]	; (80015b8 <HAL_ADC_MspInit+0x138>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b3a      	ldr	r3, [pc, #232]	; (80015b8 <HAL_ADC_MspInit+0x138>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	61fb      	str	r3, [r7, #28]
 80014d8:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014da:	2301      	movs	r3, #1
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014de:	2303      	movs	r3, #3
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ea:	4619      	mov	r1, r3
 80014ec:	4833      	ldr	r0, [pc, #204]	; (80015bc <HAL_ADC_MspInit+0x13c>)
 80014ee:	f001 fc01 	bl	8002cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80014f2:	e05a      	b.n	80015aa <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a31      	ldr	r2, [pc, #196]	; (80015c0 <HAL_ADC_MspInit+0x140>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d128      	bne.n	8001550 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
 8001502:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <HAL_ADC_MspInit+0x138>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	4a2c      	ldr	r2, [pc, #176]	; (80015b8 <HAL_ADC_MspInit+0x138>)
 8001508:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800150c:	6453      	str	r3, [r2, #68]	; 0x44
 800150e:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <HAL_ADC_MspInit+0x138>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <HAL_ADC_MspInit+0x138>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a25      	ldr	r2, [pc, #148]	; (80015b8 <HAL_ADC_MspInit+0x138>)
 8001524:	f043 0304 	orr.w	r3, r3, #4
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <HAL_ADC_MspInit+0x138>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001536:	2308      	movs	r3, #8
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800153a:	2303      	movs	r3, #3
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001546:	4619      	mov	r1, r3
 8001548:	481c      	ldr	r0, [pc, #112]	; (80015bc <HAL_ADC_MspInit+0x13c>)
 800154a:	f001 fbd3 	bl	8002cf4 <HAL_GPIO_Init>
}
 800154e:	e02c      	b.n	80015aa <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a1b      	ldr	r2, [pc, #108]	; (80015c4 <HAL_ADC_MspInit+0x144>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d127      	bne.n	80015aa <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <HAL_ADC_MspInit+0x138>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	4a15      	ldr	r2, [pc, #84]	; (80015b8 <HAL_ADC_MspInit+0x138>)
 8001564:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001568:	6453      	str	r3, [r2, #68]	; 0x44
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <HAL_ADC_MspInit+0x138>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <HAL_ADC_MspInit+0x138>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a0e      	ldr	r2, [pc, #56]	; (80015b8 <HAL_ADC_MspInit+0x138>)
 8001580:	f043 0320 	orr.w	r3, r3, #32
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <HAL_ADC_MspInit+0x138>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0320 	and.w	r3, r3, #32
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001592:	2308      	movs	r3, #8
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001596:	2303      	movs	r3, #3
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800159e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a2:	4619      	mov	r1, r3
 80015a4:	4808      	ldr	r0, [pc, #32]	; (80015c8 <HAL_ADC_MspInit+0x148>)
 80015a6:	f001 fba5 	bl	8002cf4 <HAL_GPIO_Init>
}
 80015aa:	bf00      	nop
 80015ac:	3738      	adds	r7, #56	; 0x38
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40012000 	.word	0x40012000
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020800 	.word	0x40020800
 80015c0:	40012100 	.word	0x40012100
 80015c4:	40012200 	.word	0x40012200
 80015c8:	40021400 	.word	0x40021400

080015cc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08e      	sub	sp, #56	; 0x38
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a55      	ldr	r2, [pc, #340]	; (8001740 <HAL_ETH_MspInit+0x174>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	f040 80a4 	bne.w	8001738 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80015f0:	2300      	movs	r3, #0
 80015f2:	623b      	str	r3, [r7, #32]
 80015f4:	4b53      	ldr	r3, [pc, #332]	; (8001744 <HAL_ETH_MspInit+0x178>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f8:	4a52      	ldr	r2, [pc, #328]	; (8001744 <HAL_ETH_MspInit+0x178>)
 80015fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001600:	4b50      	ldr	r3, [pc, #320]	; (8001744 <HAL_ETH_MspInit+0x178>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001608:	623b      	str	r3, [r7, #32]
 800160a:	6a3b      	ldr	r3, [r7, #32]
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
 8001610:	4b4c      	ldr	r3, [pc, #304]	; (8001744 <HAL_ETH_MspInit+0x178>)
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001614:	4a4b      	ldr	r2, [pc, #300]	; (8001744 <HAL_ETH_MspInit+0x178>)
 8001616:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800161a:	6313      	str	r3, [r2, #48]	; 0x30
 800161c:	4b49      	ldr	r3, [pc, #292]	; (8001744 <HAL_ETH_MspInit+0x178>)
 800161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001620:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001624:	61fb      	str	r3, [r7, #28]
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	2300      	movs	r3, #0
 800162a:	61bb      	str	r3, [r7, #24]
 800162c:	4b45      	ldr	r3, [pc, #276]	; (8001744 <HAL_ETH_MspInit+0x178>)
 800162e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001630:	4a44      	ldr	r2, [pc, #272]	; (8001744 <HAL_ETH_MspInit+0x178>)
 8001632:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001636:	6313      	str	r3, [r2, #48]	; 0x30
 8001638:	4b42      	ldr	r3, [pc, #264]	; (8001744 <HAL_ETH_MspInit+0x178>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001640:	61bb      	str	r3, [r7, #24]
 8001642:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	4b3e      	ldr	r3, [pc, #248]	; (8001744 <HAL_ETH_MspInit+0x178>)
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	4a3d      	ldr	r2, [pc, #244]	; (8001744 <HAL_ETH_MspInit+0x178>)
 800164e:	f043 0304 	orr.w	r3, r3, #4
 8001652:	6313      	str	r3, [r2, #48]	; 0x30
 8001654:	4b3b      	ldr	r3, [pc, #236]	; (8001744 <HAL_ETH_MspInit+0x178>)
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001660:	2300      	movs	r3, #0
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	4b37      	ldr	r3, [pc, #220]	; (8001744 <HAL_ETH_MspInit+0x178>)
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	4a36      	ldr	r2, [pc, #216]	; (8001744 <HAL_ETH_MspInit+0x178>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6313      	str	r3, [r2, #48]	; 0x30
 8001670:	4b34      	ldr	r3, [pc, #208]	; (8001744 <HAL_ETH_MspInit+0x178>)
 8001672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	4b30      	ldr	r3, [pc, #192]	; (8001744 <HAL_ETH_MspInit+0x178>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	4a2f      	ldr	r2, [pc, #188]	; (8001744 <HAL_ETH_MspInit+0x178>)
 8001686:	f043 0302 	orr.w	r3, r3, #2
 800168a:	6313      	str	r3, [r2, #48]	; 0x30
 800168c:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <HAL_ETH_MspInit+0x178>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	4b29      	ldr	r3, [pc, #164]	; (8001744 <HAL_ETH_MspInit+0x178>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a0:	4a28      	ldr	r2, [pc, #160]	; (8001744 <HAL_ETH_MspInit+0x178>)
 80016a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016a6:	6313      	str	r3, [r2, #48]	; 0x30
 80016a8:	4b26      	ldr	r3, [pc, #152]	; (8001744 <HAL_ETH_MspInit+0x178>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80016b4:	2332      	movs	r3, #50	; 0x32
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016c4:	230b      	movs	r3, #11
 80016c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016cc:	4619      	mov	r1, r3
 80016ce:	481e      	ldr	r0, [pc, #120]	; (8001748 <HAL_ETH_MspInit+0x17c>)
 80016d0:	f001 fb10 	bl	8002cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80016d4:	2386      	movs	r3, #134	; 0x86
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016e4:	230b      	movs	r3, #11
 80016e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ec:	4619      	mov	r1, r3
 80016ee:	4817      	ldr	r0, [pc, #92]	; (800174c <HAL_ETH_MspInit+0x180>)
 80016f0:	f001 fb00 	bl	8002cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80016f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001702:	2303      	movs	r3, #3
 8001704:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001706:	230b      	movs	r3, #11
 8001708:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800170a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170e:	4619      	mov	r1, r3
 8001710:	480f      	ldr	r0, [pc, #60]	; (8001750 <HAL_ETH_MspInit+0x184>)
 8001712:	f001 faef 	bl	8002cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001716:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001724:	2303      	movs	r3, #3
 8001726:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001728:	230b      	movs	r3, #11
 800172a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800172c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001730:	4619      	mov	r1, r3
 8001732:	4808      	ldr	r0, [pc, #32]	; (8001754 <HAL_ETH_MspInit+0x188>)
 8001734:	f001 fade 	bl	8002cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001738:	bf00      	nop
 800173a:	3738      	adds	r7, #56	; 0x38
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40028000 	.word	0x40028000
 8001744:	40023800 	.word	0x40023800
 8001748:	40020800 	.word	0x40020800
 800174c:	40020000 	.word	0x40020000
 8001750:	40020400 	.word	0x40020400
 8001754:	40021800 	.word	0x40021800

08001758 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a19      	ldr	r2, [pc, #100]	; (80017dc <HAL_I2C_MspInit+0x84>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d12b      	bne.n	80017d2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <HAL_I2C_MspInit+0x88>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a17      	ldr	r2, [pc, #92]	; (80017e0 <HAL_I2C_MspInit+0x88>)
 8001784:	f043 0320 	orr.w	r3, r3, #32
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_I2C_MspInit+0x88>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0320 	and.w	r3, r3, #32
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001796:	2303      	movs	r3, #3
 8001798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800179a:	2312      	movs	r3, #18
 800179c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	2303      	movs	r3, #3
 80017a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017a6:	2304      	movs	r3, #4
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	4619      	mov	r1, r3
 80017b0:	480c      	ldr	r0, [pc, #48]	; (80017e4 <HAL_I2C_MspInit+0x8c>)
 80017b2:	f001 fa9f 	bl	8002cf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_I2C_MspInit+0x88>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a08      	ldr	r2, [pc, #32]	; (80017e0 <HAL_I2C_MspInit+0x88>)
 80017c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_I2C_MspInit+0x88>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017d2:	bf00      	nop
 80017d4:	3728      	adds	r7, #40	; 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40005800 	.word	0x40005800
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40021400 	.word	0x40021400

080017e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f8:	d115      	bne.n	8001826 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <HAL_TIM_Base_MspInit+0x48>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <HAL_TIM_Base_MspInit+0x48>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_TIM_Base_MspInit+0x48>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2100      	movs	r1, #0
 800181a:	201c      	movs	r0, #28
 800181c:	f000 ff0b 	bl	8002636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001820:	201c      	movs	r0, #28
 8001822:	f000 ff24 	bl	800266e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800

08001834 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001854:	d11d      	bne.n	8001892 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <HAL_TIM_MspPostInit+0x68>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a0f      	ldr	r2, [pc, #60]	; (800189c <HAL_TIM_MspPostInit+0x68>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b0d      	ldr	r3, [pc, #52]	; (800189c <HAL_TIM_MspPostInit+0x68>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001872:	2308      	movs	r3, #8
 8001874:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2300      	movs	r3, #0
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001882:	2301      	movs	r3, #1
 8001884:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001886:	f107 030c 	add.w	r3, r7, #12
 800188a:	4619      	mov	r1, r3
 800188c:	4804      	ldr	r0, [pc, #16]	; (80018a0 <HAL_TIM_MspPostInit+0x6c>)
 800188e:	f001 fa31 	bl	8002cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001892:	bf00      	nop
 8001894:	3720      	adds	r7, #32
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020400 	.word	0x40020400

080018a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a19      	ldr	r2, [pc, #100]	; (8001928 <HAL_UART_MspInit+0x84>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d12c      	bne.n	8001920 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <HAL_UART_MspInit+0x88>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	4a17      	ldr	r2, [pc, #92]	; (800192c <HAL_UART_MspInit+0x88>)
 80018d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d4:	6413      	str	r3, [r2, #64]	; 0x40
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <HAL_UART_MspInit+0x88>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_UART_MspInit+0x88>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a10      	ldr	r2, [pc, #64]	; (800192c <HAL_UART_MspInit+0x88>)
 80018ec:	f043 0308 	orr.w	r3, r3, #8
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_UART_MspInit+0x88>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190c:	2303      	movs	r3, #3
 800190e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001910:	2307      	movs	r3, #7
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4619      	mov	r1, r3
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <HAL_UART_MspInit+0x8c>)
 800191c:	f001 f9ea 	bl	8002cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001920:	bf00      	nop
 8001922:	3728      	adds	r7, #40	; 0x28
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40004800 	.word	0x40004800
 800192c:	40023800 	.word	0x40023800
 8001930:	40020c00 	.word	0x40020c00

08001934 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	; 0x28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001954:	d13f      	bne.n	80019d6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <HAL_PCD_MspInit+0xac>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a20      	ldr	r2, [pc, #128]	; (80019e0 <HAL_PCD_MspInit+0xac>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <HAL_PCD_MspInit+0xac>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001972:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001984:	230a      	movs	r3, #10
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	4815      	ldr	r0, [pc, #84]	; (80019e4 <HAL_PCD_MspInit+0xb0>)
 8001990:	f001 f9b0 	bl	8002cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001994:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	480e      	ldr	r0, [pc, #56]	; (80019e4 <HAL_PCD_MspInit+0xb0>)
 80019aa:	f001 f9a3 	bl	8002cf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <HAL_PCD_MspInit+0xac>)
 80019b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b2:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <HAL_PCD_MspInit+0xac>)
 80019b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b8:	6353      	str	r3, [r2, #52]	; 0x34
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <HAL_PCD_MspInit+0xac>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	4a07      	ldr	r2, [pc, #28]	; (80019e0 <HAL_PCD_MspInit+0xac>)
 80019c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ca:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_PCD_MspInit+0xac>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80019d6:	bf00      	nop
 80019d8:	3728      	adds	r7, #40	; 0x28
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020000 	.word	0x40020000

080019e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <NMI_Handler+0x4>

080019ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <HardFault_Handler+0x4>

080019f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <MemManage_Handler+0x4>

080019fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <BusFault_Handler+0x4>

08001a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <UsageFault_Handler+0x4>

08001a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a34:	f000 f8d0 	bl	8001bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <TIM2_IRQHandler+0x10>)
 8001a42:	f003 f84f 	bl	8004ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200003d0 	.word	0x200003d0

08001a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a58:	4a14      	ldr	r2, [pc, #80]	; (8001aac <_sbrk+0x5c>)
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <_sbrk+0x60>)
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a64:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <_sbrk+0x64>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d102      	bne.n	8001a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <_sbrk+0x64>)
 8001a6e:	4a12      	ldr	r2, [pc, #72]	; (8001ab8 <_sbrk+0x68>)
 8001a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a72:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <_sbrk+0x64>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d207      	bcs.n	8001a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a80:	f004 fdba 	bl	80065f8 <__errno>
 8001a84:	4603      	mov	r3, r0
 8001a86:	220c      	movs	r2, #12
 8001a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8e:	e009      	b.n	8001aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <_sbrk+0x64>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a96:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <_sbrk+0x64>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <_sbrk+0x64>)
 8001aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20030000 	.word	0x20030000
 8001ab0:	00000400 	.word	0x00000400
 8001ab4:	2000097c 	.word	0x2000097c
 8001ab8:	20000ad0 	.word	0x20000ad0

08001abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <SystemInit+0x20>)
 8001ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ac6:	4a05      	ldr	r2, [pc, #20]	; (8001adc <SystemInit+0x20>)
 8001ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001ae0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b18 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ae4:	480d      	ldr	r0, [pc, #52]	; (8001b1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ae6:	490e      	ldr	r1, [pc, #56]	; (8001b20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ae8:	4a0e      	ldr	r2, [pc, #56]	; (8001b24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aec:	e002      	b.n	8001af4 <LoopCopyDataInit>

08001aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af2:	3304      	adds	r3, #4

08001af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af8:	d3f9      	bcc.n	8001aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afa:	4a0b      	ldr	r2, [pc, #44]	; (8001b28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001afc:	4c0b      	ldr	r4, [pc, #44]	; (8001b2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b00:	e001      	b.n	8001b06 <LoopFillZerobss>

08001b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b04:	3204      	adds	r2, #4

08001b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b08:	d3fb      	bcc.n	8001b02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b0a:	f7ff ffd7 	bl	8001abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b0e:	f004 fd79 	bl	8006604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b12:	f7fe fed9 	bl	80008c8 <main>
  bx  lr    
 8001b16:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b18:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b20:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001b24:	08006f94 	.word	0x08006f94
  ldr r2, =_sbss
 8001b28:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001b2c:	20000acc 	.word	0x20000acc

08001b30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b30:	e7fe      	b.n	8001b30 <ADC_IRQHandler>
	...

08001b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b38:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <HAL_Init+0x40>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	; (8001b74 <HAL_Init+0x40>)
 8001b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_Init+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <HAL_Init+0x40>)
 8001b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <HAL_Init+0x40>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a07      	ldr	r2, [pc, #28]	; (8001b74 <HAL_Init+0x40>)
 8001b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b5c:	2003      	movs	r0, #3
 8001b5e:	f000 fd5f 	bl	8002620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b62:	2000      	movs	r0, #0
 8001b64:	f000 f808 	bl	8001b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b68:	f7ff fc62 	bl	8001430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023c00 	.word	0x40023c00

08001b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_InitTick+0x54>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_InitTick+0x58>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 fd77 	bl	800268a <HAL_SYSTICK_Config>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e00e      	b.n	8001bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b0f      	cmp	r3, #15
 8001baa:	d80a      	bhi.n	8001bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bac:	2200      	movs	r2, #0
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb4:	f000 fd3f 	bl	8002636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb8:	4a06      	ldr	r2, [pc, #24]	; (8001bd4 <HAL_InitTick+0x5c>)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e000      	b.n	8001bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000004 	.word	0x20000004
 8001bd0:	2000000c 	.word	0x2000000c
 8001bd4:	20000008 	.word	0x20000008

08001bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <HAL_IncTick+0x20>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <HAL_IncTick+0x24>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	4a04      	ldr	r2, [pc, #16]	; (8001bfc <HAL_IncTick+0x24>)
 8001bea:	6013      	str	r3, [r2, #0]
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	2000000c 	.word	0x2000000c
 8001bfc:	20000980 	.word	0x20000980

08001c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return uwTick;
 8001c04:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <HAL_GetTick+0x14>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000980 	.word	0x20000980

08001c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c20:	f7ff ffee 	bl	8001c00 <HAL_GetTick>
 8001c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c30:	d005      	beq.n	8001c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <HAL_Delay+0x44>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c3e:	bf00      	nop
 8001c40:	f7ff ffde 	bl	8001c00 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d8f7      	bhi.n	8001c40 <HAL_Delay+0x28>
  {
  }
}
 8001c50:	bf00      	nop
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	2000000c 	.word	0x2000000c

08001c60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e033      	b.n	8001cde <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d109      	bne.n	8001c92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff fbfe 	bl	8001480 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f003 0310 	and.w	r3, r3, #16
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d118      	bne.n	8001cd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ca6:	f023 0302 	bic.w	r3, r3, #2
 8001caa:	f043 0202 	orr.w	r2, r3, #2
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 fae8 	bl	8002288 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f023 0303 	bic.w	r3, r3, #3
 8001cc6:	f043 0201 	orr.w	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40
 8001cce:	e001      	b.n	8001cd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_ADC_Start+0x1a>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e0b2      	b.n	8001e68 <HAL_ADC_Start+0x180>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d018      	beq.n	8001d4a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d28:	4b52      	ldr	r3, [pc, #328]	; (8001e74 <HAL_ADC_Start+0x18c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a52      	ldr	r2, [pc, #328]	; (8001e78 <HAL_ADC_Start+0x190>)
 8001d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d32:	0c9a      	lsrs	r2, r3, #18
 8001d34:	4613      	mov	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4413      	add	r3, r2
 8001d3a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d3c:	e002      	b.n	8001d44 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f9      	bne.n	8001d3e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d17a      	bne.n	8001e4e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d60:	f023 0301 	bic.w	r3, r3, #1
 8001d64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d007      	beq.n	8001d8a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d96:	d106      	bne.n	8001da6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9c:	f023 0206 	bic.w	r2, r3, #6
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	645a      	str	r2, [r3, #68]	; 0x44
 8001da4:	e002      	b.n	8001dac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001db4:	4b31      	ldr	r3, [pc, #196]	; (8001e7c <HAL_ADC_Start+0x194>)
 8001db6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001dc0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 031f 	and.w	r3, r3, #31
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d12a      	bne.n	8001e24 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a2b      	ldr	r2, [pc, #172]	; (8001e80 <HAL_ADC_Start+0x198>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d015      	beq.n	8001e04 <HAL_ADC_Start+0x11c>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a29      	ldr	r2, [pc, #164]	; (8001e84 <HAL_ADC_Start+0x19c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d105      	bne.n	8001dee <HAL_ADC_Start+0x106>
 8001de2:	4b26      	ldr	r3, [pc, #152]	; (8001e7c <HAL_ADC_Start+0x194>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 031f 	and.w	r3, r3, #31
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00a      	beq.n	8001e04 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a25      	ldr	r2, [pc, #148]	; (8001e88 <HAL_ADC_Start+0x1a0>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d136      	bne.n	8001e66 <HAL_ADC_Start+0x17e>
 8001df8:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <HAL_ADC_Start+0x194>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d130      	bne.n	8001e66 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d129      	bne.n	8001e66 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e20:	609a      	str	r2, [r3, #8]
 8001e22:	e020      	b.n	8001e66 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a15      	ldr	r2, [pc, #84]	; (8001e80 <HAL_ADC_Start+0x198>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d11b      	bne.n	8001e66 <HAL_ADC_Start+0x17e>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d114      	bne.n	8001e66 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	e00b      	b.n	8001e66 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f043 0210 	orr.w	r2, r3, #16
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	f043 0201 	orr.w	r2, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	20000004 	.word	0x20000004
 8001e78:	431bde83 	.word	0x431bde83
 8001e7c:	40012300 	.word	0x40012300
 8001e80:	40012000 	.word	0x40012000
 8001e84:	40012100 	.word	0x40012100
 8001e88:	40012200 	.word	0x40012200

08001e8c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_ADC_Stop+0x16>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e021      	b.n	8001ee6 <HAL_ADC_Stop+0x5a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0201 	bic.w	r2, r2, #1
 8001eb8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d109      	bne.n	8001edc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ed0:	f023 0301 	bic.w	r3, r3, #1
 8001ed4:	f043 0201 	orr.w	r2, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b084      	sub	sp, #16
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0e:	d113      	bne.n	8001f38 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f1e:	d10b      	bne.n	8001f38 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	f043 0220 	orr.w	r2, r3, #32
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e063      	b.n	8002000 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001f38:	f7ff fe62 	bl	8001c00 <HAL_GetTick>
 8001f3c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f3e:	e021      	b.n	8001f84 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f46:	d01d      	beq.n	8001f84 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d007      	beq.n	8001f5e <HAL_ADC_PollForConversion+0x6c>
 8001f4e:	f7ff fe57 	bl	8001c00 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d212      	bcs.n	8001f84 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d00b      	beq.n	8001f84 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	f043 0204 	orr.w	r2, r3, #4
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e03d      	b.n	8002000 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d1d6      	bne.n	8001f40 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f06f 0212 	mvn.w	r2, #18
 8001f9a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d123      	bne.n	8001ffe <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d11f      	bne.n	8001ffe <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d006      	beq.n	8001fda <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d111      	bne.n	8001ffe <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d105      	bne.n	8001ffe <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f043 0201 	orr.w	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x1c>
 800203c:	2302      	movs	r3, #2
 800203e:	e113      	b.n	8002268 <HAL_ADC_ConfigChannel+0x244>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b09      	cmp	r3, #9
 800204e:	d925      	bls.n	800209c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68d9      	ldr	r1, [r3, #12]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	b29b      	uxth	r3, r3
 800205c:	461a      	mov	r2, r3
 800205e:	4613      	mov	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4413      	add	r3, r2
 8002064:	3b1e      	subs	r3, #30
 8002066:	2207      	movs	r2, #7
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43da      	mvns	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	400a      	ands	r2, r1
 8002074:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68d9      	ldr	r1, [r3, #12]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	b29b      	uxth	r3, r3
 8002086:	4618      	mov	r0, r3
 8002088:	4603      	mov	r3, r0
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4403      	add	r3, r0
 800208e:	3b1e      	subs	r3, #30
 8002090:	409a      	lsls	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	e022      	b.n	80020e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6919      	ldr	r1, [r3, #16]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	461a      	mov	r2, r3
 80020aa:	4613      	mov	r3, r2
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	4413      	add	r3, r2
 80020b0:	2207      	movs	r2, #7
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43da      	mvns	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	400a      	ands	r2, r1
 80020be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6919      	ldr	r1, [r3, #16]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	4618      	mov	r0, r3
 80020d2:	4603      	mov	r3, r0
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4403      	add	r3, r0
 80020d8:	409a      	lsls	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b06      	cmp	r3, #6
 80020e8:	d824      	bhi.n	8002134 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	3b05      	subs	r3, #5
 80020fc:	221f      	movs	r2, #31
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43da      	mvns	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	400a      	ands	r2, r1
 800210a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	b29b      	uxth	r3, r3
 8002118:	4618      	mov	r0, r3
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	3b05      	subs	r3, #5
 8002126:	fa00 f203 	lsl.w	r2, r0, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	635a      	str	r2, [r3, #52]	; 0x34
 8002132:	e04c      	b.n	80021ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b0c      	cmp	r3, #12
 800213a:	d824      	bhi.n	8002186 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	3b23      	subs	r3, #35	; 0x23
 800214e:	221f      	movs	r2, #31
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43da      	mvns	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	400a      	ands	r2, r1
 800215c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	b29b      	uxth	r3, r3
 800216a:	4618      	mov	r0, r3
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	3b23      	subs	r3, #35	; 0x23
 8002178:	fa00 f203 	lsl.w	r2, r0, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	631a      	str	r2, [r3, #48]	; 0x30
 8002184:	e023      	b.n	80021ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	3b41      	subs	r3, #65	; 0x41
 8002198:	221f      	movs	r2, #31
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43da      	mvns	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	400a      	ands	r2, r1
 80021a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	4618      	mov	r0, r3
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	3b41      	subs	r3, #65	; 0x41
 80021c2:	fa00 f203 	lsl.w	r2, r0, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021ce:	4b29      	ldr	r3, [pc, #164]	; (8002274 <HAL_ADC_ConfigChannel+0x250>)
 80021d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a28      	ldr	r2, [pc, #160]	; (8002278 <HAL_ADC_ConfigChannel+0x254>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d10f      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x1d8>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b12      	cmp	r3, #18
 80021e2:	d10b      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a1d      	ldr	r2, [pc, #116]	; (8002278 <HAL_ADC_ConfigChannel+0x254>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d12b      	bne.n	800225e <HAL_ADC_ConfigChannel+0x23a>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a1c      	ldr	r2, [pc, #112]	; (800227c <HAL_ADC_ConfigChannel+0x258>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d003      	beq.n	8002218 <HAL_ADC_ConfigChannel+0x1f4>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b11      	cmp	r3, #17
 8002216:	d122      	bne.n	800225e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a11      	ldr	r2, [pc, #68]	; (800227c <HAL_ADC_ConfigChannel+0x258>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d111      	bne.n	800225e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <HAL_ADC_ConfigChannel+0x25c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a11      	ldr	r2, [pc, #68]	; (8002284 <HAL_ADC_ConfigChannel+0x260>)
 8002240:	fba2 2303 	umull	r2, r3, r2, r3
 8002244:	0c9a      	lsrs	r2, r3, #18
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002250:	e002      	b.n	8002258 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	3b01      	subs	r3, #1
 8002256:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f9      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	40012300 	.word	0x40012300
 8002278:	40012000 	.word	0x40012000
 800227c:	10000012 	.word	0x10000012
 8002280:	20000004 	.word	0x20000004
 8002284:	431bde83 	.word	0x431bde83

08002288 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002290:	4b79      	ldr	r3, [pc, #484]	; (8002478 <ADC_Init+0x1f0>)
 8002292:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	431a      	orrs	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6859      	ldr	r1, [r3, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	021a      	lsls	r2, r3, #8
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6859      	ldr	r1, [r3, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002302:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6899      	ldr	r1, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231a:	4a58      	ldr	r2, [pc, #352]	; (800247c <ADC_Init+0x1f4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d022      	beq.n	8002366 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800232e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6899      	ldr	r1, [r3, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002350:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6899      	ldr	r1, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	e00f      	b.n	8002386 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002374:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002384:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0202 	bic.w	r2, r2, #2
 8002394:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6899      	ldr	r1, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	7e1b      	ldrb	r3, [r3, #24]
 80023a0:	005a      	lsls	r2, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d01b      	beq.n	80023ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6859      	ldr	r1, [r3, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	3b01      	subs	r3, #1
 80023e0:	035a      	lsls	r2, r3, #13
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	e007      	b.n	80023fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800240a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	3b01      	subs	r3, #1
 8002418:	051a      	lsls	r2, r3, #20
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002430:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6899      	ldr	r1, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800243e:	025a      	lsls	r2, r3, #9
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002456:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6899      	ldr	r1, [r3, #8]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	029a      	lsls	r2, r3, #10
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	609a      	str	r2, [r3, #8]
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40012300 	.word	0x40012300
 800247c:	0f000001 	.word	0x0f000001

08002480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002490:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800249c:	4013      	ands	r3, r2
 800249e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024b2:	4a04      	ldr	r2, [pc, #16]	; (80024c4 <__NVIC_SetPriorityGrouping+0x44>)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	60d3      	str	r3, [r2, #12]
}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024cc:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <__NVIC_GetPriorityGrouping+0x18>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	0a1b      	lsrs	r3, r3, #8
 80024d2:	f003 0307 	and.w	r3, r3, #7
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	db0b      	blt.n	800250e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	f003 021f 	and.w	r2, r3, #31
 80024fc:	4907      	ldr	r1, [pc, #28]	; (800251c <__NVIC_EnableIRQ+0x38>)
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	2001      	movs	r0, #1
 8002506:	fa00 f202 	lsl.w	r2, r0, r2
 800250a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000e100 	.word	0xe000e100

08002520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	6039      	str	r1, [r7, #0]
 800252a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002530:	2b00      	cmp	r3, #0
 8002532:	db0a      	blt.n	800254a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	b2da      	uxtb	r2, r3
 8002538:	490c      	ldr	r1, [pc, #48]	; (800256c <__NVIC_SetPriority+0x4c>)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	0112      	lsls	r2, r2, #4
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	440b      	add	r3, r1
 8002544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002548:	e00a      	b.n	8002560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4908      	ldr	r1, [pc, #32]	; (8002570 <__NVIC_SetPriority+0x50>)
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	3b04      	subs	r3, #4
 8002558:	0112      	lsls	r2, r2, #4
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	440b      	add	r3, r1
 800255e:	761a      	strb	r2, [r3, #24]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000e100 	.word	0xe000e100
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	; 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f1c3 0307 	rsb	r3, r3, #7
 800258e:	2b04      	cmp	r3, #4
 8002590:	bf28      	it	cs
 8002592:	2304      	movcs	r3, #4
 8002594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3304      	adds	r3, #4
 800259a:	2b06      	cmp	r3, #6
 800259c:	d902      	bls.n	80025a4 <NVIC_EncodePriority+0x30>
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3b03      	subs	r3, #3
 80025a2:	e000      	b.n	80025a6 <NVIC_EncodePriority+0x32>
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43da      	mvns	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	401a      	ands	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	fa01 f303 	lsl.w	r3, r1, r3
 80025c6:	43d9      	mvns	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	4313      	orrs	r3, r2
         );
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3724      	adds	r7, #36	; 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ec:	d301      	bcc.n	80025f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ee:	2301      	movs	r3, #1
 80025f0:	e00f      	b.n	8002612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f2:	4a0a      	ldr	r2, [pc, #40]	; (800261c <SysTick_Config+0x40>)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025fa:	210f      	movs	r1, #15
 80025fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002600:	f7ff ff8e 	bl	8002520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <SysTick_Config+0x40>)
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800260a:	4b04      	ldr	r3, [pc, #16]	; (800261c <SysTick_Config+0x40>)
 800260c:	2207      	movs	r2, #7
 800260e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	e000e010 	.word	0xe000e010

08002620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff ff29 	bl	8002480 <__NVIC_SetPriorityGrouping>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002636:	b580      	push	{r7, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af00      	add	r7, sp, #0
 800263c:	4603      	mov	r3, r0
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002648:	f7ff ff3e 	bl	80024c8 <__NVIC_GetPriorityGrouping>
 800264c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	6978      	ldr	r0, [r7, #20]
 8002654:	f7ff ff8e 	bl	8002574 <NVIC_EncodePriority>
 8002658:	4602      	mov	r2, r0
 800265a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff5d 	bl	8002520 <__NVIC_SetPriority>
}
 8002666:	bf00      	nop
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff31 	bl	80024e4 <__NVIC_EnableIRQ>
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff ffa2 	bl	80025dc <SysTick_Config>
 8002698:	4603      	mov	r3, r0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e06c      	b.n	8002790 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d106      	bne.n	80026ce <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2223      	movs	r2, #35	; 0x23
 80026c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7fe ff7f 	bl	80015cc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	4b31      	ldr	r3, [pc, #196]	; (8002798 <HAL_ETH_Init+0xf4>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	4a30      	ldr	r2, [pc, #192]	; (8002798 <HAL_ETH_Init+0xf4>)
 80026d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026dc:	6453      	str	r3, [r2, #68]	; 0x44
 80026de:	4b2e      	ldr	r3, [pc, #184]	; (8002798 <HAL_ETH_Init+0xf4>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80026ea:	4b2c      	ldr	r3, [pc, #176]	; (800279c <HAL_ETH_Init+0xf8>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4a2b      	ldr	r2, [pc, #172]	; (800279c <HAL_ETH_Init+0xf8>)
 80026f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80026f4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80026f6:	4b29      	ldr	r3, [pc, #164]	; (800279c <HAL_ETH_Init+0xf8>)
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	4927      	ldr	r1, [pc, #156]	; (800279c <HAL_ETH_Init+0xf8>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002704:	4b25      	ldr	r3, [pc, #148]	; (800279c <HAL_ETH_Init+0xf8>)
 8002706:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800271e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002720:	f7ff fa6e 	bl	8001c00 <HAL_GetTick>
 8002724:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002726:	e011      	b.n	800274c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002728:	f7ff fa6a 	bl	8001c00 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002736:	d909      	bls.n	800274c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2204      	movs	r2, #4
 800273c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	22e0      	movs	r2, #224	; 0xe0
 8002744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e021      	b.n	8002790 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1e4      	bne.n	8002728 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f958 	bl	8002a14 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f9ff 	bl	8002b68 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 fa55 	bl	8002c1a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	461a      	mov	r2, r3
 8002776:	2100      	movs	r1, #0
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f9bd 	bl	8002af8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2210      	movs	r2, #16
 800278a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40023800 	.word	0x40023800
 800279c:	40013800 	.word	0x40013800

080027a0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	4b51      	ldr	r3, [pc, #324]	; (80028fc <ETH_SetMACConfig+0x15c>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	7c1b      	ldrb	r3, [r3, #16]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d102      	bne.n	80027c8 <ETH_SetMACConfig+0x28>
 80027c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80027c6:	e000      	b.n	80027ca <ETH_SetMACConfig+0x2a>
 80027c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	7c5b      	ldrb	r3, [r3, #17]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d102      	bne.n	80027d8 <ETH_SetMACConfig+0x38>
 80027d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027d6:	e000      	b.n	80027da <ETH_SetMACConfig+0x3a>
 80027d8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027da:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80027e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	7fdb      	ldrb	r3, [r3, #31]
 80027e6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80027e8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80027ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	7f92      	ldrb	r2, [r2, #30]
 80027f4:	2a00      	cmp	r2, #0
 80027f6:	d102      	bne.n	80027fe <ETH_SetMACConfig+0x5e>
 80027f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027fc:	e000      	b.n	8002800 <ETH_SetMACConfig+0x60>
 80027fe:	2200      	movs	r2, #0
                        macconf->Speed |
 8002800:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	7f1b      	ldrb	r3, [r3, #28]
 8002806:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002808:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800280e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	791b      	ldrb	r3, [r3, #4]
 8002814:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002816:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800281e:	2a00      	cmp	r2, #0
 8002820:	d102      	bne.n	8002828 <ETH_SetMACConfig+0x88>
 8002822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002826:	e000      	b.n	800282a <ETH_SetMACConfig+0x8a>
 8002828:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800282a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	7bdb      	ldrb	r3, [r3, #15]
 8002830:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002832:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002838:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002840:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002842:	4313      	orrs	r3, r2
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4313      	orrs	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800285a:	2001      	movs	r0, #1
 800285c:	f7ff f9dc 	bl	8001c18 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002876:	4013      	ands	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800287e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002886:	2a00      	cmp	r2, #0
 8002888:	d101      	bne.n	800288e <ETH_SetMACConfig+0xee>
 800288a:	2280      	movs	r2, #128	; 0x80
 800288c:	e000      	b.n	8002890 <ETH_SetMACConfig+0xf0>
 800288e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002890:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002896:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800289e:	2a01      	cmp	r2, #1
 80028a0:	d101      	bne.n	80028a6 <ETH_SetMACConfig+0x106>
 80028a2:	2208      	movs	r2, #8
 80028a4:	e000      	b.n	80028a8 <ETH_SetMACConfig+0x108>
 80028a6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80028a8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80028b0:	2a01      	cmp	r2, #1
 80028b2:	d101      	bne.n	80028b8 <ETH_SetMACConfig+0x118>
 80028b4:	2204      	movs	r2, #4
 80028b6:	e000      	b.n	80028ba <ETH_SetMACConfig+0x11a>
 80028b8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80028ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80028c2:	2a01      	cmp	r2, #1
 80028c4:	d101      	bne.n	80028ca <ETH_SetMACConfig+0x12a>
 80028c6:	2202      	movs	r2, #2
 80028c8:	e000      	b.n	80028cc <ETH_SetMACConfig+0x12c>
 80028ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028cc:	4313      	orrs	r3, r2
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028e4:	2001      	movs	r0, #1
 80028e6:	f7ff f997 	bl	8001c18 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	619a      	str	r2, [r3, #24]
}
 80028f2:	bf00      	nop
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	ff20810f 	.word	0xff20810f

08002900 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4b3d      	ldr	r3, [pc, #244]	; (8002a10 <ETH_SetDMAConfig+0x110>)
 800291a:	4013      	ands	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	7b1b      	ldrb	r3, [r3, #12]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d102      	bne.n	800292c <ETH_SetDMAConfig+0x2c>
 8002926:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800292a:	e000      	b.n	800292e <ETH_SetDMAConfig+0x2e>
 800292c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	7b5b      	ldrb	r3, [r3, #13]
 8002932:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002934:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	7f52      	ldrb	r2, [r2, #29]
 800293a:	2a00      	cmp	r2, #0
 800293c:	d102      	bne.n	8002944 <ETH_SetDMAConfig+0x44>
 800293e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002942:	e000      	b.n	8002946 <ETH_SetDMAConfig+0x46>
 8002944:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002946:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	7b9b      	ldrb	r3, [r3, #14]
 800294c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800294e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002954:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	7f1b      	ldrb	r3, [r3, #28]
 800295a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800295c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	7f9b      	ldrb	r3, [r3, #30]
 8002962:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002964:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800296a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002972:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002974:	4313      	orrs	r3, r2
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	4313      	orrs	r3, r2
 800297a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002984:	461a      	mov	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002996:	2001      	movs	r0, #1
 8002998:	f7ff f93e 	bl	8001c18 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029a4:	461a      	mov	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	791b      	ldrb	r3, [r3, #4]
 80029ae:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029b4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80029ba:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029c0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029c8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80029ca:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80029d2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80029d8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029e6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029f4:	2001      	movs	r0, #1
 80029f6:	f7ff f90f 	bl	8001c18 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a02:	461a      	mov	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6013      	str	r3, [r2, #0]
}
 8002a08:	bf00      	nop
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	f8de3f23 	.word	0xf8de3f23

08002a14 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b0a6      	sub	sp, #152	; 0x98
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002a22:	2301      	movs	r3, #1
 8002a24:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a32:	2301      	movs	r3, #1
 8002a34:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a50:	2300      	movs	r3, #0
 8002a52:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002a64:	2300      	movs	r3, #0
 8002a66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a70:	2300      	movs	r3, #0
 8002a72:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002a76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a7a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002a7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a80:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002a82:	2300      	movs	r3, #0
 8002a84:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff fe86 	bl	80027a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002a94:	2301      	movs	r3, #1
 8002a96:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002aba:	2301      	movs	r3, #1
 8002abc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002ac4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ac8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002aca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ace:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ad4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002ae4:	f107 0308 	add.w	r3, r7, #8
 8002ae8:	4619      	mov	r1, r3
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff ff08 	bl	8002900 <ETH_SetDMAConfig>
}
 8002af0:	bf00      	nop
 8002af2:	3798      	adds	r7, #152	; 0x98
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3305      	adds	r3, #5
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	021b      	lsls	r3, r3, #8
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	3204      	adds	r2, #4
 8002b10:	7812      	ldrb	r2, [r2, #0]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <ETH_MACAddressConfig+0x68>)
 8002b1a:	4413      	add	r3, r2
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3303      	adds	r3, #3
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	061a      	lsls	r2, r3, #24
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3302      	adds	r3, #2
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	041b      	lsls	r3, r3, #16
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3301      	adds	r3, #1
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	7812      	ldrb	r2, [r2, #0]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <ETH_MACAddressConfig+0x6c>)
 8002b4a:	4413      	add	r3, r2
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	6013      	str	r3, [r2, #0]
}
 8002b52:	bf00      	nop
 8002b54:	371c      	adds	r7, #28
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	40028040 	.word	0x40028040
 8002b64:	40028044 	.word	0x40028044

08002b68 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b70:	2300      	movs	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	e03e      	b.n	8002bf4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68d9      	ldr	r1, [r3, #12]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	440b      	add	r3, r1
 8002b86:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2200      	movs	r2, #0
 8002b92:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2200      	movs	r2, #0
 8002b98:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002ba0:	68b9      	ldr	r1, [r7, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	3206      	adds	r2, #6
 8002ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d80c      	bhi.n	8002bd8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68d9      	ldr	r1, [r3, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	440b      	add	r3, r1
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	60da      	str	r2, [r3, #12]
 8002bd6:	e004      	b.n	8002be2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d9bd      	bls.n	8002b76 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c0c:	611a      	str	r2, [r3, #16]
}
 8002c0e:	bf00      	nop
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b085      	sub	sp, #20
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	e046      	b.n	8002cb6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6919      	ldr	r1, [r3, #16]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	440b      	add	r3, r1
 8002c38:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2200      	movs	r2, #0
 8002c44:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2200      	movs	r2, #0
 8002c56:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c64:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002c6c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c7a:	68b9      	ldr	r1, [r7, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	3212      	adds	r2, #18
 8002c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d80c      	bhi.n	8002ca6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6919      	ldr	r1, [r3, #16]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	440b      	add	r3, r1
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	60da      	str	r2, [r3, #12]
 8002ca4:	e004      	b.n	8002cb0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	461a      	mov	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d9b5      	bls.n	8002c28 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ce6:	60da      	str	r2, [r3, #12]
}
 8002ce8:	bf00      	nop
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b089      	sub	sp, #36	; 0x24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
 8002d0e:	e177      	b.n	8003000 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d10:	2201      	movs	r2, #1
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4013      	ands	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	f040 8166 	bne.w	8002ffa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d005      	beq.n	8002d46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d130      	bne.n	8002da8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	2203      	movs	r2, #3
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	f003 0201 	and.w	r2, r3, #1
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 0303 	and.w	r3, r3, #3
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d017      	beq.n	8002de4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d123      	bne.n	8002e38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	08da      	lsrs	r2, r3, #3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3208      	adds	r2, #8
 8002df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	220f      	movs	r2, #15
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	08da      	lsrs	r2, r3, #3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3208      	adds	r2, #8
 8002e32:	69b9      	ldr	r1, [r7, #24]
 8002e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	2203      	movs	r2, #3
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 0203 	and.w	r2, r3, #3
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 80c0 	beq.w	8002ffa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	4b66      	ldr	r3, [pc, #408]	; (8003018 <HAL_GPIO_Init+0x324>)
 8002e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e82:	4a65      	ldr	r2, [pc, #404]	; (8003018 <HAL_GPIO_Init+0x324>)
 8002e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e88:	6453      	str	r3, [r2, #68]	; 0x44
 8002e8a:	4b63      	ldr	r3, [pc, #396]	; (8003018 <HAL_GPIO_Init+0x324>)
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e96:	4a61      	ldr	r2, [pc, #388]	; (800301c <HAL_GPIO_Init+0x328>)
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	089b      	lsrs	r3, r3, #2
 8002e9c:	3302      	adds	r3, #2
 8002e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	220f      	movs	r2, #15
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a58      	ldr	r2, [pc, #352]	; (8003020 <HAL_GPIO_Init+0x32c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d037      	beq.n	8002f32 <HAL_GPIO_Init+0x23e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a57      	ldr	r2, [pc, #348]	; (8003024 <HAL_GPIO_Init+0x330>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d031      	beq.n	8002f2e <HAL_GPIO_Init+0x23a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a56      	ldr	r2, [pc, #344]	; (8003028 <HAL_GPIO_Init+0x334>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d02b      	beq.n	8002f2a <HAL_GPIO_Init+0x236>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a55      	ldr	r2, [pc, #340]	; (800302c <HAL_GPIO_Init+0x338>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d025      	beq.n	8002f26 <HAL_GPIO_Init+0x232>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a54      	ldr	r2, [pc, #336]	; (8003030 <HAL_GPIO_Init+0x33c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d01f      	beq.n	8002f22 <HAL_GPIO_Init+0x22e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a53      	ldr	r2, [pc, #332]	; (8003034 <HAL_GPIO_Init+0x340>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d019      	beq.n	8002f1e <HAL_GPIO_Init+0x22a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a52      	ldr	r2, [pc, #328]	; (8003038 <HAL_GPIO_Init+0x344>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d013      	beq.n	8002f1a <HAL_GPIO_Init+0x226>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a51      	ldr	r2, [pc, #324]	; (800303c <HAL_GPIO_Init+0x348>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d00d      	beq.n	8002f16 <HAL_GPIO_Init+0x222>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a50      	ldr	r2, [pc, #320]	; (8003040 <HAL_GPIO_Init+0x34c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d007      	beq.n	8002f12 <HAL_GPIO_Init+0x21e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4f      	ldr	r2, [pc, #316]	; (8003044 <HAL_GPIO_Init+0x350>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d101      	bne.n	8002f0e <HAL_GPIO_Init+0x21a>
 8002f0a:	2309      	movs	r3, #9
 8002f0c:	e012      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f0e:	230a      	movs	r3, #10
 8002f10:	e010      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f12:	2308      	movs	r3, #8
 8002f14:	e00e      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f16:	2307      	movs	r3, #7
 8002f18:	e00c      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f1a:	2306      	movs	r3, #6
 8002f1c:	e00a      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f1e:	2305      	movs	r3, #5
 8002f20:	e008      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f22:	2304      	movs	r3, #4
 8002f24:	e006      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f26:	2303      	movs	r3, #3
 8002f28:	e004      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e002      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f32:	2300      	movs	r3, #0
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	f002 0203 	and.w	r2, r2, #3
 8002f3a:	0092      	lsls	r2, r2, #2
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f44:	4935      	ldr	r1, [pc, #212]	; (800301c <HAL_GPIO_Init+0x328>)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	089b      	lsrs	r3, r3, #2
 8002f4a:	3302      	adds	r3, #2
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f52:	4b3d      	ldr	r3, [pc, #244]	; (8003048 <HAL_GPIO_Init+0x354>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f76:	4a34      	ldr	r2, [pc, #208]	; (8003048 <HAL_GPIO_Init+0x354>)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f7c:	4b32      	ldr	r3, [pc, #200]	; (8003048 <HAL_GPIO_Init+0x354>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fa0:	4a29      	ldr	r2, [pc, #164]	; (8003048 <HAL_GPIO_Init+0x354>)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fa6:	4b28      	ldr	r3, [pc, #160]	; (8003048 <HAL_GPIO_Init+0x354>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fca:	4a1f      	ldr	r2, [pc, #124]	; (8003048 <HAL_GPIO_Init+0x354>)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <HAL_GPIO_Init+0x354>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ff4:	4a14      	ldr	r2, [pc, #80]	; (8003048 <HAL_GPIO_Init+0x354>)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	61fb      	str	r3, [r7, #28]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	2b0f      	cmp	r3, #15
 8003004:	f67f ae84 	bls.w	8002d10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003008:	bf00      	nop
 800300a:	bf00      	nop
 800300c:	3724      	adds	r7, #36	; 0x24
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800
 800301c:	40013800 	.word	0x40013800
 8003020:	40020000 	.word	0x40020000
 8003024:	40020400 	.word	0x40020400
 8003028:	40020800 	.word	0x40020800
 800302c:	40020c00 	.word	0x40020c00
 8003030:	40021000 	.word	0x40021000
 8003034:	40021400 	.word	0x40021400
 8003038:	40021800 	.word	0x40021800
 800303c:	40021c00 	.word	0x40021c00
 8003040:	40022000 	.word	0x40022000
 8003044:	40022400 	.word	0x40022400
 8003048:	40013c00 	.word	0x40013c00

0800304c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	887b      	ldrh	r3, [r7, #2]
 800305e:	4013      	ands	r3, r2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
 8003068:	e001      	b.n	800306e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800306a:	2300      	movs	r3, #0
 800306c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800306e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	807b      	strh	r3, [r7, #2]
 8003088:	4613      	mov	r3, r2
 800308a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800308c:	787b      	ldrb	r3, [r7, #1]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003092:	887a      	ldrh	r2, [r7, #2]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003098:	e003      	b.n	80030a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800309a:	887b      	ldrh	r3, [r7, #2]
 800309c:	041a      	lsls	r2, r3, #16
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	619a      	str	r2, [r3, #24]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
	...

080030b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e12b      	b.n	800331a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fe fb3e 	bl	8001758 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2224      	movs	r2, #36	; 0x24
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0201 	bic.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003102:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003112:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003114:	f001 fb4e 	bl	80047b4 <HAL_RCC_GetPCLK1Freq>
 8003118:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4a81      	ldr	r2, [pc, #516]	; (8003324 <HAL_I2C_Init+0x274>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d807      	bhi.n	8003134 <HAL_I2C_Init+0x84>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4a80      	ldr	r2, [pc, #512]	; (8003328 <HAL_I2C_Init+0x278>)
 8003128:	4293      	cmp	r3, r2
 800312a:	bf94      	ite	ls
 800312c:	2301      	movls	r3, #1
 800312e:	2300      	movhi	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	e006      	b.n	8003142 <HAL_I2C_Init+0x92>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4a7d      	ldr	r2, [pc, #500]	; (800332c <HAL_I2C_Init+0x27c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	bf94      	ite	ls
 800313c:	2301      	movls	r3, #1
 800313e:	2300      	movhi	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e0e7      	b.n	800331a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4a78      	ldr	r2, [pc, #480]	; (8003330 <HAL_I2C_Init+0x280>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	0c9b      	lsrs	r3, r3, #18
 8003154:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	4a6a      	ldr	r2, [pc, #424]	; (8003324 <HAL_I2C_Init+0x274>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d802      	bhi.n	8003184 <HAL_I2C_Init+0xd4>
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	3301      	adds	r3, #1
 8003182:	e009      	b.n	8003198 <HAL_I2C_Init+0xe8>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800318a:	fb02 f303 	mul.w	r3, r2, r3
 800318e:	4a69      	ldr	r2, [pc, #420]	; (8003334 <HAL_I2C_Init+0x284>)
 8003190:	fba2 2303 	umull	r2, r3, r2, r3
 8003194:	099b      	lsrs	r3, r3, #6
 8003196:	3301      	adds	r3, #1
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6812      	ldr	r2, [r2, #0]
 800319c:	430b      	orrs	r3, r1
 800319e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	495c      	ldr	r1, [pc, #368]	; (8003324 <HAL_I2C_Init+0x274>)
 80031b4:	428b      	cmp	r3, r1
 80031b6:	d819      	bhi.n	80031ec <HAL_I2C_Init+0x13c>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1e59      	subs	r1, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80031c6:	1c59      	adds	r1, r3, #1
 80031c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031cc:	400b      	ands	r3, r1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <HAL_I2C_Init+0x138>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1e59      	subs	r1, r3, #1
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80031e0:	3301      	adds	r3, #1
 80031e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e6:	e051      	b.n	800328c <HAL_I2C_Init+0x1dc>
 80031e8:	2304      	movs	r3, #4
 80031ea:	e04f      	b.n	800328c <HAL_I2C_Init+0x1dc>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d111      	bne.n	8003218 <HAL_I2C_Init+0x168>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	1e58      	subs	r0, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6859      	ldr	r1, [r3, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	440b      	add	r3, r1
 8003202:	fbb0 f3f3 	udiv	r3, r0, r3
 8003206:	3301      	adds	r3, #1
 8003208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800320c:	2b00      	cmp	r3, #0
 800320e:	bf0c      	ite	eq
 8003210:	2301      	moveq	r3, #1
 8003212:	2300      	movne	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	e012      	b.n	800323e <HAL_I2C_Init+0x18e>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1e58      	subs	r0, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6859      	ldr	r1, [r3, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	0099      	lsls	r1, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	fbb0 f3f3 	udiv	r3, r0, r3
 800322e:	3301      	adds	r3, #1
 8003230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003234:	2b00      	cmp	r3, #0
 8003236:	bf0c      	ite	eq
 8003238:	2301      	moveq	r3, #1
 800323a:	2300      	movne	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_I2C_Init+0x196>
 8003242:	2301      	movs	r3, #1
 8003244:	e022      	b.n	800328c <HAL_I2C_Init+0x1dc>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10e      	bne.n	800326c <HAL_I2C_Init+0x1bc>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1e58      	subs	r0, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6859      	ldr	r1, [r3, #4]
 8003256:	460b      	mov	r3, r1
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	440b      	add	r3, r1
 800325c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003260:	3301      	adds	r3, #1
 8003262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800326a:	e00f      	b.n	800328c <HAL_I2C_Init+0x1dc>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	1e58      	subs	r0, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6859      	ldr	r1, [r3, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	0099      	lsls	r1, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003282:	3301      	adds	r3, #1
 8003284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003288:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	6809      	ldr	r1, [r1, #0]
 8003290:	4313      	orrs	r3, r2
 8003292:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69da      	ldr	r2, [r3, #28]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6911      	ldr	r1, [r2, #16]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	68d2      	ldr	r2, [r2, #12]
 80032c6:	4311      	orrs	r1, r2
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6812      	ldr	r2, [r2, #0]
 80032cc:	430b      	orrs	r3, r1
 80032ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695a      	ldr	r2, [r3, #20]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	000186a0 	.word	0x000186a0
 8003328:	001e847f 	.word	0x001e847f
 800332c:	003d08ff 	.word	0x003d08ff
 8003330:	431bde83 	.word	0x431bde83
 8003334:	10624dd3 	.word	0x10624dd3

08003338 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b088      	sub	sp, #32
 800333c:	af02      	add	r7, sp, #8
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	607a      	str	r2, [r7, #4]
 8003342:	461a      	mov	r2, r3
 8003344:	460b      	mov	r3, r1
 8003346:	817b      	strh	r3, [r7, #10]
 8003348:	4613      	mov	r3, r2
 800334a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800334c:	f7fe fc58 	bl	8001c00 <HAL_GetTick>
 8003350:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b20      	cmp	r3, #32
 800335c:	f040 80e0 	bne.w	8003520 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	2319      	movs	r3, #25
 8003366:	2201      	movs	r2, #1
 8003368:	4970      	ldr	r1, [pc, #448]	; (800352c <HAL_I2C_Master_Transmit+0x1f4>)
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 fa92 	bl	8003894 <I2C_WaitOnFlagUntilTimeout>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003376:	2302      	movs	r3, #2
 8003378:	e0d3      	b.n	8003522 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_I2C_Master_Transmit+0x50>
 8003384:	2302      	movs	r3, #2
 8003386:	e0cc      	b.n	8003522 <HAL_I2C_Master_Transmit+0x1ea>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b01      	cmp	r3, #1
 800339c:	d007      	beq.n	80033ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0201 	orr.w	r2, r2, #1
 80033ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2221      	movs	r2, #33	; 0x21
 80033c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2210      	movs	r2, #16
 80033ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	893a      	ldrh	r2, [r7, #8]
 80033de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4a50      	ldr	r2, [pc, #320]	; (8003530 <HAL_I2C_Master_Transmit+0x1f8>)
 80033ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033f0:	8979      	ldrh	r1, [r7, #10]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	6a3a      	ldr	r2, [r7, #32]
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f9ca 	bl	8003790 <I2C_MasterRequestWrite>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e08d      	b.n	8003522 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003406:	2300      	movs	r3, #0
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800341c:	e066      	b.n	80034ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	6a39      	ldr	r1, [r7, #32]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 fb0c 	bl	8003a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00d      	beq.n	800344a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	2b04      	cmp	r3, #4
 8003434:	d107      	bne.n	8003446 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003444:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e06b      	b.n	8003522 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	781a      	ldrb	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003464:	b29b      	uxth	r3, r3
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b04      	cmp	r3, #4
 8003486:	d11b      	bne.n	80034c0 <HAL_I2C_Master_Transmit+0x188>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348c:	2b00      	cmp	r3, #0
 800348e:	d017      	beq.n	80034c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	781a      	ldrb	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	6a39      	ldr	r1, [r7, #32]
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 fafc 	bl	8003ac2 <I2C_WaitOnBTFFlagUntilTimeout>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00d      	beq.n	80034ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d107      	bne.n	80034e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e01a      	b.n	8003522 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d194      	bne.n	800341e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003502:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	e000      	b.n	8003522 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003520:	2302      	movs	r3, #2
  }
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	00100002 	.word	0x00100002
 8003530:	ffff0000 	.word	0xffff0000

08003534 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08a      	sub	sp, #40	; 0x28
 8003538:	af02      	add	r7, sp, #8
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	607a      	str	r2, [r7, #4]
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	460b      	mov	r3, r1
 8003542:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003544:	f7fe fb5c 	bl	8001c00 <HAL_GetTick>
 8003548:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b20      	cmp	r3, #32
 8003558:	f040 8111 	bne.w	800377e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	2319      	movs	r3, #25
 8003562:	2201      	movs	r2, #1
 8003564:	4988      	ldr	r1, [pc, #544]	; (8003788 <HAL_I2C_IsDeviceReady+0x254>)
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f994 	bl	8003894 <I2C_WaitOnFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003572:	2302      	movs	r3, #2
 8003574:	e104      	b.n	8003780 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_I2C_IsDeviceReady+0x50>
 8003580:	2302      	movs	r3, #2
 8003582:	e0fd      	b.n	8003780 <HAL_I2C_IsDeviceReady+0x24c>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b01      	cmp	r3, #1
 8003598:	d007      	beq.n	80035aa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 0201 	orr.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2224      	movs	r2, #36	; 0x24
 80035be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4a70      	ldr	r2, [pc, #448]	; (800378c <HAL_I2C_IsDeviceReady+0x258>)
 80035cc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035dc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f952 	bl	8003894 <I2C_WaitOnFlagUntilTimeout>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00d      	beq.n	8003612 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003604:	d103      	bne.n	800360e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800360c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e0b6      	b.n	8003780 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003612:	897b      	ldrh	r3, [r7, #10]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	461a      	mov	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003620:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003622:	f7fe faed 	bl	8001c00 <HAL_GetTick>
 8003626:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b02      	cmp	r3, #2
 8003634:	bf0c      	ite	eq
 8003636:	2301      	moveq	r3, #1
 8003638:	2300      	movne	r3, #0
 800363a:	b2db      	uxtb	r3, r3
 800363c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800364c:	bf0c      	ite	eq
 800364e:	2301      	moveq	r3, #1
 8003650:	2300      	movne	r3, #0
 8003652:	b2db      	uxtb	r3, r3
 8003654:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003656:	e025      	b.n	80036a4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003658:	f7fe fad2 	bl	8001c00 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d302      	bcc.n	800366e <HAL_I2C_IsDeviceReady+0x13a>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d103      	bne.n	8003676 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	22a0      	movs	r2, #160	; 0xa0
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b02      	cmp	r3, #2
 8003682:	bf0c      	ite	eq
 8003684:	2301      	moveq	r3, #1
 8003686:	2300      	movne	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2ba0      	cmp	r3, #160	; 0xa0
 80036ae:	d005      	beq.n	80036bc <HAL_I2C_IsDeviceReady+0x188>
 80036b0:	7dfb      	ldrb	r3, [r7, #23]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d102      	bne.n	80036bc <HAL_I2C_IsDeviceReady+0x188>
 80036b6:	7dbb      	ldrb	r3, [r7, #22]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0cd      	beq.n	8003658 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d129      	bne.n	8003726 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e2:	2300      	movs	r3, #0
 80036e4:	613b      	str	r3, [r7, #16]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	2319      	movs	r3, #25
 80036fe:	2201      	movs	r2, #1
 8003700:	4921      	ldr	r1, [pc, #132]	; (8003788 <HAL_I2C_IsDeviceReady+0x254>)
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 f8c6 	bl	8003894 <I2C_WaitOnFlagUntilTimeout>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e036      	b.n	8003780 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	e02c      	b.n	8003780 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003734:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800373e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	2319      	movs	r3, #25
 8003746:	2201      	movs	r2, #1
 8003748:	490f      	ldr	r1, [pc, #60]	; (8003788 <HAL_I2C_IsDeviceReady+0x254>)
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 f8a2 	bl	8003894 <I2C_WaitOnFlagUntilTimeout>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e012      	b.n	8003780 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	3301      	adds	r3, #1
 800375e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	429a      	cmp	r2, r3
 8003766:	f4ff af32 	bcc.w	80035ce <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800377e:	2302      	movs	r3, #2
  }
}
 8003780:	4618      	mov	r0, r3
 8003782:	3720      	adds	r7, #32
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	00100002 	.word	0x00100002
 800378c:	ffff0000 	.word	0xffff0000

08003790 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af02      	add	r7, sp, #8
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	607a      	str	r2, [r7, #4]
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	460b      	mov	r3, r1
 800379e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d006      	beq.n	80037ba <I2C_MasterRequestWrite+0x2a>
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d003      	beq.n	80037ba <I2C_MasterRequestWrite+0x2a>
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037b8:	d108      	bne.n	80037cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	e00b      	b.n	80037e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d0:	2b12      	cmp	r3, #18
 80037d2:	d107      	bne.n	80037e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f84f 	bl	8003894 <I2C_WaitOnFlagUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00d      	beq.n	8003818 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800380a:	d103      	bne.n	8003814 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003812:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e035      	b.n	8003884 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003820:	d108      	bne.n	8003834 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003822:	897b      	ldrh	r3, [r7, #10]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	461a      	mov	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003830:	611a      	str	r2, [r3, #16]
 8003832:	e01b      	b.n	800386c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003834:	897b      	ldrh	r3, [r7, #10]
 8003836:	11db      	asrs	r3, r3, #7
 8003838:	b2db      	uxtb	r3, r3
 800383a:	f003 0306 	and.w	r3, r3, #6
 800383e:	b2db      	uxtb	r3, r3
 8003840:	f063 030f 	orn	r3, r3, #15
 8003844:	b2da      	uxtb	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	490e      	ldr	r1, [pc, #56]	; (800388c <I2C_MasterRequestWrite+0xfc>)
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f875 	bl	8003942 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e010      	b.n	8003884 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003862:	897b      	ldrh	r3, [r7, #10]
 8003864:	b2da      	uxtb	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	4907      	ldr	r1, [pc, #28]	; (8003890 <I2C_MasterRequestWrite+0x100>)
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 f865 	bl	8003942 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	00010008 	.word	0x00010008
 8003890:	00010002 	.word	0x00010002

08003894 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	603b      	str	r3, [r7, #0]
 80038a0:	4613      	mov	r3, r2
 80038a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038a4:	e025      	b.n	80038f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ac:	d021      	beq.n	80038f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ae:	f7fe f9a7 	bl	8001c00 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d302      	bcc.n	80038c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d116      	bne.n	80038f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f043 0220 	orr.w	r2, r3, #32
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e023      	b.n	800393a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	0c1b      	lsrs	r3, r3, #16
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d10d      	bne.n	8003918 <I2C_WaitOnFlagUntilTimeout+0x84>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	43da      	mvns	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4013      	ands	r3, r2
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	bf0c      	ite	eq
 800390e:	2301      	moveq	r3, #1
 8003910:	2300      	movne	r3, #0
 8003912:	b2db      	uxtb	r3, r3
 8003914:	461a      	mov	r2, r3
 8003916:	e00c      	b.n	8003932 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	43da      	mvns	r2, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4013      	ands	r3, r2
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	bf0c      	ite	eq
 800392a:	2301      	moveq	r3, #1
 800392c:	2300      	movne	r3, #0
 800392e:	b2db      	uxtb	r3, r3
 8003930:	461a      	mov	r2, r3
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	429a      	cmp	r2, r3
 8003936:	d0b6      	beq.n	80038a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	607a      	str	r2, [r7, #4]
 800394e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003950:	e051      	b.n	80039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800395c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003960:	d123      	bne.n	80039aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003970:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800397a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f043 0204 	orr.w	r2, r3, #4
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e046      	b.n	8003a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b0:	d021      	beq.n	80039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b2:	f7fe f925 	bl	8001c00 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d302      	bcc.n	80039c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d116      	bne.n	80039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	f043 0220 	orr.w	r2, r3, #32
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e020      	b.n	8003a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	0c1b      	lsrs	r3, r3, #16
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d10c      	bne.n	8003a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	43da      	mvns	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	bf14      	ite	ne
 8003a12:	2301      	movne	r3, #1
 8003a14:	2300      	moveq	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	e00b      	b.n	8003a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	43da      	mvns	r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	4013      	ands	r3, r2
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bf14      	ite	ne
 8003a2c:	2301      	movne	r3, #1
 8003a2e:	2300      	moveq	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d18d      	bne.n	8003952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a4c:	e02d      	b.n	8003aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f878 	bl	8003b44 <I2C_IsAcknowledgeFailed>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e02d      	b.n	8003aba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a64:	d021      	beq.n	8003aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a66:	f7fe f8cb 	bl	8001c00 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d302      	bcc.n	8003a7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d116      	bne.n	8003aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f043 0220 	orr.w	r2, r3, #32
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e007      	b.n	8003aba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab4:	2b80      	cmp	r3, #128	; 0x80
 8003ab6:	d1ca      	bne.n	8003a4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ace:	e02d      	b.n	8003b2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 f837 	bl	8003b44 <I2C_IsAcknowledgeFailed>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e02d      	b.n	8003b3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae6:	d021      	beq.n	8003b2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae8:	f7fe f88a 	bl	8001c00 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d302      	bcc.n	8003afe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d116      	bne.n	8003b2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	f043 0220 	orr.w	r2, r3, #32
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e007      	b.n	8003b3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d1ca      	bne.n	8003ad0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b5a:	d11b      	bne.n	8003b94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	f043 0204 	orr.w	r2, r3, #4
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e000      	b.n	8003b96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b20      	cmp	r3, #32
 8003bb6:	d129      	bne.n	8003c0c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2224      	movs	r2, #36	; 0x24
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0201 	bic.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0210 	bic.w	r2, r2, #16
 8003bde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0201 	orr.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e000      	b.n	8003c0e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003c0c:	2302      	movs	r3, #2
  }
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b085      	sub	sp, #20
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	d12a      	bne.n	8003c8a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2224      	movs	r2, #36	; 0x24
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0201 	bic.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003c54:	89fb      	ldrh	r3, [r7, #14]
 8003c56:	f023 030f 	bic.w	r3, r3, #15
 8003c5a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	89fb      	ldrh	r3, [r7, #14]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	89fa      	ldrh	r2, [r7, #14]
 8003c6c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f042 0201 	orr.w	r2, r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	e000      	b.n	8003c8c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003c8a:	2302      	movs	r3, #2
  }
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c9a:	b08f      	sub	sp, #60	; 0x3c
 8003c9c:	af0a      	add	r7, sp, #40	; 0x28
 8003c9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e10f      	b.n	8003eca <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d106      	bne.n	8003cca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7fd fe35 	bl	8001934 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2203      	movs	r2, #3
 8003cce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d102      	bne.n	8003ce4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f002 f982 	bl	8005ff2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	603b      	str	r3, [r7, #0]
 8003cf4:	687e      	ldr	r6, [r7, #4]
 8003cf6:	466d      	mov	r5, sp
 8003cf8:	f106 0410 	add.w	r4, r6, #16
 8003cfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d08:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d0c:	1d33      	adds	r3, r6, #4
 8003d0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d10:	6838      	ldr	r0, [r7, #0]
 8003d12:	f002 f90d 	bl	8005f30 <USB_CoreInit>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0d0      	b.n	8003eca <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f002 f970 	bl	8006014 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d34:	2300      	movs	r3, #0
 8003d36:	73fb      	strb	r3, [r7, #15]
 8003d38:	e04a      	b.n	8003dd0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d3a:	7bfa      	ldrb	r2, [r7, #15]
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	4413      	add	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	333d      	adds	r3, #61	; 0x3d
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d4e:	7bfa      	ldrb	r2, [r7, #15]
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4413      	add	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	333c      	adds	r3, #60	; 0x3c
 8003d5e:	7bfa      	ldrb	r2, [r7, #15]
 8003d60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d62:	7bfa      	ldrb	r2, [r7, #15]
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
 8003d66:	b298      	uxth	r0, r3
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4413      	add	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	3344      	adds	r3, #68	; 0x44
 8003d76:	4602      	mov	r2, r0
 8003d78:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d7a:	7bfa      	ldrb	r2, [r7, #15]
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	3340      	adds	r3, #64	; 0x40
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d8e:	7bfa      	ldrb	r2, [r7, #15]
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	4413      	add	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	3348      	adds	r3, #72	; 0x48
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003da2:	7bfa      	ldrb	r2, [r7, #15]
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	334c      	adds	r3, #76	; 0x4c
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003db6:	7bfa      	ldrb	r2, [r7, #15]
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	3354      	adds	r3, #84	; 0x54
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	73fb      	strb	r3, [r7, #15]
 8003dd0:	7bfa      	ldrb	r2, [r7, #15]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d3af      	bcc.n	8003d3a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dda:	2300      	movs	r3, #0
 8003ddc:	73fb      	strb	r3, [r7, #15]
 8003dde:	e044      	b.n	8003e6a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003de0:	7bfa      	ldrb	r2, [r7, #15]
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	4613      	mov	r3, r2
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003df2:	2200      	movs	r2, #0
 8003df4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003df6:	7bfa      	ldrb	r2, [r7, #15]
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003e08:	7bfa      	ldrb	r2, [r7, #15]
 8003e0a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e0c:	7bfa      	ldrb	r2, [r7, #15]
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	4613      	mov	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4413      	add	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003e1e:	2200      	movs	r2, #0
 8003e20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e22:	7bfa      	ldrb	r2, [r7, #15]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	4413      	add	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e38:	7bfa      	ldrb	r2, [r7, #15]
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	4413      	add	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e4e:	7bfa      	ldrb	r2, [r7, #15]
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	3301      	adds	r3, #1
 8003e68:	73fb      	strb	r3, [r7, #15]
 8003e6a:	7bfa      	ldrb	r2, [r7, #15]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d3b5      	bcc.n	8003de0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	603b      	str	r3, [r7, #0]
 8003e7a:	687e      	ldr	r6, [r7, #4]
 8003e7c:	466d      	mov	r5, sp
 8003e7e:	f106 0410 	add.w	r4, r6, #16
 8003e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e92:	1d33      	adds	r3, r6, #4
 8003e94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e96:	6838      	ldr	r0, [r7, #0]
 8003e98:	f002 f908 	bl	80060ac <USB_DevInit>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e00d      	b.n	8003eca <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f002 fad3 	bl	800646e <USB_DevDisconnect>

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003ed4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e267      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d075      	beq.n	8003fde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ef2:	4b88      	ldr	r3, [pc, #544]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d00c      	beq.n	8003f18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003efe:	4b85      	ldr	r3, [pc, #532]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f06:	2b08      	cmp	r3, #8
 8003f08:	d112      	bne.n	8003f30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f0a:	4b82      	ldr	r3, [pc, #520]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f16:	d10b      	bne.n	8003f30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f18:	4b7e      	ldr	r3, [pc, #504]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d05b      	beq.n	8003fdc <HAL_RCC_OscConfig+0x108>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d157      	bne.n	8003fdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e242      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f38:	d106      	bne.n	8003f48 <HAL_RCC_OscConfig+0x74>
 8003f3a:	4b76      	ldr	r3, [pc, #472]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a75      	ldr	r2, [pc, #468]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	e01d      	b.n	8003f84 <HAL_RCC_OscConfig+0xb0>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f50:	d10c      	bne.n	8003f6c <HAL_RCC_OscConfig+0x98>
 8003f52:	4b70      	ldr	r3, [pc, #448]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a6f      	ldr	r2, [pc, #444]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	4b6d      	ldr	r3, [pc, #436]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a6c      	ldr	r2, [pc, #432]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	e00b      	b.n	8003f84 <HAL_RCC_OscConfig+0xb0>
 8003f6c:	4b69      	ldr	r3, [pc, #420]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a68      	ldr	r2, [pc, #416]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f76:	6013      	str	r3, [r2, #0]
 8003f78:	4b66      	ldr	r3, [pc, #408]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a65      	ldr	r2, [pc, #404]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d013      	beq.n	8003fb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8c:	f7fd fe38 	bl	8001c00 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f94:	f7fd fe34 	bl	8001c00 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b64      	cmp	r3, #100	; 0x64
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e207      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa6:	4b5b      	ldr	r3, [pc, #364]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCC_OscConfig+0xc0>
 8003fb2:	e014      	b.n	8003fde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7fd fe24 	bl	8001c00 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fbc:	f7fd fe20 	bl	8001c00 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b64      	cmp	r3, #100	; 0x64
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e1f3      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fce:	4b51      	ldr	r3, [pc, #324]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f0      	bne.n	8003fbc <HAL_RCC_OscConfig+0xe8>
 8003fda:	e000      	b.n	8003fde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d063      	beq.n	80040b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fea:	4b4a      	ldr	r3, [pc, #296]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00b      	beq.n	800400e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ff6:	4b47      	ldr	r3, [pc, #284]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d11c      	bne.n	800403c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004002:	4b44      	ldr	r3, [pc, #272]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d116      	bne.n	800403c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800400e:	4b41      	ldr	r3, [pc, #260]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d005      	beq.n	8004026 <HAL_RCC_OscConfig+0x152>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d001      	beq.n	8004026 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e1c7      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004026:	4b3b      	ldr	r3, [pc, #236]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	4937      	ldr	r1, [pc, #220]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8004036:	4313      	orrs	r3, r2
 8004038:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800403a:	e03a      	b.n	80040b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d020      	beq.n	8004086 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004044:	4b34      	ldr	r3, [pc, #208]	; (8004118 <HAL_RCC_OscConfig+0x244>)
 8004046:	2201      	movs	r2, #1
 8004048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404a:	f7fd fdd9 	bl	8001c00 <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004050:	e008      	b.n	8004064 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004052:	f7fd fdd5 	bl	8001c00 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e1a8      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004064:	4b2b      	ldr	r3, [pc, #172]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0f0      	beq.n	8004052 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004070:	4b28      	ldr	r3, [pc, #160]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4925      	ldr	r1, [pc, #148]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8004080:	4313      	orrs	r3, r2
 8004082:	600b      	str	r3, [r1, #0]
 8004084:	e015      	b.n	80040b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004086:	4b24      	ldr	r3, [pc, #144]	; (8004118 <HAL_RCC_OscConfig+0x244>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408c:	f7fd fdb8 	bl	8001c00 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004094:	f7fd fdb4 	bl	8001c00 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e187      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040a6:	4b1b      	ldr	r3, [pc, #108]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d036      	beq.n	800412c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d016      	beq.n	80040f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040c6:	4b15      	ldr	r3, [pc, #84]	; (800411c <HAL_RCC_OscConfig+0x248>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040cc:	f7fd fd98 	bl	8001c00 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040d4:	f7fd fd94 	bl	8001c00 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e167      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040e6:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 80040e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f0      	beq.n	80040d4 <HAL_RCC_OscConfig+0x200>
 80040f2:	e01b      	b.n	800412c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040f4:	4b09      	ldr	r3, [pc, #36]	; (800411c <HAL_RCC_OscConfig+0x248>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040fa:	f7fd fd81 	bl	8001c00 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004100:	e00e      	b.n	8004120 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004102:	f7fd fd7d 	bl	8001c00 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d907      	bls.n	8004120 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e150      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
 8004114:	40023800 	.word	0x40023800
 8004118:	42470000 	.word	0x42470000
 800411c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004120:	4b88      	ldr	r3, [pc, #544]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 8004122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1ea      	bne.n	8004102 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 8097 	beq.w	8004268 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800413a:	2300      	movs	r3, #0
 800413c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800413e:	4b81      	ldr	r3, [pc, #516]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10f      	bne.n	800416a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800414a:	2300      	movs	r3, #0
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	4b7d      	ldr	r3, [pc, #500]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	4a7c      	ldr	r2, [pc, #496]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 8004154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004158:	6413      	str	r3, [r2, #64]	; 0x40
 800415a:	4b7a      	ldr	r3, [pc, #488]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004162:	60bb      	str	r3, [r7, #8]
 8004164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004166:	2301      	movs	r3, #1
 8004168:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416a:	4b77      	ldr	r3, [pc, #476]	; (8004348 <HAL_RCC_OscConfig+0x474>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004172:	2b00      	cmp	r3, #0
 8004174:	d118      	bne.n	80041a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004176:	4b74      	ldr	r3, [pc, #464]	; (8004348 <HAL_RCC_OscConfig+0x474>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a73      	ldr	r2, [pc, #460]	; (8004348 <HAL_RCC_OscConfig+0x474>)
 800417c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004182:	f7fd fd3d 	bl	8001c00 <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800418a:	f7fd fd39 	bl	8001c00 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e10c      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419c:	4b6a      	ldr	r3, [pc, #424]	; (8004348 <HAL_RCC_OscConfig+0x474>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0f0      	beq.n	800418a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d106      	bne.n	80041be <HAL_RCC_OscConfig+0x2ea>
 80041b0:	4b64      	ldr	r3, [pc, #400]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 80041b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b4:	4a63      	ldr	r2, [pc, #396]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	6713      	str	r3, [r2, #112]	; 0x70
 80041bc:	e01c      	b.n	80041f8 <HAL_RCC_OscConfig+0x324>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	2b05      	cmp	r3, #5
 80041c4:	d10c      	bne.n	80041e0 <HAL_RCC_OscConfig+0x30c>
 80041c6:	4b5f      	ldr	r3, [pc, #380]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 80041c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ca:	4a5e      	ldr	r2, [pc, #376]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 80041cc:	f043 0304 	orr.w	r3, r3, #4
 80041d0:	6713      	str	r3, [r2, #112]	; 0x70
 80041d2:	4b5c      	ldr	r3, [pc, #368]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 80041d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d6:	4a5b      	ldr	r2, [pc, #364]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 80041d8:	f043 0301 	orr.w	r3, r3, #1
 80041dc:	6713      	str	r3, [r2, #112]	; 0x70
 80041de:	e00b      	b.n	80041f8 <HAL_RCC_OscConfig+0x324>
 80041e0:	4b58      	ldr	r3, [pc, #352]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 80041e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e4:	4a57      	ldr	r2, [pc, #348]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 80041e6:	f023 0301 	bic.w	r3, r3, #1
 80041ea:	6713      	str	r3, [r2, #112]	; 0x70
 80041ec:	4b55      	ldr	r3, [pc, #340]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 80041ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f0:	4a54      	ldr	r2, [pc, #336]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 80041f2:	f023 0304 	bic.w	r3, r3, #4
 80041f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d015      	beq.n	800422c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004200:	f7fd fcfe 	bl	8001c00 <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004206:	e00a      	b.n	800421e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004208:	f7fd fcfa 	bl	8001c00 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	f241 3288 	movw	r2, #5000	; 0x1388
 8004216:	4293      	cmp	r3, r2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e0cb      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421e:	4b49      	ldr	r3, [pc, #292]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0ee      	beq.n	8004208 <HAL_RCC_OscConfig+0x334>
 800422a:	e014      	b.n	8004256 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800422c:	f7fd fce8 	bl	8001c00 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004232:	e00a      	b.n	800424a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004234:	f7fd fce4 	bl	8001c00 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004242:	4293      	cmp	r3, r2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e0b5      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800424a:	4b3e      	ldr	r3, [pc, #248]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 800424c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1ee      	bne.n	8004234 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004256:	7dfb      	ldrb	r3, [r7, #23]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d105      	bne.n	8004268 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800425c:	4b39      	ldr	r3, [pc, #228]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	4a38      	ldr	r2, [pc, #224]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 8004262:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004266:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 80a1 	beq.w	80043b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004272:	4b34      	ldr	r3, [pc, #208]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 030c 	and.w	r3, r3, #12
 800427a:	2b08      	cmp	r3, #8
 800427c:	d05c      	beq.n	8004338 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	2b02      	cmp	r3, #2
 8004284:	d141      	bne.n	800430a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004286:	4b31      	ldr	r3, [pc, #196]	; (800434c <HAL_RCC_OscConfig+0x478>)
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428c:	f7fd fcb8 	bl	8001c00 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004294:	f7fd fcb4 	bl	8001c00 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e087      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a6:	4b27      	ldr	r3, [pc, #156]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69da      	ldr	r2, [r3, #28]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	019b      	lsls	r3, r3, #6
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c8:	085b      	lsrs	r3, r3, #1
 80042ca:	3b01      	subs	r3, #1
 80042cc:	041b      	lsls	r3, r3, #16
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	061b      	lsls	r3, r3, #24
 80042d6:	491b      	ldr	r1, [pc, #108]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042dc:	4b1b      	ldr	r3, [pc, #108]	; (800434c <HAL_RCC_OscConfig+0x478>)
 80042de:	2201      	movs	r2, #1
 80042e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e2:	f7fd fc8d 	bl	8001c00 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ea:	f7fd fc89 	bl	8001c00 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e05c      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042fc:	4b11      	ldr	r3, [pc, #68]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <HAL_RCC_OscConfig+0x416>
 8004308:	e054      	b.n	80043b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800430a:	4b10      	ldr	r3, [pc, #64]	; (800434c <HAL_RCC_OscConfig+0x478>)
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004310:	f7fd fc76 	bl	8001c00 <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004318:	f7fd fc72 	bl	8001c00 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e045      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800432a:	4b06      	ldr	r3, [pc, #24]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1f0      	bne.n	8004318 <HAL_RCC_OscConfig+0x444>
 8004336:	e03d      	b.n	80043b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d107      	bne.n	8004350 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e038      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
 8004344:	40023800 	.word	0x40023800
 8004348:	40007000 	.word	0x40007000
 800434c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004350:	4b1b      	ldr	r3, [pc, #108]	; (80043c0 <HAL_RCC_OscConfig+0x4ec>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d028      	beq.n	80043b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004368:	429a      	cmp	r2, r3
 800436a:	d121      	bne.n	80043b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004376:	429a      	cmp	r2, r3
 8004378:	d11a      	bne.n	80043b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004380:	4013      	ands	r3, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004386:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004388:	4293      	cmp	r3, r2
 800438a:	d111      	bne.n	80043b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004396:	085b      	lsrs	r3, r3, #1
 8004398:	3b01      	subs	r3, #1
 800439a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800439c:	429a      	cmp	r2, r3
 800439e:	d107      	bne.n	80043b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d001      	beq.n	80043b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40023800 	.word	0x40023800

080043c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e0cc      	b.n	8004572 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043d8:	4b68      	ldr	r3, [pc, #416]	; (800457c <HAL_RCC_ClockConfig+0x1b8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 030f 	and.w	r3, r3, #15
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d90c      	bls.n	8004400 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e6:	4b65      	ldr	r3, [pc, #404]	; (800457c <HAL_RCC_ClockConfig+0x1b8>)
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ee:	4b63      	ldr	r3, [pc, #396]	; (800457c <HAL_RCC_ClockConfig+0x1b8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d001      	beq.n	8004400 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e0b8      	b.n	8004572 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d020      	beq.n	800444e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	d005      	beq.n	8004424 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004418:	4b59      	ldr	r3, [pc, #356]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	4a58      	ldr	r2, [pc, #352]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 800441e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004422:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004430:	4b53      	ldr	r3, [pc, #332]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	4a52      	ldr	r2, [pc, #328]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004436:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800443a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800443c:	4b50      	ldr	r3, [pc, #320]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	494d      	ldr	r1, [pc, #308]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 800444a:	4313      	orrs	r3, r2
 800444c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d044      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d107      	bne.n	8004472 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004462:	4b47      	ldr	r3, [pc, #284]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d119      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e07f      	b.n	8004572 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d003      	beq.n	8004482 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800447e:	2b03      	cmp	r3, #3
 8004480:	d107      	bne.n	8004492 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004482:	4b3f      	ldr	r3, [pc, #252]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e06f      	b.n	8004572 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004492:	4b3b      	ldr	r3, [pc, #236]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e067      	b.n	8004572 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044a2:	4b37      	ldr	r3, [pc, #220]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f023 0203 	bic.w	r2, r3, #3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	4934      	ldr	r1, [pc, #208]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044b4:	f7fd fba4 	bl	8001c00 <HAL_GetTick>
 80044b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ba:	e00a      	b.n	80044d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044bc:	f7fd fba0 	bl	8001c00 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e04f      	b.n	8004572 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d2:	4b2b      	ldr	r3, [pc, #172]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 020c 	and.w	r2, r3, #12
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d1eb      	bne.n	80044bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044e4:	4b25      	ldr	r3, [pc, #148]	; (800457c <HAL_RCC_ClockConfig+0x1b8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d20c      	bcs.n	800450c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f2:	4b22      	ldr	r3, [pc, #136]	; (800457c <HAL_RCC_ClockConfig+0x1b8>)
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fa:	4b20      	ldr	r3, [pc, #128]	; (800457c <HAL_RCC_ClockConfig+0x1b8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	d001      	beq.n	800450c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e032      	b.n	8004572 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	d008      	beq.n	800452a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004518:	4b19      	ldr	r3, [pc, #100]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	4916      	ldr	r1, [pc, #88]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004526:	4313      	orrs	r3, r2
 8004528:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004536:	4b12      	ldr	r3, [pc, #72]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	490e      	ldr	r1, [pc, #56]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004546:	4313      	orrs	r3, r2
 8004548:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800454a:	f000 f821 	bl	8004590 <HAL_RCC_GetSysClockFreq>
 800454e:	4602      	mov	r2, r0
 8004550:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	091b      	lsrs	r3, r3, #4
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	490a      	ldr	r1, [pc, #40]	; (8004584 <HAL_RCC_ClockConfig+0x1c0>)
 800455c:	5ccb      	ldrb	r3, [r1, r3]
 800455e:	fa22 f303 	lsr.w	r3, r2, r3
 8004562:	4a09      	ldr	r2, [pc, #36]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 8004564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004566:	4b09      	ldr	r3, [pc, #36]	; (800458c <HAL_RCC_ClockConfig+0x1c8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f7fd fb04 	bl	8001b78 <HAL_InitTick>

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	40023c00 	.word	0x40023c00
 8004580:	40023800 	.word	0x40023800
 8004584:	08006f38 	.word	0x08006f38
 8004588:	20000004 	.word	0x20000004
 800458c:	20000008 	.word	0x20000008

08004590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004594:	b094      	sub	sp, #80	; 0x50
 8004596:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	647b      	str	r3, [r7, #68]	; 0x44
 800459c:	2300      	movs	r3, #0
 800459e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045a0:	2300      	movs	r3, #0
 80045a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045a8:	4b79      	ldr	r3, [pc, #484]	; (8004790 <HAL_RCC_GetSysClockFreq+0x200>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 030c 	and.w	r3, r3, #12
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d00d      	beq.n	80045d0 <HAL_RCC_GetSysClockFreq+0x40>
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	f200 80e1 	bhi.w	800477c <HAL_RCC_GetSysClockFreq+0x1ec>
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <HAL_RCC_GetSysClockFreq+0x34>
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d003      	beq.n	80045ca <HAL_RCC_GetSysClockFreq+0x3a>
 80045c2:	e0db      	b.n	800477c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045c4:	4b73      	ldr	r3, [pc, #460]	; (8004794 <HAL_RCC_GetSysClockFreq+0x204>)
 80045c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80045c8:	e0db      	b.n	8004782 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045ca:	4b73      	ldr	r3, [pc, #460]	; (8004798 <HAL_RCC_GetSysClockFreq+0x208>)
 80045cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045ce:	e0d8      	b.n	8004782 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045d0:	4b6f      	ldr	r3, [pc, #444]	; (8004790 <HAL_RCC_GetSysClockFreq+0x200>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045da:	4b6d      	ldr	r3, [pc, #436]	; (8004790 <HAL_RCC_GetSysClockFreq+0x200>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d063      	beq.n	80046ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045e6:	4b6a      	ldr	r3, [pc, #424]	; (8004790 <HAL_RCC_GetSysClockFreq+0x200>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	099b      	lsrs	r3, r3, #6
 80045ec:	2200      	movs	r2, #0
 80045ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80045f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80045f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f8:	633b      	str	r3, [r7, #48]	; 0x30
 80045fa:	2300      	movs	r3, #0
 80045fc:	637b      	str	r3, [r7, #52]	; 0x34
 80045fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004602:	4622      	mov	r2, r4
 8004604:	462b      	mov	r3, r5
 8004606:	f04f 0000 	mov.w	r0, #0
 800460a:	f04f 0100 	mov.w	r1, #0
 800460e:	0159      	lsls	r1, r3, #5
 8004610:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004614:	0150      	lsls	r0, r2, #5
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4621      	mov	r1, r4
 800461c:	1a51      	subs	r1, r2, r1
 800461e:	6139      	str	r1, [r7, #16]
 8004620:	4629      	mov	r1, r5
 8004622:	eb63 0301 	sbc.w	r3, r3, r1
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	f04f 0300 	mov.w	r3, #0
 8004630:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004634:	4659      	mov	r1, fp
 8004636:	018b      	lsls	r3, r1, #6
 8004638:	4651      	mov	r1, sl
 800463a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800463e:	4651      	mov	r1, sl
 8004640:	018a      	lsls	r2, r1, #6
 8004642:	4651      	mov	r1, sl
 8004644:	ebb2 0801 	subs.w	r8, r2, r1
 8004648:	4659      	mov	r1, fp
 800464a:	eb63 0901 	sbc.w	r9, r3, r1
 800464e:	f04f 0200 	mov.w	r2, #0
 8004652:	f04f 0300 	mov.w	r3, #0
 8004656:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800465a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800465e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004662:	4690      	mov	r8, r2
 8004664:	4699      	mov	r9, r3
 8004666:	4623      	mov	r3, r4
 8004668:	eb18 0303 	adds.w	r3, r8, r3
 800466c:	60bb      	str	r3, [r7, #8]
 800466e:	462b      	mov	r3, r5
 8004670:	eb49 0303 	adc.w	r3, r9, r3
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	f04f 0200 	mov.w	r2, #0
 800467a:	f04f 0300 	mov.w	r3, #0
 800467e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004682:	4629      	mov	r1, r5
 8004684:	024b      	lsls	r3, r1, #9
 8004686:	4621      	mov	r1, r4
 8004688:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800468c:	4621      	mov	r1, r4
 800468e:	024a      	lsls	r2, r1, #9
 8004690:	4610      	mov	r0, r2
 8004692:	4619      	mov	r1, r3
 8004694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004696:	2200      	movs	r2, #0
 8004698:	62bb      	str	r3, [r7, #40]	; 0x28
 800469a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800469c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046a0:	f7fb fdfe 	bl	80002a0 <__aeabi_uldivmod>
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	4613      	mov	r3, r2
 80046aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046ac:	e058      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ae:	4b38      	ldr	r3, [pc, #224]	; (8004790 <HAL_RCC_GetSysClockFreq+0x200>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	099b      	lsrs	r3, r3, #6
 80046b4:	2200      	movs	r2, #0
 80046b6:	4618      	mov	r0, r3
 80046b8:	4611      	mov	r1, r2
 80046ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046be:	623b      	str	r3, [r7, #32]
 80046c0:	2300      	movs	r3, #0
 80046c2:	627b      	str	r3, [r7, #36]	; 0x24
 80046c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046c8:	4642      	mov	r2, r8
 80046ca:	464b      	mov	r3, r9
 80046cc:	f04f 0000 	mov.w	r0, #0
 80046d0:	f04f 0100 	mov.w	r1, #0
 80046d4:	0159      	lsls	r1, r3, #5
 80046d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046da:	0150      	lsls	r0, r2, #5
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4641      	mov	r1, r8
 80046e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80046e6:	4649      	mov	r1, r9
 80046e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004700:	ebb2 040a 	subs.w	r4, r2, sl
 8004704:	eb63 050b 	sbc.w	r5, r3, fp
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	00eb      	lsls	r3, r5, #3
 8004712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004716:	00e2      	lsls	r2, r4, #3
 8004718:	4614      	mov	r4, r2
 800471a:	461d      	mov	r5, r3
 800471c:	4643      	mov	r3, r8
 800471e:	18e3      	adds	r3, r4, r3
 8004720:	603b      	str	r3, [r7, #0]
 8004722:	464b      	mov	r3, r9
 8004724:	eb45 0303 	adc.w	r3, r5, r3
 8004728:	607b      	str	r3, [r7, #4]
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004736:	4629      	mov	r1, r5
 8004738:	028b      	lsls	r3, r1, #10
 800473a:	4621      	mov	r1, r4
 800473c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004740:	4621      	mov	r1, r4
 8004742:	028a      	lsls	r2, r1, #10
 8004744:	4610      	mov	r0, r2
 8004746:	4619      	mov	r1, r3
 8004748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800474a:	2200      	movs	r2, #0
 800474c:	61bb      	str	r3, [r7, #24]
 800474e:	61fa      	str	r2, [r7, #28]
 8004750:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004754:	f7fb fda4 	bl	80002a0 <__aeabi_uldivmod>
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	4613      	mov	r3, r2
 800475e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004760:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <HAL_RCC_GetSysClockFreq+0x200>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	0c1b      	lsrs	r3, r3, #16
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	3301      	adds	r3, #1
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004770:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004774:	fbb2 f3f3 	udiv	r3, r2, r3
 8004778:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800477a:	e002      	b.n	8004782 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800477c:	4b05      	ldr	r3, [pc, #20]	; (8004794 <HAL_RCC_GetSysClockFreq+0x204>)
 800477e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004784:	4618      	mov	r0, r3
 8004786:	3750      	adds	r7, #80	; 0x50
 8004788:	46bd      	mov	sp, r7
 800478a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800478e:	bf00      	nop
 8004790:	40023800 	.word	0x40023800
 8004794:	00f42400 	.word	0x00f42400
 8004798:	007a1200 	.word	0x007a1200

0800479c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047a0:	4b03      	ldr	r3, [pc, #12]	; (80047b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047a2:	681b      	ldr	r3, [r3, #0]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	20000004 	.word	0x20000004

080047b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047b8:	f7ff fff0 	bl	800479c <HAL_RCC_GetHCLKFreq>
 80047bc:	4602      	mov	r2, r0
 80047be:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	0a9b      	lsrs	r3, r3, #10
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	4903      	ldr	r1, [pc, #12]	; (80047d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ca:	5ccb      	ldrb	r3, [r1, r3]
 80047cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40023800 	.word	0x40023800
 80047d8:	08006f48 	.word	0x08006f48

080047dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047e0:	f7ff ffdc 	bl	800479c <HAL_RCC_GetHCLKFreq>
 80047e4:	4602      	mov	r2, r0
 80047e6:	4b05      	ldr	r3, [pc, #20]	; (80047fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	0b5b      	lsrs	r3, r3, #13
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	4903      	ldr	r1, [pc, #12]	; (8004800 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047f2:	5ccb      	ldrb	r3, [r1, r3]
 80047f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40023800 	.word	0x40023800
 8004800:	08006f48 	.word	0x08006f48

08004804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e041      	b.n	800489a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d106      	bne.n	8004830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fc ffdc 	bl	80017e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3304      	adds	r3, #4
 8004840:	4619      	mov	r1, r3
 8004842:	4610      	mov	r0, r2
 8004844:	f000 fc12 	bl	800506c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b082      	sub	sp, #8
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e041      	b.n	8004938 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d106      	bne.n	80048ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f839 	bl	8004940 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2202      	movs	r2, #2
 80048d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3304      	adds	r3, #4
 80048de:	4619      	mov	r1, r3
 80048e0:	4610      	mov	r0, r2
 80048e2:	f000 fbc3 	bl	800506c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d109      	bne.n	8004978 <HAL_TIM_PWM_Start+0x24>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b01      	cmp	r3, #1
 800496e:	bf14      	ite	ne
 8004970:	2301      	movne	r3, #1
 8004972:	2300      	moveq	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	e022      	b.n	80049be <HAL_TIM_PWM_Start+0x6a>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b04      	cmp	r3, #4
 800497c:	d109      	bne.n	8004992 <HAL_TIM_PWM_Start+0x3e>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b01      	cmp	r3, #1
 8004988:	bf14      	ite	ne
 800498a:	2301      	movne	r3, #1
 800498c:	2300      	moveq	r3, #0
 800498e:	b2db      	uxtb	r3, r3
 8004990:	e015      	b.n	80049be <HAL_TIM_PWM_Start+0x6a>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b08      	cmp	r3, #8
 8004996:	d109      	bne.n	80049ac <HAL_TIM_PWM_Start+0x58>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	bf14      	ite	ne
 80049a4:	2301      	movne	r3, #1
 80049a6:	2300      	moveq	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	e008      	b.n	80049be <HAL_TIM_PWM_Start+0x6a>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	bf14      	ite	ne
 80049b8:	2301      	movne	r3, #1
 80049ba:	2300      	moveq	r3, #0
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e07c      	b.n	8004ac0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d104      	bne.n	80049d6 <HAL_TIM_PWM_Start+0x82>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049d4:	e013      	b.n	80049fe <HAL_TIM_PWM_Start+0xaa>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b04      	cmp	r3, #4
 80049da:	d104      	bne.n	80049e6 <HAL_TIM_PWM_Start+0x92>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049e4:	e00b      	b.n	80049fe <HAL_TIM_PWM_Start+0xaa>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d104      	bne.n	80049f6 <HAL_TIM_PWM_Start+0xa2>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049f4:	e003      	b.n	80049fe <HAL_TIM_PWM_Start+0xaa>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2202      	movs	r2, #2
 80049fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2201      	movs	r2, #1
 8004a04:	6839      	ldr	r1, [r7, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fe1a 	bl	8005640 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a2d      	ldr	r2, [pc, #180]	; (8004ac8 <HAL_TIM_PWM_Start+0x174>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d004      	beq.n	8004a20 <HAL_TIM_PWM_Start+0xcc>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a2c      	ldr	r2, [pc, #176]	; (8004acc <HAL_TIM_PWM_Start+0x178>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d101      	bne.n	8004a24 <HAL_TIM_PWM_Start+0xd0>
 8004a20:	2301      	movs	r3, #1
 8004a22:	e000      	b.n	8004a26 <HAL_TIM_PWM_Start+0xd2>
 8004a24:	2300      	movs	r3, #0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d007      	beq.n	8004a3a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a22      	ldr	r2, [pc, #136]	; (8004ac8 <HAL_TIM_PWM_Start+0x174>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d022      	beq.n	8004a8a <HAL_TIM_PWM_Start+0x136>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4c:	d01d      	beq.n	8004a8a <HAL_TIM_PWM_Start+0x136>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a1f      	ldr	r2, [pc, #124]	; (8004ad0 <HAL_TIM_PWM_Start+0x17c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d018      	beq.n	8004a8a <HAL_TIM_PWM_Start+0x136>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a1d      	ldr	r2, [pc, #116]	; (8004ad4 <HAL_TIM_PWM_Start+0x180>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d013      	beq.n	8004a8a <HAL_TIM_PWM_Start+0x136>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a1c      	ldr	r2, [pc, #112]	; (8004ad8 <HAL_TIM_PWM_Start+0x184>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00e      	beq.n	8004a8a <HAL_TIM_PWM_Start+0x136>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a16      	ldr	r2, [pc, #88]	; (8004acc <HAL_TIM_PWM_Start+0x178>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d009      	beq.n	8004a8a <HAL_TIM_PWM_Start+0x136>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a18      	ldr	r2, [pc, #96]	; (8004adc <HAL_TIM_PWM_Start+0x188>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d004      	beq.n	8004a8a <HAL_TIM_PWM_Start+0x136>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a16      	ldr	r2, [pc, #88]	; (8004ae0 <HAL_TIM_PWM_Start+0x18c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d111      	bne.n	8004aae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2b06      	cmp	r3, #6
 8004a9a:	d010      	beq.n	8004abe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0201 	orr.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aac:	e007      	b.n	8004abe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f042 0201 	orr.w	r2, r2, #1
 8004abc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40010000 	.word	0x40010000
 8004acc:	40010400 	.word	0x40010400
 8004ad0:	40000400 	.word	0x40000400
 8004ad4:	40000800 	.word	0x40000800
 8004ad8:	40000c00 	.word	0x40000c00
 8004adc:	40014000 	.word	0x40014000
 8004ae0:	40001800 	.word	0x40001800

08004ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d122      	bne.n	8004b40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d11b      	bne.n	8004b40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f06f 0202 	mvn.w	r2, #2
 8004b10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fa81 	bl	800502e <HAL_TIM_IC_CaptureCallback>
 8004b2c:	e005      	b.n	8004b3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fa73 	bl	800501a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 fa84 	bl	8005042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d122      	bne.n	8004b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d11b      	bne.n	8004b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f06f 0204 	mvn.w	r2, #4
 8004b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fa57 	bl	800502e <HAL_TIM_IC_CaptureCallback>
 8004b80:	e005      	b.n	8004b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fa49 	bl	800501a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 fa5a 	bl	8005042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b08      	cmp	r3, #8
 8004ba0:	d122      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f003 0308 	and.w	r3, r3, #8
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d11b      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0208 	mvn.w	r2, #8
 8004bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2204      	movs	r2, #4
 8004bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	f003 0303 	and.w	r3, r3, #3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fa2d 	bl	800502e <HAL_TIM_IC_CaptureCallback>
 8004bd4:	e005      	b.n	8004be2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fa1f 	bl	800501a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fa30 	bl	8005042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0310 	and.w	r3, r3, #16
 8004bf2:	2b10      	cmp	r3, #16
 8004bf4:	d122      	bne.n	8004c3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f003 0310 	and.w	r3, r3, #16
 8004c00:	2b10      	cmp	r3, #16
 8004c02:	d11b      	bne.n	8004c3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0210 	mvn.w	r2, #16
 8004c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2208      	movs	r2, #8
 8004c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fa03 	bl	800502e <HAL_TIM_IC_CaptureCallback>
 8004c28:	e005      	b.n	8004c36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f9f5 	bl	800501a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fa06 	bl	8005042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d10e      	bne.n	8004c68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d107      	bne.n	8004c68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f06f 0201 	mvn.w	r2, #1
 8004c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f9cf 	bl	8005006 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c72:	2b80      	cmp	r3, #128	; 0x80
 8004c74:	d10e      	bne.n	8004c94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c80:	2b80      	cmp	r3, #128	; 0x80
 8004c82:	d107      	bne.n	8004c94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fd82 	bl	8005798 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9e:	2b40      	cmp	r3, #64	; 0x40
 8004ca0:	d10e      	bne.n	8004cc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cac:	2b40      	cmp	r3, #64	; 0x40
 8004cae:	d107      	bne.n	8004cc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f9cb 	bl	8005056 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	f003 0320 	and.w	r3, r3, #32
 8004cca:	2b20      	cmp	r3, #32
 8004ccc:	d10e      	bne.n	8004cec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f003 0320 	and.w	r3, r3, #32
 8004cd8:	2b20      	cmp	r3, #32
 8004cda:	d107      	bne.n	8004cec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f06f 0220 	mvn.w	r2, #32
 8004ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 fd4c 	bl	8005784 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cec:	bf00      	nop
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d00:	2300      	movs	r3, #0
 8004d02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d101      	bne.n	8004d12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	e0ae      	b.n	8004e70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b0c      	cmp	r3, #12
 8004d1e:	f200 809f 	bhi.w	8004e60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d22:	a201      	add	r2, pc, #4	; (adr r2, 8004d28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d28:	08004d5d 	.word	0x08004d5d
 8004d2c:	08004e61 	.word	0x08004e61
 8004d30:	08004e61 	.word	0x08004e61
 8004d34:	08004e61 	.word	0x08004e61
 8004d38:	08004d9d 	.word	0x08004d9d
 8004d3c:	08004e61 	.word	0x08004e61
 8004d40:	08004e61 	.word	0x08004e61
 8004d44:	08004e61 	.word	0x08004e61
 8004d48:	08004ddf 	.word	0x08004ddf
 8004d4c:	08004e61 	.word	0x08004e61
 8004d50:	08004e61 	.word	0x08004e61
 8004d54:	08004e61 	.word	0x08004e61
 8004d58:	08004e1f 	.word	0x08004e1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68b9      	ldr	r1, [r7, #8]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fa22 	bl	80051ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	699a      	ldr	r2, [r3, #24]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0208 	orr.w	r2, r2, #8
 8004d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699a      	ldr	r2, [r3, #24]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 0204 	bic.w	r2, r2, #4
 8004d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6999      	ldr	r1, [r3, #24]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	691a      	ldr	r2, [r3, #16]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	619a      	str	r2, [r3, #24]
      break;
 8004d9a:	e064      	b.n	8004e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68b9      	ldr	r1, [r7, #8]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 fa72 	bl	800528c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699a      	ldr	r2, [r3, #24]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004db6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699a      	ldr	r2, [r3, #24]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6999      	ldr	r1, [r3, #24]
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	021a      	lsls	r2, r3, #8
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	619a      	str	r2, [r3, #24]
      break;
 8004ddc:	e043      	b.n	8004e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68b9      	ldr	r1, [r7, #8]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 fac7 	bl	8005378 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69da      	ldr	r2, [r3, #28]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f042 0208 	orr.w	r2, r2, #8
 8004df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69da      	ldr	r2, [r3, #28]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0204 	bic.w	r2, r2, #4
 8004e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	69d9      	ldr	r1, [r3, #28]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	61da      	str	r2, [r3, #28]
      break;
 8004e1c:	e023      	b.n	8004e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68b9      	ldr	r1, [r7, #8]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 fb1b 	bl	8005460 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69da      	ldr	r2, [r3, #28]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	69da      	ldr	r2, [r3, #28]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69d9      	ldr	r1, [r3, #28]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	021a      	lsls	r2, r3, #8
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	61da      	str	r2, [r3, #28]
      break;
 8004e5e:	e002      	b.n	8004e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	75fb      	strb	r3, [r7, #23]
      break;
 8004e64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d101      	bne.n	8004e94 <HAL_TIM_ConfigClockSource+0x1c>
 8004e90:	2302      	movs	r3, #2
 8004e92:	e0b4      	b.n	8004ffe <HAL_TIM_ConfigClockSource+0x186>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004eb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ecc:	d03e      	beq.n	8004f4c <HAL_TIM_ConfigClockSource+0xd4>
 8004ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed2:	f200 8087 	bhi.w	8004fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eda:	f000 8086 	beq.w	8004fea <HAL_TIM_ConfigClockSource+0x172>
 8004ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee2:	d87f      	bhi.n	8004fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee4:	2b70      	cmp	r3, #112	; 0x70
 8004ee6:	d01a      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0xa6>
 8004ee8:	2b70      	cmp	r3, #112	; 0x70
 8004eea:	d87b      	bhi.n	8004fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8004eec:	2b60      	cmp	r3, #96	; 0x60
 8004eee:	d050      	beq.n	8004f92 <HAL_TIM_ConfigClockSource+0x11a>
 8004ef0:	2b60      	cmp	r3, #96	; 0x60
 8004ef2:	d877      	bhi.n	8004fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef4:	2b50      	cmp	r3, #80	; 0x50
 8004ef6:	d03c      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0xfa>
 8004ef8:	2b50      	cmp	r3, #80	; 0x50
 8004efa:	d873      	bhi.n	8004fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8004efc:	2b40      	cmp	r3, #64	; 0x40
 8004efe:	d058      	beq.n	8004fb2 <HAL_TIM_ConfigClockSource+0x13a>
 8004f00:	2b40      	cmp	r3, #64	; 0x40
 8004f02:	d86f      	bhi.n	8004fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8004f04:	2b30      	cmp	r3, #48	; 0x30
 8004f06:	d064      	beq.n	8004fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8004f08:	2b30      	cmp	r3, #48	; 0x30
 8004f0a:	d86b      	bhi.n	8004fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8004f0c:	2b20      	cmp	r3, #32
 8004f0e:	d060      	beq.n	8004fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8004f10:	2b20      	cmp	r3, #32
 8004f12:	d867      	bhi.n	8004fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d05c      	beq.n	8004fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8004f18:	2b10      	cmp	r3, #16
 8004f1a:	d05a      	beq.n	8004fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8004f1c:	e062      	b.n	8004fe4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6818      	ldr	r0, [r3, #0]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	6899      	ldr	r1, [r3, #8]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f000 fb67 	bl	8005600 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	609a      	str	r2, [r3, #8]
      break;
 8004f4a:	e04f      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6818      	ldr	r0, [r3, #0]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	6899      	ldr	r1, [r3, #8]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f000 fb50 	bl	8005600 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689a      	ldr	r2, [r3, #8]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f6e:	609a      	str	r2, [r3, #8]
      break;
 8004f70:	e03c      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6818      	ldr	r0, [r3, #0]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	6859      	ldr	r1, [r3, #4]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	f000 fac4 	bl	800550c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2150      	movs	r1, #80	; 0x50
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fb1d 	bl	80055ca <TIM_ITRx_SetConfig>
      break;
 8004f90:	e02c      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6818      	ldr	r0, [r3, #0]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	6859      	ldr	r1, [r3, #4]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	f000 fae3 	bl	800556a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2160      	movs	r1, #96	; 0x60
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 fb0d 	bl	80055ca <TIM_ITRx_SetConfig>
      break;
 8004fb0:	e01c      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6818      	ldr	r0, [r3, #0]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	6859      	ldr	r1, [r3, #4]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f000 faa4 	bl	800550c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2140      	movs	r1, #64	; 0x40
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 fafd 	bl	80055ca <TIM_ITRx_SetConfig>
      break;
 8004fd0:	e00c      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4610      	mov	r0, r2
 8004fde:	f000 faf4 	bl	80055ca <TIM_ITRx_SetConfig>
      break;
 8004fe2:	e003      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fe8:	e000      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
	...

0800506c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a40      	ldr	r2, [pc, #256]	; (8005180 <TIM_Base_SetConfig+0x114>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d013      	beq.n	80050ac <TIM_Base_SetConfig+0x40>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508a:	d00f      	beq.n	80050ac <TIM_Base_SetConfig+0x40>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a3d      	ldr	r2, [pc, #244]	; (8005184 <TIM_Base_SetConfig+0x118>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00b      	beq.n	80050ac <TIM_Base_SetConfig+0x40>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a3c      	ldr	r2, [pc, #240]	; (8005188 <TIM_Base_SetConfig+0x11c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d007      	beq.n	80050ac <TIM_Base_SetConfig+0x40>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a3b      	ldr	r2, [pc, #236]	; (800518c <TIM_Base_SetConfig+0x120>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d003      	beq.n	80050ac <TIM_Base_SetConfig+0x40>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a3a      	ldr	r2, [pc, #232]	; (8005190 <TIM_Base_SetConfig+0x124>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d108      	bne.n	80050be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a2f      	ldr	r2, [pc, #188]	; (8005180 <TIM_Base_SetConfig+0x114>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d02b      	beq.n	800511e <TIM_Base_SetConfig+0xb2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050cc:	d027      	beq.n	800511e <TIM_Base_SetConfig+0xb2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a2c      	ldr	r2, [pc, #176]	; (8005184 <TIM_Base_SetConfig+0x118>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d023      	beq.n	800511e <TIM_Base_SetConfig+0xb2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a2b      	ldr	r2, [pc, #172]	; (8005188 <TIM_Base_SetConfig+0x11c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d01f      	beq.n	800511e <TIM_Base_SetConfig+0xb2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a2a      	ldr	r2, [pc, #168]	; (800518c <TIM_Base_SetConfig+0x120>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d01b      	beq.n	800511e <TIM_Base_SetConfig+0xb2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a29      	ldr	r2, [pc, #164]	; (8005190 <TIM_Base_SetConfig+0x124>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d017      	beq.n	800511e <TIM_Base_SetConfig+0xb2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a28      	ldr	r2, [pc, #160]	; (8005194 <TIM_Base_SetConfig+0x128>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d013      	beq.n	800511e <TIM_Base_SetConfig+0xb2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a27      	ldr	r2, [pc, #156]	; (8005198 <TIM_Base_SetConfig+0x12c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d00f      	beq.n	800511e <TIM_Base_SetConfig+0xb2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a26      	ldr	r2, [pc, #152]	; (800519c <TIM_Base_SetConfig+0x130>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00b      	beq.n	800511e <TIM_Base_SetConfig+0xb2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a25      	ldr	r2, [pc, #148]	; (80051a0 <TIM_Base_SetConfig+0x134>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d007      	beq.n	800511e <TIM_Base_SetConfig+0xb2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a24      	ldr	r2, [pc, #144]	; (80051a4 <TIM_Base_SetConfig+0x138>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d003      	beq.n	800511e <TIM_Base_SetConfig+0xb2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a23      	ldr	r2, [pc, #140]	; (80051a8 <TIM_Base_SetConfig+0x13c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d108      	bne.n	8005130 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	4313      	orrs	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a0a      	ldr	r2, [pc, #40]	; (8005180 <TIM_Base_SetConfig+0x114>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d003      	beq.n	8005164 <TIM_Base_SetConfig+0xf8>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a0c      	ldr	r2, [pc, #48]	; (8005190 <TIM_Base_SetConfig+0x124>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d103      	bne.n	800516c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	691a      	ldr	r2, [r3, #16]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	615a      	str	r2, [r3, #20]
}
 8005172:	bf00      	nop
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	40010000 	.word	0x40010000
 8005184:	40000400 	.word	0x40000400
 8005188:	40000800 	.word	0x40000800
 800518c:	40000c00 	.word	0x40000c00
 8005190:	40010400 	.word	0x40010400
 8005194:	40014000 	.word	0x40014000
 8005198:	40014400 	.word	0x40014400
 800519c:	40014800 	.word	0x40014800
 80051a0:	40001800 	.word	0x40001800
 80051a4:	40001c00 	.word	0x40001c00
 80051a8:	40002000 	.word	0x40002000

080051ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	f023 0201 	bic.w	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f023 0303 	bic.w	r3, r3, #3
 80051e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f023 0302 	bic.w	r3, r3, #2
 80051f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a20      	ldr	r2, [pc, #128]	; (8005284 <TIM_OC1_SetConfig+0xd8>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d003      	beq.n	8005210 <TIM_OC1_SetConfig+0x64>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a1f      	ldr	r2, [pc, #124]	; (8005288 <TIM_OC1_SetConfig+0xdc>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d10c      	bne.n	800522a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f023 0308 	bic.w	r3, r3, #8
 8005216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f023 0304 	bic.w	r3, r3, #4
 8005228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a15      	ldr	r2, [pc, #84]	; (8005284 <TIM_OC1_SetConfig+0xd8>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d003      	beq.n	800523a <TIM_OC1_SetConfig+0x8e>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a14      	ldr	r2, [pc, #80]	; (8005288 <TIM_OC1_SetConfig+0xdc>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d111      	bne.n	800525e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	621a      	str	r2, [r3, #32]
}
 8005278:	bf00      	nop
 800527a:	371c      	adds	r7, #28
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	40010000 	.word	0x40010000
 8005288:	40010400 	.word	0x40010400

0800528c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	f023 0210 	bic.w	r2, r3, #16
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	021b      	lsls	r3, r3, #8
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f023 0320 	bic.w	r3, r3, #32
 80052d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	011b      	lsls	r3, r3, #4
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a22      	ldr	r2, [pc, #136]	; (8005370 <TIM_OC2_SetConfig+0xe4>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d003      	beq.n	80052f4 <TIM_OC2_SetConfig+0x68>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a21      	ldr	r2, [pc, #132]	; (8005374 <TIM_OC2_SetConfig+0xe8>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d10d      	bne.n	8005310 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	4313      	orrs	r3, r2
 8005306:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800530e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a17      	ldr	r2, [pc, #92]	; (8005370 <TIM_OC2_SetConfig+0xe4>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d003      	beq.n	8005320 <TIM_OC2_SetConfig+0x94>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a16      	ldr	r2, [pc, #88]	; (8005374 <TIM_OC2_SetConfig+0xe8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d113      	bne.n	8005348 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005326:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800532e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	4313      	orrs	r3, r2
 800533a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	4313      	orrs	r3, r2
 8005346:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	621a      	str	r2, [r3, #32]
}
 8005362:	bf00      	nop
 8005364:	371c      	adds	r7, #28
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	40010000 	.word	0x40010000
 8005374:	40010400 	.word	0x40010400

08005378 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0303 	bic.w	r3, r3, #3
 80053ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a21      	ldr	r2, [pc, #132]	; (8005458 <TIM_OC3_SetConfig+0xe0>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d003      	beq.n	80053de <TIM_OC3_SetConfig+0x66>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a20      	ldr	r2, [pc, #128]	; (800545c <TIM_OC3_SetConfig+0xe4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d10d      	bne.n	80053fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	021b      	lsls	r3, r3, #8
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a16      	ldr	r2, [pc, #88]	; (8005458 <TIM_OC3_SetConfig+0xe0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d003      	beq.n	800540a <TIM_OC3_SetConfig+0x92>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a15      	ldr	r2, [pc, #84]	; (800545c <TIM_OC3_SetConfig+0xe4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d113      	bne.n	8005432 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	621a      	str	r2, [r3, #32]
}
 800544c:	bf00      	nop
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	40010000 	.word	0x40010000
 800545c:	40010400 	.word	0x40010400

08005460 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800548e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	021b      	lsls	r3, r3, #8
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	031b      	lsls	r3, r3, #12
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a12      	ldr	r2, [pc, #72]	; (8005504 <TIM_OC4_SetConfig+0xa4>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d003      	beq.n	80054c8 <TIM_OC4_SetConfig+0x68>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a11      	ldr	r2, [pc, #68]	; (8005508 <TIM_OC4_SetConfig+0xa8>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d109      	bne.n	80054dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	019b      	lsls	r3, r3, #6
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	4313      	orrs	r3, r2
 80054da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	621a      	str	r2, [r3, #32]
}
 80054f6:	bf00      	nop
 80054f8:	371c      	adds	r7, #28
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40010000 	.word	0x40010000
 8005508:	40010400 	.word	0x40010400

0800550c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	f023 0201 	bic.w	r2, r3, #1
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	011b      	lsls	r3, r3, #4
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	4313      	orrs	r3, r2
 8005540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f023 030a 	bic.w	r3, r3, #10
 8005548:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4313      	orrs	r3, r2
 8005550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	621a      	str	r2, [r3, #32]
}
 800555e:	bf00      	nop
 8005560:	371c      	adds	r7, #28
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800556a:	b480      	push	{r7}
 800556c:	b087      	sub	sp, #28
 800556e:	af00      	add	r7, sp, #0
 8005570:	60f8      	str	r0, [r7, #12]
 8005572:	60b9      	str	r1, [r7, #8]
 8005574:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	f023 0210 	bic.w	r2, r3, #16
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005594:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	031b      	lsls	r3, r3, #12
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	4313      	orrs	r3, r2
 800559e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	621a      	str	r2, [r3, #32]
}
 80055be:	bf00      	nop
 80055c0:	371c      	adds	r7, #28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b085      	sub	sp, #20
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
 80055d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	f043 0307 	orr.w	r3, r3, #7
 80055ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	609a      	str	r2, [r3, #8]
}
 80055f4:	bf00      	nop
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
 800560c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800561a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	021a      	lsls	r2, r3, #8
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	431a      	orrs	r2, r3
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	4313      	orrs	r3, r2
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	4313      	orrs	r3, r2
 800562c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	609a      	str	r2, [r3, #8]
}
 8005634:	bf00      	nop
 8005636:	371c      	adds	r7, #28
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005640:	b480      	push	{r7}
 8005642:	b087      	sub	sp, #28
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f003 031f 	and.w	r3, r3, #31
 8005652:	2201      	movs	r2, #1
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6a1a      	ldr	r2, [r3, #32]
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	43db      	mvns	r3, r3
 8005662:	401a      	ands	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a1a      	ldr	r2, [r3, #32]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	f003 031f 	and.w	r3, r3, #31
 8005672:	6879      	ldr	r1, [r7, #4]
 8005674:	fa01 f303 	lsl.w	r3, r1, r3
 8005678:	431a      	orrs	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	621a      	str	r2, [r3, #32]
}
 800567e:	bf00      	nop
 8005680:	371c      	adds	r7, #28
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
	...

0800568c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800569c:	2b01      	cmp	r3, #1
 800569e:	d101      	bne.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056a0:	2302      	movs	r3, #2
 80056a2:	e05a      	b.n	800575a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2202      	movs	r2, #2
 80056b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a21      	ldr	r2, [pc, #132]	; (8005768 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d022      	beq.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f0:	d01d      	beq.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a1d      	ldr	r2, [pc, #116]	; (800576c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d018      	beq.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a1b      	ldr	r2, [pc, #108]	; (8005770 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d013      	beq.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a1a      	ldr	r2, [pc, #104]	; (8005774 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d00e      	beq.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a18      	ldr	r2, [pc, #96]	; (8005778 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d009      	beq.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a17      	ldr	r2, [pc, #92]	; (800577c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d004      	beq.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a15      	ldr	r2, [pc, #84]	; (8005780 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d10c      	bne.n	8005748 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005734:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	4313      	orrs	r3, r2
 800573e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	40010000 	.word	0x40010000
 800576c:	40000400 	.word	0x40000400
 8005770:	40000800 	.word	0x40000800
 8005774:	40000c00 	.word	0x40000c00
 8005778:	40010400 	.word	0x40010400
 800577c:	40014000 	.word	0x40014000
 8005780:	40001800 	.word	0x40001800

08005784 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e03f      	b.n	800583e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d106      	bne.n	80057d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fc f866 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2224      	movs	r2, #36	; 0x24
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f929 	bl	8005a48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	691a      	ldr	r2, [r3, #16]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005804:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	695a      	ldr	r2, [r3, #20]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005814:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68da      	ldr	r2, [r3, #12]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005824:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2220      	movs	r2, #32
 8005838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b08a      	sub	sp, #40	; 0x28
 800584a:	af02      	add	r7, sp, #8
 800584c:	60f8      	str	r0, [r7, #12]
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	603b      	str	r3, [r7, #0]
 8005852:	4613      	mov	r3, r2
 8005854:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b20      	cmp	r3, #32
 8005864:	d17c      	bne.n	8005960 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <HAL_UART_Transmit+0x2c>
 800586c:	88fb      	ldrh	r3, [r7, #6]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e075      	b.n	8005962 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <HAL_UART_Transmit+0x3e>
 8005880:	2302      	movs	r3, #2
 8005882:	e06e      	b.n	8005962 <HAL_UART_Transmit+0x11c>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2221      	movs	r2, #33	; 0x21
 8005896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800589a:	f7fc f9b1 	bl	8001c00 <HAL_GetTick>
 800589e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	88fa      	ldrh	r2, [r7, #6]
 80058a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	88fa      	ldrh	r2, [r7, #6]
 80058aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b4:	d108      	bne.n	80058c8 <HAL_UART_Transmit+0x82>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d104      	bne.n	80058c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80058be:	2300      	movs	r3, #0
 80058c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	61bb      	str	r3, [r7, #24]
 80058c6:	e003      	b.n	80058d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058cc:	2300      	movs	r3, #0
 80058ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80058d8:	e02a      	b.n	8005930 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2200      	movs	r2, #0
 80058e2:	2180      	movs	r1, #128	; 0x80
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 f840 	bl	800596a <UART_WaitOnFlagUntilTimeout>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e036      	b.n	8005962 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10b      	bne.n	8005912 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	461a      	mov	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005908:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	3302      	adds	r3, #2
 800590e:	61bb      	str	r3, [r7, #24]
 8005910:	e007      	b.n	8005922 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	781a      	ldrb	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	3301      	adds	r3, #1
 8005920:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	b29a      	uxth	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1cf      	bne.n	80058da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2200      	movs	r2, #0
 8005942:	2140      	movs	r1, #64	; 0x40
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 f810 	bl	800596a <UART_WaitOnFlagUntilTimeout>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e006      	b.n	8005962 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2220      	movs	r2, #32
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	e000      	b.n	8005962 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005960:	2302      	movs	r3, #2
  }
}
 8005962:	4618      	mov	r0, r3
 8005964:	3720      	adds	r7, #32
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b090      	sub	sp, #64	; 0x40
 800596e:	af00      	add	r7, sp, #0
 8005970:	60f8      	str	r0, [r7, #12]
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	603b      	str	r3, [r7, #0]
 8005976:	4613      	mov	r3, r2
 8005978:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800597a:	e050      	b.n	8005a1e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800597c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800597e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005982:	d04c      	beq.n	8005a1e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005986:	2b00      	cmp	r3, #0
 8005988:	d007      	beq.n	800599a <UART_WaitOnFlagUntilTimeout+0x30>
 800598a:	f7fc f939 	bl	8001c00 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005996:	429a      	cmp	r2, r3
 8005998:	d241      	bcs.n	8005a1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	330c      	adds	r3, #12
 80059a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	330c      	adds	r3, #12
 80059b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059ba:	637a      	str	r2, [r7, #52]	; 0x34
 80059bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e5      	bne.n	800599a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	3314      	adds	r3, #20
 80059d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	e853 3f00 	ldrex	r3, [r3]
 80059dc:	613b      	str	r3, [r7, #16]
   return(result);
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f023 0301 	bic.w	r3, r3, #1
 80059e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	3314      	adds	r3, #20
 80059ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059ee:	623a      	str	r2, [r7, #32]
 80059f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	69f9      	ldr	r1, [r7, #28]
 80059f4:	6a3a      	ldr	r2, [r7, #32]
 80059f6:	e841 2300 	strex	r3, r2, [r1]
 80059fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1e5      	bne.n	80059ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2220      	movs	r2, #32
 8005a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e00f      	b.n	8005a3e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	4013      	ands	r3, r2
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	bf0c      	ite	eq
 8005a2e:	2301      	moveq	r3, #1
 8005a30:	2300      	movne	r3, #0
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	461a      	mov	r2, r3
 8005a36:	79fb      	ldrb	r3, [r7, #7]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d09f      	beq.n	800597c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3740      	adds	r7, #64	; 0x40
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
	...

08005a48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a4c:	b0c0      	sub	sp, #256	; 0x100
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a64:	68d9      	ldr	r1, [r3, #12]
 8005a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	ea40 0301 	orr.w	r3, r0, r1
 8005a70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	431a      	orrs	r2, r3
 8005a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005aa0:	f021 010c 	bic.w	r1, r1, #12
 8005aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005aae:	430b      	orrs	r3, r1
 8005ab0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac2:	6999      	ldr	r1, [r3, #24]
 8005ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	ea40 0301 	orr.w	r3, r0, r1
 8005ace:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	4b8f      	ldr	r3, [pc, #572]	; (8005d14 <UART_SetConfig+0x2cc>)
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d005      	beq.n	8005ae8 <UART_SetConfig+0xa0>
 8005adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	4b8d      	ldr	r3, [pc, #564]	; (8005d18 <UART_SetConfig+0x2d0>)
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d104      	bne.n	8005af2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ae8:	f7fe fe78 	bl	80047dc <HAL_RCC_GetPCLK2Freq>
 8005aec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005af0:	e003      	b.n	8005afa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005af2:	f7fe fe5f 	bl	80047b4 <HAL_RCC_GetPCLK1Freq>
 8005af6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005afe:	69db      	ldr	r3, [r3, #28]
 8005b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b04:	f040 810c 	bne.w	8005d20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b1a:	4622      	mov	r2, r4
 8005b1c:	462b      	mov	r3, r5
 8005b1e:	1891      	adds	r1, r2, r2
 8005b20:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b22:	415b      	adcs	r3, r3
 8005b24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b2a:	4621      	mov	r1, r4
 8005b2c:	eb12 0801 	adds.w	r8, r2, r1
 8005b30:	4629      	mov	r1, r5
 8005b32:	eb43 0901 	adc.w	r9, r3, r1
 8005b36:	f04f 0200 	mov.w	r2, #0
 8005b3a:	f04f 0300 	mov.w	r3, #0
 8005b3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b4a:	4690      	mov	r8, r2
 8005b4c:	4699      	mov	r9, r3
 8005b4e:	4623      	mov	r3, r4
 8005b50:	eb18 0303 	adds.w	r3, r8, r3
 8005b54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b58:	462b      	mov	r3, r5
 8005b5a:	eb49 0303 	adc.w	r3, r9, r3
 8005b5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b76:	460b      	mov	r3, r1
 8005b78:	18db      	adds	r3, r3, r3
 8005b7a:	653b      	str	r3, [r7, #80]	; 0x50
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	eb42 0303 	adc.w	r3, r2, r3
 8005b82:	657b      	str	r3, [r7, #84]	; 0x54
 8005b84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b8c:	f7fa fb88 	bl	80002a0 <__aeabi_uldivmod>
 8005b90:	4602      	mov	r2, r0
 8005b92:	460b      	mov	r3, r1
 8005b94:	4b61      	ldr	r3, [pc, #388]	; (8005d1c <UART_SetConfig+0x2d4>)
 8005b96:	fba3 2302 	umull	r2, r3, r3, r2
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	011c      	lsls	r4, r3, #4
 8005b9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ba8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005bac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005bb0:	4642      	mov	r2, r8
 8005bb2:	464b      	mov	r3, r9
 8005bb4:	1891      	adds	r1, r2, r2
 8005bb6:	64b9      	str	r1, [r7, #72]	; 0x48
 8005bb8:	415b      	adcs	r3, r3
 8005bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005bc0:	4641      	mov	r1, r8
 8005bc2:	eb12 0a01 	adds.w	sl, r2, r1
 8005bc6:	4649      	mov	r1, r9
 8005bc8:	eb43 0b01 	adc.w	fp, r3, r1
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	f04f 0300 	mov.w	r3, #0
 8005bd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005bd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005bdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005be0:	4692      	mov	sl, r2
 8005be2:	469b      	mov	fp, r3
 8005be4:	4643      	mov	r3, r8
 8005be6:	eb1a 0303 	adds.w	r3, sl, r3
 8005bea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bee:	464b      	mov	r3, r9
 8005bf0:	eb4b 0303 	adc.w	r3, fp, r3
 8005bf4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	18db      	adds	r3, r3, r3
 8005c10:	643b      	str	r3, [r7, #64]	; 0x40
 8005c12:	4613      	mov	r3, r2
 8005c14:	eb42 0303 	adc.w	r3, r2, r3
 8005c18:	647b      	str	r3, [r7, #68]	; 0x44
 8005c1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c22:	f7fa fb3d 	bl	80002a0 <__aeabi_uldivmod>
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	4611      	mov	r1, r2
 8005c2c:	4b3b      	ldr	r3, [pc, #236]	; (8005d1c <UART_SetConfig+0x2d4>)
 8005c2e:	fba3 2301 	umull	r2, r3, r3, r1
 8005c32:	095b      	lsrs	r3, r3, #5
 8005c34:	2264      	movs	r2, #100	; 0x64
 8005c36:	fb02 f303 	mul.w	r3, r2, r3
 8005c3a:	1acb      	subs	r3, r1, r3
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c42:	4b36      	ldr	r3, [pc, #216]	; (8005d1c <UART_SetConfig+0x2d4>)
 8005c44:	fba3 2302 	umull	r2, r3, r3, r2
 8005c48:	095b      	lsrs	r3, r3, #5
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c50:	441c      	add	r4, r3
 8005c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c56:	2200      	movs	r2, #0
 8005c58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005c60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005c64:	4642      	mov	r2, r8
 8005c66:	464b      	mov	r3, r9
 8005c68:	1891      	adds	r1, r2, r2
 8005c6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c6c:	415b      	adcs	r3, r3
 8005c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c74:	4641      	mov	r1, r8
 8005c76:	1851      	adds	r1, r2, r1
 8005c78:	6339      	str	r1, [r7, #48]	; 0x30
 8005c7a:	4649      	mov	r1, r9
 8005c7c:	414b      	adcs	r3, r1
 8005c7e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c80:	f04f 0200 	mov.w	r2, #0
 8005c84:	f04f 0300 	mov.w	r3, #0
 8005c88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c8c:	4659      	mov	r1, fp
 8005c8e:	00cb      	lsls	r3, r1, #3
 8005c90:	4651      	mov	r1, sl
 8005c92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c96:	4651      	mov	r1, sl
 8005c98:	00ca      	lsls	r2, r1, #3
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	4642      	mov	r2, r8
 8005ca2:	189b      	adds	r3, r3, r2
 8005ca4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ca8:	464b      	mov	r3, r9
 8005caa:	460a      	mov	r2, r1
 8005cac:	eb42 0303 	adc.w	r3, r2, r3
 8005cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005cc0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005cc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005cc8:	460b      	mov	r3, r1
 8005cca:	18db      	adds	r3, r3, r3
 8005ccc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cce:	4613      	mov	r3, r2
 8005cd0:	eb42 0303 	adc.w	r3, r2, r3
 8005cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005cde:	f7fa fadf 	bl	80002a0 <__aeabi_uldivmod>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	4b0d      	ldr	r3, [pc, #52]	; (8005d1c <UART_SetConfig+0x2d4>)
 8005ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8005cec:	095b      	lsrs	r3, r3, #5
 8005cee:	2164      	movs	r1, #100	; 0x64
 8005cf0:	fb01 f303 	mul.w	r3, r1, r3
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	3332      	adds	r3, #50	; 0x32
 8005cfa:	4a08      	ldr	r2, [pc, #32]	; (8005d1c <UART_SetConfig+0x2d4>)
 8005cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8005d00:	095b      	lsrs	r3, r3, #5
 8005d02:	f003 0207 	and.w	r2, r3, #7
 8005d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4422      	add	r2, r4
 8005d0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d10:	e106      	b.n	8005f20 <UART_SetConfig+0x4d8>
 8005d12:	bf00      	nop
 8005d14:	40011000 	.word	0x40011000
 8005d18:	40011400 	.word	0x40011400
 8005d1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d24:	2200      	movs	r2, #0
 8005d26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d32:	4642      	mov	r2, r8
 8005d34:	464b      	mov	r3, r9
 8005d36:	1891      	adds	r1, r2, r2
 8005d38:	6239      	str	r1, [r7, #32]
 8005d3a:	415b      	adcs	r3, r3
 8005d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d42:	4641      	mov	r1, r8
 8005d44:	1854      	adds	r4, r2, r1
 8005d46:	4649      	mov	r1, r9
 8005d48:	eb43 0501 	adc.w	r5, r3, r1
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	f04f 0300 	mov.w	r3, #0
 8005d54:	00eb      	lsls	r3, r5, #3
 8005d56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d5a:	00e2      	lsls	r2, r4, #3
 8005d5c:	4614      	mov	r4, r2
 8005d5e:	461d      	mov	r5, r3
 8005d60:	4643      	mov	r3, r8
 8005d62:	18e3      	adds	r3, r4, r3
 8005d64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d68:	464b      	mov	r3, r9
 8005d6a:	eb45 0303 	adc.w	r3, r5, r3
 8005d6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d82:	f04f 0200 	mov.w	r2, #0
 8005d86:	f04f 0300 	mov.w	r3, #0
 8005d8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d8e:	4629      	mov	r1, r5
 8005d90:	008b      	lsls	r3, r1, #2
 8005d92:	4621      	mov	r1, r4
 8005d94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d98:	4621      	mov	r1, r4
 8005d9a:	008a      	lsls	r2, r1, #2
 8005d9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005da0:	f7fa fa7e 	bl	80002a0 <__aeabi_uldivmod>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4b60      	ldr	r3, [pc, #384]	; (8005f2c <UART_SetConfig+0x4e4>)
 8005daa:	fba3 2302 	umull	r2, r3, r3, r2
 8005dae:	095b      	lsrs	r3, r3, #5
 8005db0:	011c      	lsls	r4, r3, #4
 8005db2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005db6:	2200      	movs	r2, #0
 8005db8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005dbc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005dc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005dc4:	4642      	mov	r2, r8
 8005dc6:	464b      	mov	r3, r9
 8005dc8:	1891      	adds	r1, r2, r2
 8005dca:	61b9      	str	r1, [r7, #24]
 8005dcc:	415b      	adcs	r3, r3
 8005dce:	61fb      	str	r3, [r7, #28]
 8005dd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dd4:	4641      	mov	r1, r8
 8005dd6:	1851      	adds	r1, r2, r1
 8005dd8:	6139      	str	r1, [r7, #16]
 8005dda:	4649      	mov	r1, r9
 8005ddc:	414b      	adcs	r3, r1
 8005dde:	617b      	str	r3, [r7, #20]
 8005de0:	f04f 0200 	mov.w	r2, #0
 8005de4:	f04f 0300 	mov.w	r3, #0
 8005de8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dec:	4659      	mov	r1, fp
 8005dee:	00cb      	lsls	r3, r1, #3
 8005df0:	4651      	mov	r1, sl
 8005df2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005df6:	4651      	mov	r1, sl
 8005df8:	00ca      	lsls	r2, r1, #3
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4603      	mov	r3, r0
 8005e00:	4642      	mov	r2, r8
 8005e02:	189b      	adds	r3, r3, r2
 8005e04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e08:	464b      	mov	r3, r9
 8005e0a:	460a      	mov	r2, r1
 8005e0c:	eb42 0303 	adc.w	r3, r2, r3
 8005e10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e20:	f04f 0200 	mov.w	r2, #0
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e2c:	4649      	mov	r1, r9
 8005e2e:	008b      	lsls	r3, r1, #2
 8005e30:	4641      	mov	r1, r8
 8005e32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e36:	4641      	mov	r1, r8
 8005e38:	008a      	lsls	r2, r1, #2
 8005e3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e3e:	f7fa fa2f 	bl	80002a0 <__aeabi_uldivmod>
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	4611      	mov	r1, r2
 8005e48:	4b38      	ldr	r3, [pc, #224]	; (8005f2c <UART_SetConfig+0x4e4>)
 8005e4a:	fba3 2301 	umull	r2, r3, r3, r1
 8005e4e:	095b      	lsrs	r3, r3, #5
 8005e50:	2264      	movs	r2, #100	; 0x64
 8005e52:	fb02 f303 	mul.w	r3, r2, r3
 8005e56:	1acb      	subs	r3, r1, r3
 8005e58:	011b      	lsls	r3, r3, #4
 8005e5a:	3332      	adds	r3, #50	; 0x32
 8005e5c:	4a33      	ldr	r2, [pc, #204]	; (8005f2c <UART_SetConfig+0x4e4>)
 8005e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e62:	095b      	lsrs	r3, r3, #5
 8005e64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e68:	441c      	add	r4, r3
 8005e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e6e:	2200      	movs	r2, #0
 8005e70:	673b      	str	r3, [r7, #112]	; 0x70
 8005e72:	677a      	str	r2, [r7, #116]	; 0x74
 8005e74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e78:	4642      	mov	r2, r8
 8005e7a:	464b      	mov	r3, r9
 8005e7c:	1891      	adds	r1, r2, r2
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	415b      	adcs	r3, r3
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e88:	4641      	mov	r1, r8
 8005e8a:	1851      	adds	r1, r2, r1
 8005e8c:	6039      	str	r1, [r7, #0]
 8005e8e:	4649      	mov	r1, r9
 8005e90:	414b      	adcs	r3, r1
 8005e92:	607b      	str	r3, [r7, #4]
 8005e94:	f04f 0200 	mov.w	r2, #0
 8005e98:	f04f 0300 	mov.w	r3, #0
 8005e9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ea0:	4659      	mov	r1, fp
 8005ea2:	00cb      	lsls	r3, r1, #3
 8005ea4:	4651      	mov	r1, sl
 8005ea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eaa:	4651      	mov	r1, sl
 8005eac:	00ca      	lsls	r2, r1, #3
 8005eae:	4610      	mov	r0, r2
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	4642      	mov	r2, r8
 8005eb6:	189b      	adds	r3, r3, r2
 8005eb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005eba:	464b      	mov	r3, r9
 8005ebc:	460a      	mov	r2, r1
 8005ebe:	eb42 0303 	adc.w	r3, r2, r3
 8005ec2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	663b      	str	r3, [r7, #96]	; 0x60
 8005ece:	667a      	str	r2, [r7, #100]	; 0x64
 8005ed0:	f04f 0200 	mov.w	r2, #0
 8005ed4:	f04f 0300 	mov.w	r3, #0
 8005ed8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005edc:	4649      	mov	r1, r9
 8005ede:	008b      	lsls	r3, r1, #2
 8005ee0:	4641      	mov	r1, r8
 8005ee2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ee6:	4641      	mov	r1, r8
 8005ee8:	008a      	lsls	r2, r1, #2
 8005eea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005eee:	f7fa f9d7 	bl	80002a0 <__aeabi_uldivmod>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4b0d      	ldr	r3, [pc, #52]	; (8005f2c <UART_SetConfig+0x4e4>)
 8005ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8005efc:	095b      	lsrs	r3, r3, #5
 8005efe:	2164      	movs	r1, #100	; 0x64
 8005f00:	fb01 f303 	mul.w	r3, r1, r3
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	011b      	lsls	r3, r3, #4
 8005f08:	3332      	adds	r3, #50	; 0x32
 8005f0a:	4a08      	ldr	r2, [pc, #32]	; (8005f2c <UART_SetConfig+0x4e4>)
 8005f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f10:	095b      	lsrs	r3, r3, #5
 8005f12:	f003 020f 	and.w	r2, r3, #15
 8005f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4422      	add	r2, r4
 8005f1e:	609a      	str	r2, [r3, #8]
}
 8005f20:	bf00      	nop
 8005f22:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f26:	46bd      	mov	sp, r7
 8005f28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f2c:	51eb851f 	.word	0x51eb851f

08005f30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f30:	b084      	sub	sp, #16
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b084      	sub	sp, #16
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	f107 001c 	add.w	r0, r7, #28
 8005f3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d122      	bne.n	8005f8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d105      	bne.n	8005f82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 faa2 	bl	80064cc <USB_CoreReset>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	73fb      	strb	r3, [r7, #15]
 8005f8c:	e01a      	b.n	8005fc4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fa96 	bl	80064cc <USB_CoreReset>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d106      	bne.n	8005fb8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	639a      	str	r2, [r3, #56]	; 0x38
 8005fb6:	e005      	b.n	8005fc4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d10b      	bne.n	8005fe2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f043 0206 	orr.w	r2, r3, #6
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f043 0220 	orr.w	r2, r3, #32
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fee:	b004      	add	sp, #16
 8005ff0:	4770      	bx	lr

08005ff2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f023 0201 	bic.w	r2, r3, #1
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d115      	bne.n	8006062 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006042:	2001      	movs	r0, #1
 8006044:	f7fb fde8 	bl	8001c18 <HAL_Delay>
      ms++;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	3301      	adds	r3, #1
 800604c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fa2e 	bl	80064b0 <USB_GetMode>
 8006054:	4603      	mov	r3, r0
 8006056:	2b01      	cmp	r3, #1
 8006058:	d01e      	beq.n	8006098 <USB_SetCurrentMode+0x84>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2b31      	cmp	r3, #49	; 0x31
 800605e:	d9f0      	bls.n	8006042 <USB_SetCurrentMode+0x2e>
 8006060:	e01a      	b.n	8006098 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006062:	78fb      	ldrb	r3, [r7, #3]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d115      	bne.n	8006094 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006074:	2001      	movs	r0, #1
 8006076:	f7fb fdcf 	bl	8001c18 <HAL_Delay>
      ms++;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3301      	adds	r3, #1
 800607e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fa15 	bl	80064b0 <USB_GetMode>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d005      	beq.n	8006098 <USB_SetCurrentMode+0x84>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2b31      	cmp	r3, #49	; 0x31
 8006090:	d9f0      	bls.n	8006074 <USB_SetCurrentMode+0x60>
 8006092:	e001      	b.n	8006098 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e005      	b.n	80060a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2b32      	cmp	r3, #50	; 0x32
 800609c:	d101      	bne.n	80060a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e000      	b.n	80060a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060ac:	b084      	sub	sp, #16
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b086      	sub	sp, #24
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80060ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80060c6:	2300      	movs	r3, #0
 80060c8:	613b      	str	r3, [r7, #16]
 80060ca:	e009      	b.n	80060e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	3340      	adds	r3, #64	; 0x40
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	2200      	movs	r2, #0
 80060d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	3301      	adds	r3, #1
 80060de:	613b      	str	r3, [r7, #16]
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	2b0e      	cmp	r3, #14
 80060e4:	d9f2      	bls.n	80060cc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80060e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d11c      	bne.n	8006126 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060fa:	f043 0302 	orr.w	r3, r3, #2
 80060fe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006110:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	639a      	str	r2, [r3, #56]	; 0x38
 8006124:	e00b      	b.n	800613e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006136:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006144:	461a      	mov	r2, r3
 8006146:	2300      	movs	r3, #0
 8006148:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006150:	4619      	mov	r1, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006158:	461a      	mov	r2, r3
 800615a:	680b      	ldr	r3, [r1, #0]
 800615c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800615e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006160:	2b01      	cmp	r3, #1
 8006162:	d10c      	bne.n	800617e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006166:	2b00      	cmp	r3, #0
 8006168:	d104      	bne.n	8006174 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800616a:	2100      	movs	r1, #0
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f965 	bl	800643c <USB_SetDevSpeed>
 8006172:	e008      	b.n	8006186 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006174:	2101      	movs	r1, #1
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f960 	bl	800643c <USB_SetDevSpeed>
 800617c:	e003      	b.n	8006186 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800617e:	2103      	movs	r1, #3
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f95b 	bl	800643c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006186:	2110      	movs	r1, #16
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f8f3 	bl	8006374 <USB_FlushTxFifo>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f91f 	bl	80063dc <USB_FlushRxFifo>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ae:	461a      	mov	r2, r3
 80061b0:	2300      	movs	r3, #0
 80061b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ba:	461a      	mov	r2, r3
 80061bc:	2300      	movs	r3, #0
 80061be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c6:	461a      	mov	r2, r3
 80061c8:	2300      	movs	r3, #0
 80061ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061cc:	2300      	movs	r3, #0
 80061ce:	613b      	str	r3, [r7, #16]
 80061d0:	e043      	b.n	800625a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061e8:	d118      	bne.n	800621c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10a      	bne.n	8006206 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fc:	461a      	mov	r2, r3
 80061fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	e013      	b.n	800622e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006212:	461a      	mov	r2, r3
 8006214:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	e008      	b.n	800622e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006228:	461a      	mov	r2, r3
 800622a:	2300      	movs	r3, #0
 800622c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4413      	add	r3, r2
 8006236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800623a:	461a      	mov	r2, r3
 800623c:	2300      	movs	r3, #0
 800623e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624c:	461a      	mov	r2, r3
 800624e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006252:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	3301      	adds	r3, #1
 8006258:	613b      	str	r3, [r7, #16]
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	429a      	cmp	r2, r3
 8006260:	d3b7      	bcc.n	80061d2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006262:	2300      	movs	r3, #0
 8006264:	613b      	str	r3, [r7, #16]
 8006266:	e043      	b.n	80062f0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4413      	add	r3, r2
 8006270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800627a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800627e:	d118      	bne.n	80062b2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10a      	bne.n	800629c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006292:	461a      	mov	r2, r3
 8006294:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	e013      	b.n	80062c4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a8:	461a      	mov	r2, r3
 80062aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80062ae:	6013      	str	r3, [r2, #0]
 80062b0:	e008      	b.n	80062c4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062be:	461a      	mov	r2, r3
 80062c0:	2300      	movs	r3, #0
 80062c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d0:	461a      	mov	r2, r3
 80062d2:	2300      	movs	r3, #0
 80062d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e2:	461a      	mov	r2, r3
 80062e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	3301      	adds	r3, #1
 80062ee:	613b      	str	r3, [r7, #16]
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d3b7      	bcc.n	8006268 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006306:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800630a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006318:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	2b00      	cmp	r3, #0
 800631e:	d105      	bne.n	800632c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	f043 0210 	orr.w	r2, r3, #16
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	699a      	ldr	r2, [r3, #24]
 8006330:	4b0f      	ldr	r3, [pc, #60]	; (8006370 <USB_DevInit+0x2c4>)
 8006332:	4313      	orrs	r3, r2
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800633a:	2b00      	cmp	r3, #0
 800633c:	d005      	beq.n	800634a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	f043 0208 	orr.w	r2, r3, #8
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800634a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800634c:	2b01      	cmp	r3, #1
 800634e:	d107      	bne.n	8006360 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006358:	f043 0304 	orr.w	r3, r3, #4
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006360:	7dfb      	ldrb	r3, [r7, #23]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800636c:	b004      	add	sp, #16
 800636e:	4770      	bx	lr
 8006370:	803c3800 	.word	0x803c3800

08006374 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800637e:	2300      	movs	r3, #0
 8006380:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3301      	adds	r3, #1
 8006386:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	4a13      	ldr	r2, [pc, #76]	; (80063d8 <USB_FlushTxFifo+0x64>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d901      	bls.n	8006394 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e01b      	b.n	80063cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	daf2      	bge.n	8006382 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800639c:	2300      	movs	r3, #0
 800639e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	019b      	lsls	r3, r3, #6
 80063a4:	f043 0220 	orr.w	r2, r3, #32
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3301      	adds	r3, #1
 80063b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	4a08      	ldr	r2, [pc, #32]	; (80063d8 <USB_FlushTxFifo+0x64>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d901      	bls.n	80063be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e006      	b.n	80063cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	f003 0320 	and.w	r3, r3, #32
 80063c6:	2b20      	cmp	r3, #32
 80063c8:	d0f0      	beq.n	80063ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	00030d40 	.word	0x00030d40

080063dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	3301      	adds	r3, #1
 80063ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4a11      	ldr	r2, [pc, #68]	; (8006438 <USB_FlushRxFifo+0x5c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d901      	bls.n	80063fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e018      	b.n	800642c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	daf2      	bge.n	80063e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2210      	movs	r2, #16
 800640a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	3301      	adds	r3, #1
 8006410:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	4a08      	ldr	r2, [pc, #32]	; (8006438 <USB_FlushRxFifo+0x5c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d901      	bls.n	800641e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e006      	b.n	800642c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	f003 0310 	and.w	r3, r3, #16
 8006426:	2b10      	cmp	r3, #16
 8006428:	d0f0      	beq.n	800640c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	00030d40 	.word	0x00030d40

0800643c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	460b      	mov	r3, r1
 8006446:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	78fb      	ldrb	r3, [r7, #3]
 8006456:	68f9      	ldr	r1, [r7, #12]
 8006458:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800645c:	4313      	orrs	r3, r2
 800645e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800646e:	b480      	push	{r7}
 8006470:	b085      	sub	sp, #20
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006488:	f023 0303 	bic.w	r3, r3, #3
 800648c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800649c:	f043 0302 	orr.w	r3, r3, #2
 80064a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3714      	adds	r7, #20
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	f003 0301 	and.w	r3, r3, #1
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3301      	adds	r3, #1
 80064dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	4a13      	ldr	r2, [pc, #76]	; (8006530 <USB_CoreReset+0x64>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d901      	bls.n	80064ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e01b      	b.n	8006522 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	daf2      	bge.n	80064d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	f043 0201 	orr.w	r2, r3, #1
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	3301      	adds	r3, #1
 8006506:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	4a09      	ldr	r2, [pc, #36]	; (8006530 <USB_CoreReset+0x64>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d901      	bls.n	8006514 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e006      	b.n	8006522 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b01      	cmp	r3, #1
 800651e:	d0f0      	beq.n	8006502 <USB_CoreReset+0x36>

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	00030d40 	.word	0x00030d40

08006534 <siprintf>:
 8006534:	b40e      	push	{r1, r2, r3}
 8006536:	b500      	push	{lr}
 8006538:	b09c      	sub	sp, #112	; 0x70
 800653a:	ab1d      	add	r3, sp, #116	; 0x74
 800653c:	9002      	str	r0, [sp, #8]
 800653e:	9006      	str	r0, [sp, #24]
 8006540:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006544:	4809      	ldr	r0, [pc, #36]	; (800656c <siprintf+0x38>)
 8006546:	9107      	str	r1, [sp, #28]
 8006548:	9104      	str	r1, [sp, #16]
 800654a:	4909      	ldr	r1, [pc, #36]	; (8006570 <siprintf+0x3c>)
 800654c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006550:	9105      	str	r1, [sp, #20]
 8006552:	6800      	ldr	r0, [r0, #0]
 8006554:	9301      	str	r3, [sp, #4]
 8006556:	a902      	add	r1, sp, #8
 8006558:	f000 f9cc 	bl	80068f4 <_svfiprintf_r>
 800655c:	9b02      	ldr	r3, [sp, #8]
 800655e:	2200      	movs	r2, #0
 8006560:	701a      	strb	r2, [r3, #0]
 8006562:	b01c      	add	sp, #112	; 0x70
 8006564:	f85d eb04 	ldr.w	lr, [sp], #4
 8006568:	b003      	add	sp, #12
 800656a:	4770      	bx	lr
 800656c:	2000005c 	.word	0x2000005c
 8006570:	ffff0208 	.word	0xffff0208

08006574 <_vsniprintf_r>:
 8006574:	b530      	push	{r4, r5, lr}
 8006576:	4614      	mov	r4, r2
 8006578:	2c00      	cmp	r4, #0
 800657a:	b09b      	sub	sp, #108	; 0x6c
 800657c:	4605      	mov	r5, r0
 800657e:	461a      	mov	r2, r3
 8006580:	da05      	bge.n	800658e <_vsniprintf_r+0x1a>
 8006582:	238b      	movs	r3, #139	; 0x8b
 8006584:	6003      	str	r3, [r0, #0]
 8006586:	f04f 30ff 	mov.w	r0, #4294967295
 800658a:	b01b      	add	sp, #108	; 0x6c
 800658c:	bd30      	pop	{r4, r5, pc}
 800658e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006592:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006596:	bf14      	ite	ne
 8006598:	f104 33ff 	addne.w	r3, r4, #4294967295
 800659c:	4623      	moveq	r3, r4
 800659e:	9302      	str	r3, [sp, #8]
 80065a0:	9305      	str	r3, [sp, #20]
 80065a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065a6:	9100      	str	r1, [sp, #0]
 80065a8:	9104      	str	r1, [sp, #16]
 80065aa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80065ae:	4669      	mov	r1, sp
 80065b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80065b2:	f000 f99f 	bl	80068f4 <_svfiprintf_r>
 80065b6:	1c43      	adds	r3, r0, #1
 80065b8:	bfbc      	itt	lt
 80065ba:	238b      	movlt	r3, #139	; 0x8b
 80065bc:	602b      	strlt	r3, [r5, #0]
 80065be:	2c00      	cmp	r4, #0
 80065c0:	d0e3      	beq.n	800658a <_vsniprintf_r+0x16>
 80065c2:	9b00      	ldr	r3, [sp, #0]
 80065c4:	2200      	movs	r2, #0
 80065c6:	701a      	strb	r2, [r3, #0]
 80065c8:	e7df      	b.n	800658a <_vsniprintf_r+0x16>
	...

080065cc <vsniprintf>:
 80065cc:	b507      	push	{r0, r1, r2, lr}
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	4613      	mov	r3, r2
 80065d2:	460a      	mov	r2, r1
 80065d4:	4601      	mov	r1, r0
 80065d6:	4803      	ldr	r0, [pc, #12]	; (80065e4 <vsniprintf+0x18>)
 80065d8:	6800      	ldr	r0, [r0, #0]
 80065da:	f7ff ffcb 	bl	8006574 <_vsniprintf_r>
 80065de:	b003      	add	sp, #12
 80065e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80065e4:	2000005c 	.word	0x2000005c

080065e8 <memset>:
 80065e8:	4402      	add	r2, r0
 80065ea:	4603      	mov	r3, r0
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d100      	bne.n	80065f2 <memset+0xa>
 80065f0:	4770      	bx	lr
 80065f2:	f803 1b01 	strb.w	r1, [r3], #1
 80065f6:	e7f9      	b.n	80065ec <memset+0x4>

080065f8 <__errno>:
 80065f8:	4b01      	ldr	r3, [pc, #4]	; (8006600 <__errno+0x8>)
 80065fa:	6818      	ldr	r0, [r3, #0]
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	2000005c 	.word	0x2000005c

08006604 <__libc_init_array>:
 8006604:	b570      	push	{r4, r5, r6, lr}
 8006606:	4d0d      	ldr	r5, [pc, #52]	; (800663c <__libc_init_array+0x38>)
 8006608:	4c0d      	ldr	r4, [pc, #52]	; (8006640 <__libc_init_array+0x3c>)
 800660a:	1b64      	subs	r4, r4, r5
 800660c:	10a4      	asrs	r4, r4, #2
 800660e:	2600      	movs	r6, #0
 8006610:	42a6      	cmp	r6, r4
 8006612:	d109      	bne.n	8006628 <__libc_init_array+0x24>
 8006614:	4d0b      	ldr	r5, [pc, #44]	; (8006644 <__libc_init_array+0x40>)
 8006616:	4c0c      	ldr	r4, [pc, #48]	; (8006648 <__libc_init_array+0x44>)
 8006618:	f000 fc6a 	bl	8006ef0 <_init>
 800661c:	1b64      	subs	r4, r4, r5
 800661e:	10a4      	asrs	r4, r4, #2
 8006620:	2600      	movs	r6, #0
 8006622:	42a6      	cmp	r6, r4
 8006624:	d105      	bne.n	8006632 <__libc_init_array+0x2e>
 8006626:	bd70      	pop	{r4, r5, r6, pc}
 8006628:	f855 3b04 	ldr.w	r3, [r5], #4
 800662c:	4798      	blx	r3
 800662e:	3601      	adds	r6, #1
 8006630:	e7ee      	b.n	8006610 <__libc_init_array+0xc>
 8006632:	f855 3b04 	ldr.w	r3, [r5], #4
 8006636:	4798      	blx	r3
 8006638:	3601      	adds	r6, #1
 800663a:	e7f2      	b.n	8006622 <__libc_init_array+0x1e>
 800663c:	08006f8c 	.word	0x08006f8c
 8006640:	08006f8c 	.word	0x08006f8c
 8006644:	08006f8c 	.word	0x08006f8c
 8006648:	08006f90 	.word	0x08006f90

0800664c <__retarget_lock_acquire_recursive>:
 800664c:	4770      	bx	lr

0800664e <__retarget_lock_release_recursive>:
 800664e:	4770      	bx	lr

08006650 <_free_r>:
 8006650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006652:	2900      	cmp	r1, #0
 8006654:	d044      	beq.n	80066e0 <_free_r+0x90>
 8006656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800665a:	9001      	str	r0, [sp, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	f1a1 0404 	sub.w	r4, r1, #4
 8006662:	bfb8      	it	lt
 8006664:	18e4      	addlt	r4, r4, r3
 8006666:	f000 f8df 	bl	8006828 <__malloc_lock>
 800666a:	4a1e      	ldr	r2, [pc, #120]	; (80066e4 <_free_r+0x94>)
 800666c:	9801      	ldr	r0, [sp, #4]
 800666e:	6813      	ldr	r3, [r2, #0]
 8006670:	b933      	cbnz	r3, 8006680 <_free_r+0x30>
 8006672:	6063      	str	r3, [r4, #4]
 8006674:	6014      	str	r4, [r2, #0]
 8006676:	b003      	add	sp, #12
 8006678:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800667c:	f000 b8da 	b.w	8006834 <__malloc_unlock>
 8006680:	42a3      	cmp	r3, r4
 8006682:	d908      	bls.n	8006696 <_free_r+0x46>
 8006684:	6825      	ldr	r5, [r4, #0]
 8006686:	1961      	adds	r1, r4, r5
 8006688:	428b      	cmp	r3, r1
 800668a:	bf01      	itttt	eq
 800668c:	6819      	ldreq	r1, [r3, #0]
 800668e:	685b      	ldreq	r3, [r3, #4]
 8006690:	1949      	addeq	r1, r1, r5
 8006692:	6021      	streq	r1, [r4, #0]
 8006694:	e7ed      	b.n	8006672 <_free_r+0x22>
 8006696:	461a      	mov	r2, r3
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	b10b      	cbz	r3, 80066a0 <_free_r+0x50>
 800669c:	42a3      	cmp	r3, r4
 800669e:	d9fa      	bls.n	8006696 <_free_r+0x46>
 80066a0:	6811      	ldr	r1, [r2, #0]
 80066a2:	1855      	adds	r5, r2, r1
 80066a4:	42a5      	cmp	r5, r4
 80066a6:	d10b      	bne.n	80066c0 <_free_r+0x70>
 80066a8:	6824      	ldr	r4, [r4, #0]
 80066aa:	4421      	add	r1, r4
 80066ac:	1854      	adds	r4, r2, r1
 80066ae:	42a3      	cmp	r3, r4
 80066b0:	6011      	str	r1, [r2, #0]
 80066b2:	d1e0      	bne.n	8006676 <_free_r+0x26>
 80066b4:	681c      	ldr	r4, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	6053      	str	r3, [r2, #4]
 80066ba:	440c      	add	r4, r1
 80066bc:	6014      	str	r4, [r2, #0]
 80066be:	e7da      	b.n	8006676 <_free_r+0x26>
 80066c0:	d902      	bls.n	80066c8 <_free_r+0x78>
 80066c2:	230c      	movs	r3, #12
 80066c4:	6003      	str	r3, [r0, #0]
 80066c6:	e7d6      	b.n	8006676 <_free_r+0x26>
 80066c8:	6825      	ldr	r5, [r4, #0]
 80066ca:	1961      	adds	r1, r4, r5
 80066cc:	428b      	cmp	r3, r1
 80066ce:	bf04      	itt	eq
 80066d0:	6819      	ldreq	r1, [r3, #0]
 80066d2:	685b      	ldreq	r3, [r3, #4]
 80066d4:	6063      	str	r3, [r4, #4]
 80066d6:	bf04      	itt	eq
 80066d8:	1949      	addeq	r1, r1, r5
 80066da:	6021      	streq	r1, [r4, #0]
 80066dc:	6054      	str	r4, [r2, #4]
 80066de:	e7ca      	b.n	8006676 <_free_r+0x26>
 80066e0:	b003      	add	sp, #12
 80066e2:	bd30      	pop	{r4, r5, pc}
 80066e4:	20000ac4 	.word	0x20000ac4

080066e8 <sbrk_aligned>:
 80066e8:	b570      	push	{r4, r5, r6, lr}
 80066ea:	4e0e      	ldr	r6, [pc, #56]	; (8006724 <sbrk_aligned+0x3c>)
 80066ec:	460c      	mov	r4, r1
 80066ee:	6831      	ldr	r1, [r6, #0]
 80066f0:	4605      	mov	r5, r0
 80066f2:	b911      	cbnz	r1, 80066fa <sbrk_aligned+0x12>
 80066f4:	f000 fba6 	bl	8006e44 <_sbrk_r>
 80066f8:	6030      	str	r0, [r6, #0]
 80066fa:	4621      	mov	r1, r4
 80066fc:	4628      	mov	r0, r5
 80066fe:	f000 fba1 	bl	8006e44 <_sbrk_r>
 8006702:	1c43      	adds	r3, r0, #1
 8006704:	d00a      	beq.n	800671c <sbrk_aligned+0x34>
 8006706:	1cc4      	adds	r4, r0, #3
 8006708:	f024 0403 	bic.w	r4, r4, #3
 800670c:	42a0      	cmp	r0, r4
 800670e:	d007      	beq.n	8006720 <sbrk_aligned+0x38>
 8006710:	1a21      	subs	r1, r4, r0
 8006712:	4628      	mov	r0, r5
 8006714:	f000 fb96 	bl	8006e44 <_sbrk_r>
 8006718:	3001      	adds	r0, #1
 800671a:	d101      	bne.n	8006720 <sbrk_aligned+0x38>
 800671c:	f04f 34ff 	mov.w	r4, #4294967295
 8006720:	4620      	mov	r0, r4
 8006722:	bd70      	pop	{r4, r5, r6, pc}
 8006724:	20000ac8 	.word	0x20000ac8

08006728 <_malloc_r>:
 8006728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800672c:	1ccd      	adds	r5, r1, #3
 800672e:	f025 0503 	bic.w	r5, r5, #3
 8006732:	3508      	adds	r5, #8
 8006734:	2d0c      	cmp	r5, #12
 8006736:	bf38      	it	cc
 8006738:	250c      	movcc	r5, #12
 800673a:	2d00      	cmp	r5, #0
 800673c:	4607      	mov	r7, r0
 800673e:	db01      	blt.n	8006744 <_malloc_r+0x1c>
 8006740:	42a9      	cmp	r1, r5
 8006742:	d905      	bls.n	8006750 <_malloc_r+0x28>
 8006744:	230c      	movs	r3, #12
 8006746:	603b      	str	r3, [r7, #0]
 8006748:	2600      	movs	r6, #0
 800674a:	4630      	mov	r0, r6
 800674c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006750:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006824 <_malloc_r+0xfc>
 8006754:	f000 f868 	bl	8006828 <__malloc_lock>
 8006758:	f8d8 3000 	ldr.w	r3, [r8]
 800675c:	461c      	mov	r4, r3
 800675e:	bb5c      	cbnz	r4, 80067b8 <_malloc_r+0x90>
 8006760:	4629      	mov	r1, r5
 8006762:	4638      	mov	r0, r7
 8006764:	f7ff ffc0 	bl	80066e8 <sbrk_aligned>
 8006768:	1c43      	adds	r3, r0, #1
 800676a:	4604      	mov	r4, r0
 800676c:	d155      	bne.n	800681a <_malloc_r+0xf2>
 800676e:	f8d8 4000 	ldr.w	r4, [r8]
 8006772:	4626      	mov	r6, r4
 8006774:	2e00      	cmp	r6, #0
 8006776:	d145      	bne.n	8006804 <_malloc_r+0xdc>
 8006778:	2c00      	cmp	r4, #0
 800677a:	d048      	beq.n	800680e <_malloc_r+0xe6>
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	4631      	mov	r1, r6
 8006780:	4638      	mov	r0, r7
 8006782:	eb04 0903 	add.w	r9, r4, r3
 8006786:	f000 fb5d 	bl	8006e44 <_sbrk_r>
 800678a:	4581      	cmp	r9, r0
 800678c:	d13f      	bne.n	800680e <_malloc_r+0xe6>
 800678e:	6821      	ldr	r1, [r4, #0]
 8006790:	1a6d      	subs	r5, r5, r1
 8006792:	4629      	mov	r1, r5
 8006794:	4638      	mov	r0, r7
 8006796:	f7ff ffa7 	bl	80066e8 <sbrk_aligned>
 800679a:	3001      	adds	r0, #1
 800679c:	d037      	beq.n	800680e <_malloc_r+0xe6>
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	442b      	add	r3, r5
 80067a2:	6023      	str	r3, [r4, #0]
 80067a4:	f8d8 3000 	ldr.w	r3, [r8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d038      	beq.n	800681e <_malloc_r+0xf6>
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	42a2      	cmp	r2, r4
 80067b0:	d12b      	bne.n	800680a <_malloc_r+0xe2>
 80067b2:	2200      	movs	r2, #0
 80067b4:	605a      	str	r2, [r3, #4]
 80067b6:	e00f      	b.n	80067d8 <_malloc_r+0xb0>
 80067b8:	6822      	ldr	r2, [r4, #0]
 80067ba:	1b52      	subs	r2, r2, r5
 80067bc:	d41f      	bmi.n	80067fe <_malloc_r+0xd6>
 80067be:	2a0b      	cmp	r2, #11
 80067c0:	d917      	bls.n	80067f2 <_malloc_r+0xca>
 80067c2:	1961      	adds	r1, r4, r5
 80067c4:	42a3      	cmp	r3, r4
 80067c6:	6025      	str	r5, [r4, #0]
 80067c8:	bf18      	it	ne
 80067ca:	6059      	strne	r1, [r3, #4]
 80067cc:	6863      	ldr	r3, [r4, #4]
 80067ce:	bf08      	it	eq
 80067d0:	f8c8 1000 	streq.w	r1, [r8]
 80067d4:	5162      	str	r2, [r4, r5]
 80067d6:	604b      	str	r3, [r1, #4]
 80067d8:	4638      	mov	r0, r7
 80067da:	f104 060b 	add.w	r6, r4, #11
 80067de:	f000 f829 	bl	8006834 <__malloc_unlock>
 80067e2:	f026 0607 	bic.w	r6, r6, #7
 80067e6:	1d23      	adds	r3, r4, #4
 80067e8:	1af2      	subs	r2, r6, r3
 80067ea:	d0ae      	beq.n	800674a <_malloc_r+0x22>
 80067ec:	1b9b      	subs	r3, r3, r6
 80067ee:	50a3      	str	r3, [r4, r2]
 80067f0:	e7ab      	b.n	800674a <_malloc_r+0x22>
 80067f2:	42a3      	cmp	r3, r4
 80067f4:	6862      	ldr	r2, [r4, #4]
 80067f6:	d1dd      	bne.n	80067b4 <_malloc_r+0x8c>
 80067f8:	f8c8 2000 	str.w	r2, [r8]
 80067fc:	e7ec      	b.n	80067d8 <_malloc_r+0xb0>
 80067fe:	4623      	mov	r3, r4
 8006800:	6864      	ldr	r4, [r4, #4]
 8006802:	e7ac      	b.n	800675e <_malloc_r+0x36>
 8006804:	4634      	mov	r4, r6
 8006806:	6876      	ldr	r6, [r6, #4]
 8006808:	e7b4      	b.n	8006774 <_malloc_r+0x4c>
 800680a:	4613      	mov	r3, r2
 800680c:	e7cc      	b.n	80067a8 <_malloc_r+0x80>
 800680e:	230c      	movs	r3, #12
 8006810:	603b      	str	r3, [r7, #0]
 8006812:	4638      	mov	r0, r7
 8006814:	f000 f80e 	bl	8006834 <__malloc_unlock>
 8006818:	e797      	b.n	800674a <_malloc_r+0x22>
 800681a:	6025      	str	r5, [r4, #0]
 800681c:	e7dc      	b.n	80067d8 <_malloc_r+0xb0>
 800681e:	605b      	str	r3, [r3, #4]
 8006820:	deff      	udf	#255	; 0xff
 8006822:	bf00      	nop
 8006824:	20000ac4 	.word	0x20000ac4

08006828 <__malloc_lock>:
 8006828:	4801      	ldr	r0, [pc, #4]	; (8006830 <__malloc_lock+0x8>)
 800682a:	f7ff bf0f 	b.w	800664c <__retarget_lock_acquire_recursive>
 800682e:	bf00      	nop
 8006830:	20000ac0 	.word	0x20000ac0

08006834 <__malloc_unlock>:
 8006834:	4801      	ldr	r0, [pc, #4]	; (800683c <__malloc_unlock+0x8>)
 8006836:	f7ff bf0a 	b.w	800664e <__retarget_lock_release_recursive>
 800683a:	bf00      	nop
 800683c:	20000ac0 	.word	0x20000ac0

08006840 <__ssputs_r>:
 8006840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006844:	688e      	ldr	r6, [r1, #8]
 8006846:	461f      	mov	r7, r3
 8006848:	42be      	cmp	r6, r7
 800684a:	680b      	ldr	r3, [r1, #0]
 800684c:	4682      	mov	sl, r0
 800684e:	460c      	mov	r4, r1
 8006850:	4690      	mov	r8, r2
 8006852:	d82c      	bhi.n	80068ae <__ssputs_r+0x6e>
 8006854:	898a      	ldrh	r2, [r1, #12]
 8006856:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800685a:	d026      	beq.n	80068aa <__ssputs_r+0x6a>
 800685c:	6965      	ldr	r5, [r4, #20]
 800685e:	6909      	ldr	r1, [r1, #16]
 8006860:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006864:	eba3 0901 	sub.w	r9, r3, r1
 8006868:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800686c:	1c7b      	adds	r3, r7, #1
 800686e:	444b      	add	r3, r9
 8006870:	106d      	asrs	r5, r5, #1
 8006872:	429d      	cmp	r5, r3
 8006874:	bf38      	it	cc
 8006876:	461d      	movcc	r5, r3
 8006878:	0553      	lsls	r3, r2, #21
 800687a:	d527      	bpl.n	80068cc <__ssputs_r+0x8c>
 800687c:	4629      	mov	r1, r5
 800687e:	f7ff ff53 	bl	8006728 <_malloc_r>
 8006882:	4606      	mov	r6, r0
 8006884:	b360      	cbz	r0, 80068e0 <__ssputs_r+0xa0>
 8006886:	6921      	ldr	r1, [r4, #16]
 8006888:	464a      	mov	r2, r9
 800688a:	f000 faeb 	bl	8006e64 <memcpy>
 800688e:	89a3      	ldrh	r3, [r4, #12]
 8006890:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006898:	81a3      	strh	r3, [r4, #12]
 800689a:	6126      	str	r6, [r4, #16]
 800689c:	6165      	str	r5, [r4, #20]
 800689e:	444e      	add	r6, r9
 80068a0:	eba5 0509 	sub.w	r5, r5, r9
 80068a4:	6026      	str	r6, [r4, #0]
 80068a6:	60a5      	str	r5, [r4, #8]
 80068a8:	463e      	mov	r6, r7
 80068aa:	42be      	cmp	r6, r7
 80068ac:	d900      	bls.n	80068b0 <__ssputs_r+0x70>
 80068ae:	463e      	mov	r6, r7
 80068b0:	6820      	ldr	r0, [r4, #0]
 80068b2:	4632      	mov	r2, r6
 80068b4:	4641      	mov	r1, r8
 80068b6:	f000 faab 	bl	8006e10 <memmove>
 80068ba:	68a3      	ldr	r3, [r4, #8]
 80068bc:	1b9b      	subs	r3, r3, r6
 80068be:	60a3      	str	r3, [r4, #8]
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	4433      	add	r3, r6
 80068c4:	6023      	str	r3, [r4, #0]
 80068c6:	2000      	movs	r0, #0
 80068c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068cc:	462a      	mov	r2, r5
 80068ce:	f000 fad7 	bl	8006e80 <_realloc_r>
 80068d2:	4606      	mov	r6, r0
 80068d4:	2800      	cmp	r0, #0
 80068d6:	d1e0      	bne.n	800689a <__ssputs_r+0x5a>
 80068d8:	6921      	ldr	r1, [r4, #16]
 80068da:	4650      	mov	r0, sl
 80068dc:	f7ff feb8 	bl	8006650 <_free_r>
 80068e0:	230c      	movs	r3, #12
 80068e2:	f8ca 3000 	str.w	r3, [sl]
 80068e6:	89a3      	ldrh	r3, [r4, #12]
 80068e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068ec:	81a3      	strh	r3, [r4, #12]
 80068ee:	f04f 30ff 	mov.w	r0, #4294967295
 80068f2:	e7e9      	b.n	80068c8 <__ssputs_r+0x88>

080068f4 <_svfiprintf_r>:
 80068f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f8:	4698      	mov	r8, r3
 80068fa:	898b      	ldrh	r3, [r1, #12]
 80068fc:	061b      	lsls	r3, r3, #24
 80068fe:	b09d      	sub	sp, #116	; 0x74
 8006900:	4607      	mov	r7, r0
 8006902:	460d      	mov	r5, r1
 8006904:	4614      	mov	r4, r2
 8006906:	d50e      	bpl.n	8006926 <_svfiprintf_r+0x32>
 8006908:	690b      	ldr	r3, [r1, #16]
 800690a:	b963      	cbnz	r3, 8006926 <_svfiprintf_r+0x32>
 800690c:	2140      	movs	r1, #64	; 0x40
 800690e:	f7ff ff0b 	bl	8006728 <_malloc_r>
 8006912:	6028      	str	r0, [r5, #0]
 8006914:	6128      	str	r0, [r5, #16]
 8006916:	b920      	cbnz	r0, 8006922 <_svfiprintf_r+0x2e>
 8006918:	230c      	movs	r3, #12
 800691a:	603b      	str	r3, [r7, #0]
 800691c:	f04f 30ff 	mov.w	r0, #4294967295
 8006920:	e0d0      	b.n	8006ac4 <_svfiprintf_r+0x1d0>
 8006922:	2340      	movs	r3, #64	; 0x40
 8006924:	616b      	str	r3, [r5, #20]
 8006926:	2300      	movs	r3, #0
 8006928:	9309      	str	r3, [sp, #36]	; 0x24
 800692a:	2320      	movs	r3, #32
 800692c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006930:	f8cd 800c 	str.w	r8, [sp, #12]
 8006934:	2330      	movs	r3, #48	; 0x30
 8006936:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006adc <_svfiprintf_r+0x1e8>
 800693a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800693e:	f04f 0901 	mov.w	r9, #1
 8006942:	4623      	mov	r3, r4
 8006944:	469a      	mov	sl, r3
 8006946:	f813 2b01 	ldrb.w	r2, [r3], #1
 800694a:	b10a      	cbz	r2, 8006950 <_svfiprintf_r+0x5c>
 800694c:	2a25      	cmp	r2, #37	; 0x25
 800694e:	d1f9      	bne.n	8006944 <_svfiprintf_r+0x50>
 8006950:	ebba 0b04 	subs.w	fp, sl, r4
 8006954:	d00b      	beq.n	800696e <_svfiprintf_r+0x7a>
 8006956:	465b      	mov	r3, fp
 8006958:	4622      	mov	r2, r4
 800695a:	4629      	mov	r1, r5
 800695c:	4638      	mov	r0, r7
 800695e:	f7ff ff6f 	bl	8006840 <__ssputs_r>
 8006962:	3001      	adds	r0, #1
 8006964:	f000 80a9 	beq.w	8006aba <_svfiprintf_r+0x1c6>
 8006968:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800696a:	445a      	add	r2, fp
 800696c:	9209      	str	r2, [sp, #36]	; 0x24
 800696e:	f89a 3000 	ldrb.w	r3, [sl]
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 80a1 	beq.w	8006aba <_svfiprintf_r+0x1c6>
 8006978:	2300      	movs	r3, #0
 800697a:	f04f 32ff 	mov.w	r2, #4294967295
 800697e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006982:	f10a 0a01 	add.w	sl, sl, #1
 8006986:	9304      	str	r3, [sp, #16]
 8006988:	9307      	str	r3, [sp, #28]
 800698a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800698e:	931a      	str	r3, [sp, #104]	; 0x68
 8006990:	4654      	mov	r4, sl
 8006992:	2205      	movs	r2, #5
 8006994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006998:	4850      	ldr	r0, [pc, #320]	; (8006adc <_svfiprintf_r+0x1e8>)
 800699a:	f7f9 fc31 	bl	8000200 <memchr>
 800699e:	9a04      	ldr	r2, [sp, #16]
 80069a0:	b9d8      	cbnz	r0, 80069da <_svfiprintf_r+0xe6>
 80069a2:	06d0      	lsls	r0, r2, #27
 80069a4:	bf44      	itt	mi
 80069a6:	2320      	movmi	r3, #32
 80069a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069ac:	0711      	lsls	r1, r2, #28
 80069ae:	bf44      	itt	mi
 80069b0:	232b      	movmi	r3, #43	; 0x2b
 80069b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069b6:	f89a 3000 	ldrb.w	r3, [sl]
 80069ba:	2b2a      	cmp	r3, #42	; 0x2a
 80069bc:	d015      	beq.n	80069ea <_svfiprintf_r+0xf6>
 80069be:	9a07      	ldr	r2, [sp, #28]
 80069c0:	4654      	mov	r4, sl
 80069c2:	2000      	movs	r0, #0
 80069c4:	f04f 0c0a 	mov.w	ip, #10
 80069c8:	4621      	mov	r1, r4
 80069ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069ce:	3b30      	subs	r3, #48	; 0x30
 80069d0:	2b09      	cmp	r3, #9
 80069d2:	d94d      	bls.n	8006a70 <_svfiprintf_r+0x17c>
 80069d4:	b1b0      	cbz	r0, 8006a04 <_svfiprintf_r+0x110>
 80069d6:	9207      	str	r2, [sp, #28]
 80069d8:	e014      	b.n	8006a04 <_svfiprintf_r+0x110>
 80069da:	eba0 0308 	sub.w	r3, r0, r8
 80069de:	fa09 f303 	lsl.w	r3, r9, r3
 80069e2:	4313      	orrs	r3, r2
 80069e4:	9304      	str	r3, [sp, #16]
 80069e6:	46a2      	mov	sl, r4
 80069e8:	e7d2      	b.n	8006990 <_svfiprintf_r+0x9c>
 80069ea:	9b03      	ldr	r3, [sp, #12]
 80069ec:	1d19      	adds	r1, r3, #4
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	9103      	str	r1, [sp, #12]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	bfbb      	ittet	lt
 80069f6:	425b      	neglt	r3, r3
 80069f8:	f042 0202 	orrlt.w	r2, r2, #2
 80069fc:	9307      	strge	r3, [sp, #28]
 80069fe:	9307      	strlt	r3, [sp, #28]
 8006a00:	bfb8      	it	lt
 8006a02:	9204      	strlt	r2, [sp, #16]
 8006a04:	7823      	ldrb	r3, [r4, #0]
 8006a06:	2b2e      	cmp	r3, #46	; 0x2e
 8006a08:	d10c      	bne.n	8006a24 <_svfiprintf_r+0x130>
 8006a0a:	7863      	ldrb	r3, [r4, #1]
 8006a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8006a0e:	d134      	bne.n	8006a7a <_svfiprintf_r+0x186>
 8006a10:	9b03      	ldr	r3, [sp, #12]
 8006a12:	1d1a      	adds	r2, r3, #4
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	9203      	str	r2, [sp, #12]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	bfb8      	it	lt
 8006a1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a20:	3402      	adds	r4, #2
 8006a22:	9305      	str	r3, [sp, #20]
 8006a24:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006aec <_svfiprintf_r+0x1f8>
 8006a28:	7821      	ldrb	r1, [r4, #0]
 8006a2a:	2203      	movs	r2, #3
 8006a2c:	4650      	mov	r0, sl
 8006a2e:	f7f9 fbe7 	bl	8000200 <memchr>
 8006a32:	b138      	cbz	r0, 8006a44 <_svfiprintf_r+0x150>
 8006a34:	9b04      	ldr	r3, [sp, #16]
 8006a36:	eba0 000a 	sub.w	r0, r0, sl
 8006a3a:	2240      	movs	r2, #64	; 0x40
 8006a3c:	4082      	lsls	r2, r0
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	3401      	adds	r4, #1
 8006a42:	9304      	str	r3, [sp, #16]
 8006a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a48:	4825      	ldr	r0, [pc, #148]	; (8006ae0 <_svfiprintf_r+0x1ec>)
 8006a4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a4e:	2206      	movs	r2, #6
 8006a50:	f7f9 fbd6 	bl	8000200 <memchr>
 8006a54:	2800      	cmp	r0, #0
 8006a56:	d038      	beq.n	8006aca <_svfiprintf_r+0x1d6>
 8006a58:	4b22      	ldr	r3, [pc, #136]	; (8006ae4 <_svfiprintf_r+0x1f0>)
 8006a5a:	bb1b      	cbnz	r3, 8006aa4 <_svfiprintf_r+0x1b0>
 8006a5c:	9b03      	ldr	r3, [sp, #12]
 8006a5e:	3307      	adds	r3, #7
 8006a60:	f023 0307 	bic.w	r3, r3, #7
 8006a64:	3308      	adds	r3, #8
 8006a66:	9303      	str	r3, [sp, #12]
 8006a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a6a:	4433      	add	r3, r6
 8006a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a6e:	e768      	b.n	8006942 <_svfiprintf_r+0x4e>
 8006a70:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a74:	460c      	mov	r4, r1
 8006a76:	2001      	movs	r0, #1
 8006a78:	e7a6      	b.n	80069c8 <_svfiprintf_r+0xd4>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	3401      	adds	r4, #1
 8006a7e:	9305      	str	r3, [sp, #20]
 8006a80:	4619      	mov	r1, r3
 8006a82:	f04f 0c0a 	mov.w	ip, #10
 8006a86:	4620      	mov	r0, r4
 8006a88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a8c:	3a30      	subs	r2, #48	; 0x30
 8006a8e:	2a09      	cmp	r2, #9
 8006a90:	d903      	bls.n	8006a9a <_svfiprintf_r+0x1a6>
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d0c6      	beq.n	8006a24 <_svfiprintf_r+0x130>
 8006a96:	9105      	str	r1, [sp, #20]
 8006a98:	e7c4      	b.n	8006a24 <_svfiprintf_r+0x130>
 8006a9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e7f0      	b.n	8006a86 <_svfiprintf_r+0x192>
 8006aa4:	ab03      	add	r3, sp, #12
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	462a      	mov	r2, r5
 8006aaa:	4b0f      	ldr	r3, [pc, #60]	; (8006ae8 <_svfiprintf_r+0x1f4>)
 8006aac:	a904      	add	r1, sp, #16
 8006aae:	4638      	mov	r0, r7
 8006ab0:	f3af 8000 	nop.w
 8006ab4:	1c42      	adds	r2, r0, #1
 8006ab6:	4606      	mov	r6, r0
 8006ab8:	d1d6      	bne.n	8006a68 <_svfiprintf_r+0x174>
 8006aba:	89ab      	ldrh	r3, [r5, #12]
 8006abc:	065b      	lsls	r3, r3, #25
 8006abe:	f53f af2d 	bmi.w	800691c <_svfiprintf_r+0x28>
 8006ac2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ac4:	b01d      	add	sp, #116	; 0x74
 8006ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aca:	ab03      	add	r3, sp, #12
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	462a      	mov	r2, r5
 8006ad0:	4b05      	ldr	r3, [pc, #20]	; (8006ae8 <_svfiprintf_r+0x1f4>)
 8006ad2:	a904      	add	r1, sp, #16
 8006ad4:	4638      	mov	r0, r7
 8006ad6:	f000 f879 	bl	8006bcc <_printf_i>
 8006ada:	e7eb      	b.n	8006ab4 <_svfiprintf_r+0x1c0>
 8006adc:	08006f50 	.word	0x08006f50
 8006ae0:	08006f5a 	.word	0x08006f5a
 8006ae4:	00000000 	.word	0x00000000
 8006ae8:	08006841 	.word	0x08006841
 8006aec:	08006f56 	.word	0x08006f56

08006af0 <_printf_common>:
 8006af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006af4:	4616      	mov	r6, r2
 8006af6:	4699      	mov	r9, r3
 8006af8:	688a      	ldr	r2, [r1, #8]
 8006afa:	690b      	ldr	r3, [r1, #16]
 8006afc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b00:	4293      	cmp	r3, r2
 8006b02:	bfb8      	it	lt
 8006b04:	4613      	movlt	r3, r2
 8006b06:	6033      	str	r3, [r6, #0]
 8006b08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b0c:	4607      	mov	r7, r0
 8006b0e:	460c      	mov	r4, r1
 8006b10:	b10a      	cbz	r2, 8006b16 <_printf_common+0x26>
 8006b12:	3301      	adds	r3, #1
 8006b14:	6033      	str	r3, [r6, #0]
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	0699      	lsls	r1, r3, #26
 8006b1a:	bf42      	ittt	mi
 8006b1c:	6833      	ldrmi	r3, [r6, #0]
 8006b1e:	3302      	addmi	r3, #2
 8006b20:	6033      	strmi	r3, [r6, #0]
 8006b22:	6825      	ldr	r5, [r4, #0]
 8006b24:	f015 0506 	ands.w	r5, r5, #6
 8006b28:	d106      	bne.n	8006b38 <_printf_common+0x48>
 8006b2a:	f104 0a19 	add.w	sl, r4, #25
 8006b2e:	68e3      	ldr	r3, [r4, #12]
 8006b30:	6832      	ldr	r2, [r6, #0]
 8006b32:	1a9b      	subs	r3, r3, r2
 8006b34:	42ab      	cmp	r3, r5
 8006b36:	dc26      	bgt.n	8006b86 <_printf_common+0x96>
 8006b38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b3c:	1e13      	subs	r3, r2, #0
 8006b3e:	6822      	ldr	r2, [r4, #0]
 8006b40:	bf18      	it	ne
 8006b42:	2301      	movne	r3, #1
 8006b44:	0692      	lsls	r2, r2, #26
 8006b46:	d42b      	bmi.n	8006ba0 <_printf_common+0xb0>
 8006b48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b4c:	4649      	mov	r1, r9
 8006b4e:	4638      	mov	r0, r7
 8006b50:	47c0      	blx	r8
 8006b52:	3001      	adds	r0, #1
 8006b54:	d01e      	beq.n	8006b94 <_printf_common+0xa4>
 8006b56:	6823      	ldr	r3, [r4, #0]
 8006b58:	6922      	ldr	r2, [r4, #16]
 8006b5a:	f003 0306 	and.w	r3, r3, #6
 8006b5e:	2b04      	cmp	r3, #4
 8006b60:	bf02      	ittt	eq
 8006b62:	68e5      	ldreq	r5, [r4, #12]
 8006b64:	6833      	ldreq	r3, [r6, #0]
 8006b66:	1aed      	subeq	r5, r5, r3
 8006b68:	68a3      	ldr	r3, [r4, #8]
 8006b6a:	bf0c      	ite	eq
 8006b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b70:	2500      	movne	r5, #0
 8006b72:	4293      	cmp	r3, r2
 8006b74:	bfc4      	itt	gt
 8006b76:	1a9b      	subgt	r3, r3, r2
 8006b78:	18ed      	addgt	r5, r5, r3
 8006b7a:	2600      	movs	r6, #0
 8006b7c:	341a      	adds	r4, #26
 8006b7e:	42b5      	cmp	r5, r6
 8006b80:	d11a      	bne.n	8006bb8 <_printf_common+0xc8>
 8006b82:	2000      	movs	r0, #0
 8006b84:	e008      	b.n	8006b98 <_printf_common+0xa8>
 8006b86:	2301      	movs	r3, #1
 8006b88:	4652      	mov	r2, sl
 8006b8a:	4649      	mov	r1, r9
 8006b8c:	4638      	mov	r0, r7
 8006b8e:	47c0      	blx	r8
 8006b90:	3001      	adds	r0, #1
 8006b92:	d103      	bne.n	8006b9c <_printf_common+0xac>
 8006b94:	f04f 30ff 	mov.w	r0, #4294967295
 8006b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b9c:	3501      	adds	r5, #1
 8006b9e:	e7c6      	b.n	8006b2e <_printf_common+0x3e>
 8006ba0:	18e1      	adds	r1, r4, r3
 8006ba2:	1c5a      	adds	r2, r3, #1
 8006ba4:	2030      	movs	r0, #48	; 0x30
 8006ba6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006baa:	4422      	add	r2, r4
 8006bac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bb4:	3302      	adds	r3, #2
 8006bb6:	e7c7      	b.n	8006b48 <_printf_common+0x58>
 8006bb8:	2301      	movs	r3, #1
 8006bba:	4622      	mov	r2, r4
 8006bbc:	4649      	mov	r1, r9
 8006bbe:	4638      	mov	r0, r7
 8006bc0:	47c0      	blx	r8
 8006bc2:	3001      	adds	r0, #1
 8006bc4:	d0e6      	beq.n	8006b94 <_printf_common+0xa4>
 8006bc6:	3601      	adds	r6, #1
 8006bc8:	e7d9      	b.n	8006b7e <_printf_common+0x8e>
	...

08006bcc <_printf_i>:
 8006bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bd0:	7e0f      	ldrb	r7, [r1, #24]
 8006bd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006bd4:	2f78      	cmp	r7, #120	; 0x78
 8006bd6:	4691      	mov	r9, r2
 8006bd8:	4680      	mov	r8, r0
 8006bda:	460c      	mov	r4, r1
 8006bdc:	469a      	mov	sl, r3
 8006bde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006be2:	d807      	bhi.n	8006bf4 <_printf_i+0x28>
 8006be4:	2f62      	cmp	r7, #98	; 0x62
 8006be6:	d80a      	bhi.n	8006bfe <_printf_i+0x32>
 8006be8:	2f00      	cmp	r7, #0
 8006bea:	f000 80d4 	beq.w	8006d96 <_printf_i+0x1ca>
 8006bee:	2f58      	cmp	r7, #88	; 0x58
 8006bf0:	f000 80c0 	beq.w	8006d74 <_printf_i+0x1a8>
 8006bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bfc:	e03a      	b.n	8006c74 <_printf_i+0xa8>
 8006bfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c02:	2b15      	cmp	r3, #21
 8006c04:	d8f6      	bhi.n	8006bf4 <_printf_i+0x28>
 8006c06:	a101      	add	r1, pc, #4	; (adr r1, 8006c0c <_printf_i+0x40>)
 8006c08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c0c:	08006c65 	.word	0x08006c65
 8006c10:	08006c79 	.word	0x08006c79
 8006c14:	08006bf5 	.word	0x08006bf5
 8006c18:	08006bf5 	.word	0x08006bf5
 8006c1c:	08006bf5 	.word	0x08006bf5
 8006c20:	08006bf5 	.word	0x08006bf5
 8006c24:	08006c79 	.word	0x08006c79
 8006c28:	08006bf5 	.word	0x08006bf5
 8006c2c:	08006bf5 	.word	0x08006bf5
 8006c30:	08006bf5 	.word	0x08006bf5
 8006c34:	08006bf5 	.word	0x08006bf5
 8006c38:	08006d7d 	.word	0x08006d7d
 8006c3c:	08006ca5 	.word	0x08006ca5
 8006c40:	08006d37 	.word	0x08006d37
 8006c44:	08006bf5 	.word	0x08006bf5
 8006c48:	08006bf5 	.word	0x08006bf5
 8006c4c:	08006d9f 	.word	0x08006d9f
 8006c50:	08006bf5 	.word	0x08006bf5
 8006c54:	08006ca5 	.word	0x08006ca5
 8006c58:	08006bf5 	.word	0x08006bf5
 8006c5c:	08006bf5 	.word	0x08006bf5
 8006c60:	08006d3f 	.word	0x08006d3f
 8006c64:	682b      	ldr	r3, [r5, #0]
 8006c66:	1d1a      	adds	r2, r3, #4
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	602a      	str	r2, [r5, #0]
 8006c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c74:	2301      	movs	r3, #1
 8006c76:	e09f      	b.n	8006db8 <_printf_i+0x1ec>
 8006c78:	6820      	ldr	r0, [r4, #0]
 8006c7a:	682b      	ldr	r3, [r5, #0]
 8006c7c:	0607      	lsls	r7, r0, #24
 8006c7e:	f103 0104 	add.w	r1, r3, #4
 8006c82:	6029      	str	r1, [r5, #0]
 8006c84:	d501      	bpl.n	8006c8a <_printf_i+0xbe>
 8006c86:	681e      	ldr	r6, [r3, #0]
 8006c88:	e003      	b.n	8006c92 <_printf_i+0xc6>
 8006c8a:	0646      	lsls	r6, r0, #25
 8006c8c:	d5fb      	bpl.n	8006c86 <_printf_i+0xba>
 8006c8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006c92:	2e00      	cmp	r6, #0
 8006c94:	da03      	bge.n	8006c9e <_printf_i+0xd2>
 8006c96:	232d      	movs	r3, #45	; 0x2d
 8006c98:	4276      	negs	r6, r6
 8006c9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c9e:	485a      	ldr	r0, [pc, #360]	; (8006e08 <_printf_i+0x23c>)
 8006ca0:	230a      	movs	r3, #10
 8006ca2:	e012      	b.n	8006cca <_printf_i+0xfe>
 8006ca4:	682b      	ldr	r3, [r5, #0]
 8006ca6:	6820      	ldr	r0, [r4, #0]
 8006ca8:	1d19      	adds	r1, r3, #4
 8006caa:	6029      	str	r1, [r5, #0]
 8006cac:	0605      	lsls	r5, r0, #24
 8006cae:	d501      	bpl.n	8006cb4 <_printf_i+0xe8>
 8006cb0:	681e      	ldr	r6, [r3, #0]
 8006cb2:	e002      	b.n	8006cba <_printf_i+0xee>
 8006cb4:	0641      	lsls	r1, r0, #25
 8006cb6:	d5fb      	bpl.n	8006cb0 <_printf_i+0xe4>
 8006cb8:	881e      	ldrh	r6, [r3, #0]
 8006cba:	4853      	ldr	r0, [pc, #332]	; (8006e08 <_printf_i+0x23c>)
 8006cbc:	2f6f      	cmp	r7, #111	; 0x6f
 8006cbe:	bf0c      	ite	eq
 8006cc0:	2308      	moveq	r3, #8
 8006cc2:	230a      	movne	r3, #10
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cca:	6865      	ldr	r5, [r4, #4]
 8006ccc:	60a5      	str	r5, [r4, #8]
 8006cce:	2d00      	cmp	r5, #0
 8006cd0:	bfa2      	ittt	ge
 8006cd2:	6821      	ldrge	r1, [r4, #0]
 8006cd4:	f021 0104 	bicge.w	r1, r1, #4
 8006cd8:	6021      	strge	r1, [r4, #0]
 8006cda:	b90e      	cbnz	r6, 8006ce0 <_printf_i+0x114>
 8006cdc:	2d00      	cmp	r5, #0
 8006cde:	d04b      	beq.n	8006d78 <_printf_i+0x1ac>
 8006ce0:	4615      	mov	r5, r2
 8006ce2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ce6:	fb03 6711 	mls	r7, r3, r1, r6
 8006cea:	5dc7      	ldrb	r7, [r0, r7]
 8006cec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006cf0:	4637      	mov	r7, r6
 8006cf2:	42bb      	cmp	r3, r7
 8006cf4:	460e      	mov	r6, r1
 8006cf6:	d9f4      	bls.n	8006ce2 <_printf_i+0x116>
 8006cf8:	2b08      	cmp	r3, #8
 8006cfa:	d10b      	bne.n	8006d14 <_printf_i+0x148>
 8006cfc:	6823      	ldr	r3, [r4, #0]
 8006cfe:	07de      	lsls	r6, r3, #31
 8006d00:	d508      	bpl.n	8006d14 <_printf_i+0x148>
 8006d02:	6923      	ldr	r3, [r4, #16]
 8006d04:	6861      	ldr	r1, [r4, #4]
 8006d06:	4299      	cmp	r1, r3
 8006d08:	bfde      	ittt	le
 8006d0a:	2330      	movle	r3, #48	; 0x30
 8006d0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d14:	1b52      	subs	r2, r2, r5
 8006d16:	6122      	str	r2, [r4, #16]
 8006d18:	f8cd a000 	str.w	sl, [sp]
 8006d1c:	464b      	mov	r3, r9
 8006d1e:	aa03      	add	r2, sp, #12
 8006d20:	4621      	mov	r1, r4
 8006d22:	4640      	mov	r0, r8
 8006d24:	f7ff fee4 	bl	8006af0 <_printf_common>
 8006d28:	3001      	adds	r0, #1
 8006d2a:	d14a      	bne.n	8006dc2 <_printf_i+0x1f6>
 8006d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d30:	b004      	add	sp, #16
 8006d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	f043 0320 	orr.w	r3, r3, #32
 8006d3c:	6023      	str	r3, [r4, #0]
 8006d3e:	4833      	ldr	r0, [pc, #204]	; (8006e0c <_printf_i+0x240>)
 8006d40:	2778      	movs	r7, #120	; 0x78
 8006d42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	6829      	ldr	r1, [r5, #0]
 8006d4a:	061f      	lsls	r7, r3, #24
 8006d4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d50:	d402      	bmi.n	8006d58 <_printf_i+0x18c>
 8006d52:	065f      	lsls	r7, r3, #25
 8006d54:	bf48      	it	mi
 8006d56:	b2b6      	uxthmi	r6, r6
 8006d58:	07df      	lsls	r7, r3, #31
 8006d5a:	bf48      	it	mi
 8006d5c:	f043 0320 	orrmi.w	r3, r3, #32
 8006d60:	6029      	str	r1, [r5, #0]
 8006d62:	bf48      	it	mi
 8006d64:	6023      	strmi	r3, [r4, #0]
 8006d66:	b91e      	cbnz	r6, 8006d70 <_printf_i+0x1a4>
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	f023 0320 	bic.w	r3, r3, #32
 8006d6e:	6023      	str	r3, [r4, #0]
 8006d70:	2310      	movs	r3, #16
 8006d72:	e7a7      	b.n	8006cc4 <_printf_i+0xf8>
 8006d74:	4824      	ldr	r0, [pc, #144]	; (8006e08 <_printf_i+0x23c>)
 8006d76:	e7e4      	b.n	8006d42 <_printf_i+0x176>
 8006d78:	4615      	mov	r5, r2
 8006d7a:	e7bd      	b.n	8006cf8 <_printf_i+0x12c>
 8006d7c:	682b      	ldr	r3, [r5, #0]
 8006d7e:	6826      	ldr	r6, [r4, #0]
 8006d80:	6961      	ldr	r1, [r4, #20]
 8006d82:	1d18      	adds	r0, r3, #4
 8006d84:	6028      	str	r0, [r5, #0]
 8006d86:	0635      	lsls	r5, r6, #24
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	d501      	bpl.n	8006d90 <_printf_i+0x1c4>
 8006d8c:	6019      	str	r1, [r3, #0]
 8006d8e:	e002      	b.n	8006d96 <_printf_i+0x1ca>
 8006d90:	0670      	lsls	r0, r6, #25
 8006d92:	d5fb      	bpl.n	8006d8c <_printf_i+0x1c0>
 8006d94:	8019      	strh	r1, [r3, #0]
 8006d96:	2300      	movs	r3, #0
 8006d98:	6123      	str	r3, [r4, #16]
 8006d9a:	4615      	mov	r5, r2
 8006d9c:	e7bc      	b.n	8006d18 <_printf_i+0x14c>
 8006d9e:	682b      	ldr	r3, [r5, #0]
 8006da0:	1d1a      	adds	r2, r3, #4
 8006da2:	602a      	str	r2, [r5, #0]
 8006da4:	681d      	ldr	r5, [r3, #0]
 8006da6:	6862      	ldr	r2, [r4, #4]
 8006da8:	2100      	movs	r1, #0
 8006daa:	4628      	mov	r0, r5
 8006dac:	f7f9 fa28 	bl	8000200 <memchr>
 8006db0:	b108      	cbz	r0, 8006db6 <_printf_i+0x1ea>
 8006db2:	1b40      	subs	r0, r0, r5
 8006db4:	6060      	str	r0, [r4, #4]
 8006db6:	6863      	ldr	r3, [r4, #4]
 8006db8:	6123      	str	r3, [r4, #16]
 8006dba:	2300      	movs	r3, #0
 8006dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dc0:	e7aa      	b.n	8006d18 <_printf_i+0x14c>
 8006dc2:	6923      	ldr	r3, [r4, #16]
 8006dc4:	462a      	mov	r2, r5
 8006dc6:	4649      	mov	r1, r9
 8006dc8:	4640      	mov	r0, r8
 8006dca:	47d0      	blx	sl
 8006dcc:	3001      	adds	r0, #1
 8006dce:	d0ad      	beq.n	8006d2c <_printf_i+0x160>
 8006dd0:	6823      	ldr	r3, [r4, #0]
 8006dd2:	079b      	lsls	r3, r3, #30
 8006dd4:	d413      	bmi.n	8006dfe <_printf_i+0x232>
 8006dd6:	68e0      	ldr	r0, [r4, #12]
 8006dd8:	9b03      	ldr	r3, [sp, #12]
 8006dda:	4298      	cmp	r0, r3
 8006ddc:	bfb8      	it	lt
 8006dde:	4618      	movlt	r0, r3
 8006de0:	e7a6      	b.n	8006d30 <_printf_i+0x164>
 8006de2:	2301      	movs	r3, #1
 8006de4:	4632      	mov	r2, r6
 8006de6:	4649      	mov	r1, r9
 8006de8:	4640      	mov	r0, r8
 8006dea:	47d0      	blx	sl
 8006dec:	3001      	adds	r0, #1
 8006dee:	d09d      	beq.n	8006d2c <_printf_i+0x160>
 8006df0:	3501      	adds	r5, #1
 8006df2:	68e3      	ldr	r3, [r4, #12]
 8006df4:	9903      	ldr	r1, [sp, #12]
 8006df6:	1a5b      	subs	r3, r3, r1
 8006df8:	42ab      	cmp	r3, r5
 8006dfa:	dcf2      	bgt.n	8006de2 <_printf_i+0x216>
 8006dfc:	e7eb      	b.n	8006dd6 <_printf_i+0x20a>
 8006dfe:	2500      	movs	r5, #0
 8006e00:	f104 0619 	add.w	r6, r4, #25
 8006e04:	e7f5      	b.n	8006df2 <_printf_i+0x226>
 8006e06:	bf00      	nop
 8006e08:	08006f61 	.word	0x08006f61
 8006e0c:	08006f72 	.word	0x08006f72

08006e10 <memmove>:
 8006e10:	4288      	cmp	r0, r1
 8006e12:	b510      	push	{r4, lr}
 8006e14:	eb01 0402 	add.w	r4, r1, r2
 8006e18:	d902      	bls.n	8006e20 <memmove+0x10>
 8006e1a:	4284      	cmp	r4, r0
 8006e1c:	4623      	mov	r3, r4
 8006e1e:	d807      	bhi.n	8006e30 <memmove+0x20>
 8006e20:	1e43      	subs	r3, r0, #1
 8006e22:	42a1      	cmp	r1, r4
 8006e24:	d008      	beq.n	8006e38 <memmove+0x28>
 8006e26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e2e:	e7f8      	b.n	8006e22 <memmove+0x12>
 8006e30:	4402      	add	r2, r0
 8006e32:	4601      	mov	r1, r0
 8006e34:	428a      	cmp	r2, r1
 8006e36:	d100      	bne.n	8006e3a <memmove+0x2a>
 8006e38:	bd10      	pop	{r4, pc}
 8006e3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e42:	e7f7      	b.n	8006e34 <memmove+0x24>

08006e44 <_sbrk_r>:
 8006e44:	b538      	push	{r3, r4, r5, lr}
 8006e46:	4d06      	ldr	r5, [pc, #24]	; (8006e60 <_sbrk_r+0x1c>)
 8006e48:	2300      	movs	r3, #0
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	4608      	mov	r0, r1
 8006e4e:	602b      	str	r3, [r5, #0]
 8006e50:	f7fa fdfe 	bl	8001a50 <_sbrk>
 8006e54:	1c43      	adds	r3, r0, #1
 8006e56:	d102      	bne.n	8006e5e <_sbrk_r+0x1a>
 8006e58:	682b      	ldr	r3, [r5, #0]
 8006e5a:	b103      	cbz	r3, 8006e5e <_sbrk_r+0x1a>
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	bd38      	pop	{r3, r4, r5, pc}
 8006e60:	20000abc 	.word	0x20000abc

08006e64 <memcpy>:
 8006e64:	440a      	add	r2, r1
 8006e66:	4291      	cmp	r1, r2
 8006e68:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e6c:	d100      	bne.n	8006e70 <memcpy+0xc>
 8006e6e:	4770      	bx	lr
 8006e70:	b510      	push	{r4, lr}
 8006e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e7a:	4291      	cmp	r1, r2
 8006e7c:	d1f9      	bne.n	8006e72 <memcpy+0xe>
 8006e7e:	bd10      	pop	{r4, pc}

08006e80 <_realloc_r>:
 8006e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e84:	4680      	mov	r8, r0
 8006e86:	4614      	mov	r4, r2
 8006e88:	460e      	mov	r6, r1
 8006e8a:	b921      	cbnz	r1, 8006e96 <_realloc_r+0x16>
 8006e8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e90:	4611      	mov	r1, r2
 8006e92:	f7ff bc49 	b.w	8006728 <_malloc_r>
 8006e96:	b92a      	cbnz	r2, 8006ea4 <_realloc_r+0x24>
 8006e98:	f7ff fbda 	bl	8006650 <_free_r>
 8006e9c:	4625      	mov	r5, r4
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ea4:	f000 f81b 	bl	8006ede <_malloc_usable_size_r>
 8006ea8:	4284      	cmp	r4, r0
 8006eaa:	4607      	mov	r7, r0
 8006eac:	d802      	bhi.n	8006eb4 <_realloc_r+0x34>
 8006eae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006eb2:	d812      	bhi.n	8006eda <_realloc_r+0x5a>
 8006eb4:	4621      	mov	r1, r4
 8006eb6:	4640      	mov	r0, r8
 8006eb8:	f7ff fc36 	bl	8006728 <_malloc_r>
 8006ebc:	4605      	mov	r5, r0
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	d0ed      	beq.n	8006e9e <_realloc_r+0x1e>
 8006ec2:	42bc      	cmp	r4, r7
 8006ec4:	4622      	mov	r2, r4
 8006ec6:	4631      	mov	r1, r6
 8006ec8:	bf28      	it	cs
 8006eca:	463a      	movcs	r2, r7
 8006ecc:	f7ff ffca 	bl	8006e64 <memcpy>
 8006ed0:	4631      	mov	r1, r6
 8006ed2:	4640      	mov	r0, r8
 8006ed4:	f7ff fbbc 	bl	8006650 <_free_r>
 8006ed8:	e7e1      	b.n	8006e9e <_realloc_r+0x1e>
 8006eda:	4635      	mov	r5, r6
 8006edc:	e7df      	b.n	8006e9e <_realloc_r+0x1e>

08006ede <_malloc_usable_size_r>:
 8006ede:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ee2:	1f18      	subs	r0, r3, #4
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	bfbc      	itt	lt
 8006ee8:	580b      	ldrlt	r3, [r1, r0]
 8006eea:	18c0      	addlt	r0, r0, r3
 8006eec:	4770      	bx	lr
	...

08006ef0 <_init>:
 8006ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef2:	bf00      	nop
 8006ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ef6:	bc08      	pop	{r3}
 8006ef8:	469e      	mov	lr, r3
 8006efa:	4770      	bx	lr

08006efc <_fini>:
 8006efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efe:	bf00      	nop
 8006f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f02:	bc08      	pop	{r3}
 8006f04:	469e      	mov	lr, r3
 8006f06:	4770      	bx	lr
