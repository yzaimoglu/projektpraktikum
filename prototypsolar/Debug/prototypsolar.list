
prototypsolar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b04  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08006cb4  08006cb4  00016cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d38  08006d38  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006d38  08006d38  00016d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d40  08006d40  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d40  08006d40  00016d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d44  08006d44  00016d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00000a6c  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000acc  20000acc  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   000191b8  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002f87  00000000  00000000  0003928b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001580  00000000  00000000  0003c218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010f1  00000000  00000000  0003d798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027a3c  00000000  00000000  0003e889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a5c9  00000000  00000000  000662c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f1e76  00000000  00000000  0008088e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000062dc  00000000  00000000  00172704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  001789e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006c9c 	.word	0x08006c9c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08006c9c 	.word	0x08006c9c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <_LCD_SendInternal>:
#define LCD_I2C_TIMEOUT 200

#define COLUMNS 16
#define ROWS 2

HAL_StatusTypeDef _LCD_SendInternal(LCD_HandleTypeDef *dev, uint8_t data, uint8_t flags) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af02      	add	r7, sp, #8
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	460b      	mov	r3, r1
 8000596:	70fb      	strb	r3, [r7, #3]
 8000598:	4613      	mov	r3, r2
 800059a:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef res;
    for(int i=0;i<5;i++) {
 800059c:	2300      	movs	r3, #0
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	e010      	b.n	80005c4 <_LCD_SendInternal+0x38>
        res = HAL_I2C_IsDeviceReady(dev->i2c, dev->i2c_addr, 1, LCD_I2C_TIMEOUT);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	6858      	ldr	r0, [r3, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	b299      	uxth	r1, r3
 80005ac:	23c8      	movs	r3, #200	; 0xc8
 80005ae:	2201      	movs	r2, #1
 80005b0:	f002 ff96 	bl	80034e0 <HAL_I2C_IsDeviceReady>
 80005b4:	4603      	mov	r3, r0
 80005b6:	75fb      	strb	r3, [r7, #23]
        if(res == HAL_OK)
 80005b8:	7dfb      	ldrb	r3, [r7, #23]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d006      	beq.n	80005cc <_LCD_SendInternal+0x40>
    for(int i=0;i<5;i++) {
 80005be:	693b      	ldr	r3, [r7, #16]
 80005c0:	3301      	adds	r3, #1
 80005c2:	613b      	str	r3, [r7, #16]
 80005c4:	693b      	ldr	r3, [r7, #16]
 80005c6:	2b04      	cmp	r3, #4
 80005c8:	ddeb      	ble.n	80005a2 <_LCD_SendInternal+0x16>
 80005ca:	e000      	b.n	80005ce <_LCD_SendInternal+0x42>
            break;
 80005cc:	bf00      	nop
    }
    if(res!=HAL_OK) {
 80005ce:	7dfb      	ldrb	r3, [r7, #23]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <_LCD_SendInternal+0x4c>
    	return res;
 80005d4:	7dfb      	ldrb	r3, [r7, #23]
 80005d6:	e04b      	b.n	8000670 <_LCD_SendInternal+0xe4>
    }


    uint8_t up = data & 0xF0;
 80005d8:	78fb      	ldrb	r3, [r7, #3]
 80005da:	f023 030f 	bic.w	r3, r3, #15
 80005de:	73fb      	strb	r3, [r7, #15]
    uint8_t lo = (data << 4) & 0xF0;
 80005e0:	78fb      	ldrb	r3, [r7, #3]
 80005e2:	011b      	lsls	r3, r3, #4
 80005e4:	73bb      	strb	r3, [r7, #14]
    uint8_t backlight = dev->backlight_enable?BACKLIGHT:0;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	7a1b      	ldrb	r3, [r3, #8]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <_LCD_SendInternal+0x66>
 80005ee:	2308      	movs	r3, #8
 80005f0:	e000      	b.n	80005f4 <_LCD_SendInternal+0x68>
 80005f2:	2300      	movs	r3, #0
 80005f4:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|backlight|PIN_EN;
 80005f6:	7bfa      	ldrb	r2, [r7, #15]
 80005f8:	78bb      	ldrb	r3, [r7, #2]
 80005fa:	4313      	orrs	r3, r2
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	7b7b      	ldrb	r3, [r7, #13]
 8000600:	4313      	orrs	r3, r2
 8000602:	b2db      	uxtb	r3, r3
 8000604:	f043 0304 	orr.w	r3, r3, #4
 8000608:	b2db      	uxtb	r3, r3
 800060a:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|backlight;
 800060c:	7bfa      	ldrb	r2, [r7, #15]
 800060e:	78bb      	ldrb	r3, [r7, #2]
 8000610:	4313      	orrs	r3, r2
 8000612:	b2da      	uxtb	r2, r3
 8000614:	7b7b      	ldrb	r3, [r7, #13]
 8000616:	4313      	orrs	r3, r2
 8000618:	b2db      	uxtb	r3, r3
 800061a:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|backlight|PIN_EN;
 800061c:	7bba      	ldrb	r2, [r7, #14]
 800061e:	78bb      	ldrb	r3, [r7, #2]
 8000620:	4313      	orrs	r3, r2
 8000622:	b2da      	uxtb	r2, r3
 8000624:	7b7b      	ldrb	r3, [r7, #13]
 8000626:	4313      	orrs	r3, r2
 8000628:	b2db      	uxtb	r3, r3
 800062a:	f043 0304 	orr.w	r3, r3, #4
 800062e:	b2db      	uxtb	r3, r3
 8000630:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|backlight;
 8000632:	7bba      	ldrb	r2, [r7, #14]
 8000634:	78bb      	ldrb	r3, [r7, #2]
 8000636:	4313      	orrs	r3, r2
 8000638:	b2da      	uxtb	r2, r3
 800063a:	7b7b      	ldrb	r3, [r7, #13]
 800063c:	4313      	orrs	r3, r2
 800063e:	b2db      	uxtb	r3, r3
 8000640:	72fb      	strb	r3, [r7, #11]

    //TODO send data_arr to the device
    res = HAL_I2C_Master_Transmit(dev->i2c, dev->i2c_addr, data_arr, sizeof(data_arr), LCD_I2C_TIMEOUT);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6858      	ldr	r0, [r3, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	b299      	uxth	r1, r3
 800064c:	f107 0208 	add.w	r2, r7, #8
 8000650:	23c8      	movs	r3, #200	; 0xc8
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	2304      	movs	r3, #4
 8000656:	f002 fe45 	bl	80032e4 <HAL_I2C_Master_Transmit>
 800065a:	4603      	mov	r3, r0
 800065c:	75fb      	strb	r3, [r7, #23]
    if(res != HAL_OK) {
 800065e:	7dfb      	ldrb	r3, [r7, #23]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <_LCD_SendInternal+0xdc>
        return res;
 8000664:	7dfb      	ldrb	r3, [r7, #23]
 8000666:	e003      	b.n	8000670 <_LCD_SendInternal+0xe4>
    }


    HAL_Delay(LCD_DELAY_MS); //delay afterwards to not overwhelm display
 8000668:	2005      	movs	r0, #5
 800066a:	f001 faab 	bl	8001bc4 <HAL_Delay>
    return res;
 800066e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3718      	adds	r7, #24
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <_LCD_SendCommand>:

HAL_StatusTypeDef _LCD_SendCommand(LCD_HandleTypeDef *dev, uint8_t cmd) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
    return _LCD_SendInternal(dev, cmd, 0);
 8000684:	78fb      	ldrb	r3, [r7, #3]
 8000686:	2200      	movs	r2, #0
 8000688:	4619      	mov	r1, r3
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f7ff ff7e 	bl	800058c <_LCD_SendInternal>
 8000690:	4603      	mov	r3, r0
}
 8000692:	4618      	mov	r0, r3
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <_LCD_SendData>:

HAL_StatusTypeDef _LCD_SendData(LCD_HandleTypeDef *dev, uint8_t data) {
 800069a:	b580      	push	{r7, lr}
 800069c:	b082      	sub	sp, #8
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
 80006a2:	460b      	mov	r3, r1
 80006a4:	70fb      	strb	r3, [r7, #3]
    return _LCD_SendInternal(dev, data, PIN_RS);
 80006a6:	78fb      	ldrb	r3, [r7, #3]
 80006a8:	2201      	movs	r2, #1
 80006aa:	4619      	mov	r1, r3
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f7ff ff6d 	bl	800058c <_LCD_SendInternal>
 80006b2:	4603      	mov	r3, r0
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <LCD_Print>:

#define RETURN_IF_NOT_OK if(status!=HAL_OK)return status;

HAL_StatusTypeDef LCD_Print(LCD_HandleTypeDef *dev, const char *str) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
    while(*str) {
 80006c6:	e00f      	b.n	80006e8 <LCD_Print+0x2c>
    	status = _LCD_SendData(dev, (uint8_t)(*str));
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	4619      	mov	r1, r3
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff ffe3 	bl	800069a <_LCD_SendData>
 80006d4:	4603      	mov	r3, r0
 80006d6:	73fb      	strb	r3, [r7, #15]
        RETURN_IF_NOT_OK;
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <LCD_Print+0x26>
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	e007      	b.n	80006f2 <LCD_Print+0x36>
        str++;
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	3301      	adds	r3, #1
 80006e6:	603b      	str	r3, [r7, #0]
    while(*str) {
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d1eb      	bne.n	80006c8 <LCD_Print+0xc>
    }
    return HAL_OK;
 80006f0:	2300      	movs	r3, #0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <LCD_Begin>:
    RETURN_IF_NOT_OK;
    status = LCD_Print(dev, " !!! ");
    return status;
}

HAL_StatusTypeDef LCD_Begin(LCD_HandleTypeDef *dev) {
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b084      	sub	sp, #16
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
	dev->backlight_enable=true;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2201      	movs	r2, #1
 8000706:	721a      	strb	r2, [r3, #8]
	HAL_StatusTypeDef status;

    // 4-bit mode, 2 lines, 5x7 format
    status = _LCD_SendCommand(dev, 0b00110000);
 8000708:	2130      	movs	r1, #48	; 0x30
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff ffb4 	bl	8000678 <_LCD_SendCommand>
 8000710:	4603      	mov	r3, r0
 8000712:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <LCD_Begin+0x24>
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	e01c      	b.n	8000758 <LCD_Begin+0x5e>

    // display & cursor home (keep this!)
    status = _LCD_SendCommand(dev, 0b00000010);
 800071e:	2102      	movs	r1, #2
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff ffa9 	bl	8000678 <_LCD_SendCommand>
 8000726:	4603      	mov	r3, r0
 8000728:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <LCD_Begin+0x3a>
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	e011      	b.n	8000758 <LCD_Begin+0x5e>

    // display on, right shift, underline off, blink off
    status = _LCD_SendCommand(dev, 0b00001100);
 8000734:	210c      	movs	r1, #12
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f7ff ff9e 	bl	8000678 <_LCD_SendCommand>
 800073c:	4603      	mov	r3, r0
 800073e:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <LCD_Begin+0x50>
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	e006      	b.n	8000758 <LCD_Begin+0x5e>

    // clear display (optional here)
    status = _LCD_SendCommand(dev, 0b00000001);
 800074a:	2101      	movs	r1, #1
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f7ff ff93 	bl	8000678 <_LCD_SendCommand>
 8000752:	4603      	mov	r3, r0
 8000754:	73fb      	strb	r3, [r7, #15]
    return status;
 8000756:	7bfb      	ldrb	r3, [r7, #15]
}
 8000758:	4618      	mov	r0, r3
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <LCD_SetCursor>:


HAL_StatusTypeDef LCD_SetCursor(LCD_HandleTypeDef *dev, uint8_t row, uint8_t col) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	70fb      	strb	r3, [r7, #3]
 800076c:	4613      	mov	r3, r2
 800076e:	70bb      	strb	r3, [r7, #2]
	if(row<0 || row>=ROWS || col<0 || col>=COLUMNS) {
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d802      	bhi.n	800077c <LCD_SetCursor+0x1c>
 8000776:	78bb      	ldrb	r3, [r7, #2]
 8000778:	2b0f      	cmp	r3, #15
 800077a:	d901      	bls.n	8000780 <LCD_SetCursor+0x20>
		return HAL_ERROR;
 800077c:	2301      	movs	r3, #1
 800077e:	e010      	b.n	80007a2 <LCD_SetCursor+0x42>
	}
	uint8_t cmd = row==0?0b10000000:0b11000000;
 8000780:	78fb      	ldrb	r3, [r7, #3]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d101      	bne.n	800078a <LCD_SetCursor+0x2a>
 8000786:	2380      	movs	r3, #128	; 0x80
 8000788:	e000      	b.n	800078c <LCD_SetCursor+0x2c>
 800078a:	23c0      	movs	r3, #192	; 0xc0
 800078c:	73fb      	strb	r3, [r7, #15]
	cmd+=col;
 800078e:	7bfa      	ldrb	r2, [r7, #15]
 8000790:	78bb      	ldrb	r3, [r7, #2]
 8000792:	4413      	add	r3, r2
 8000794:	73fb      	strb	r3, [r7, #15]
	return _LCD_SendCommand(dev, cmd);
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	4619      	mov	r1, r3
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f7ff ff6c 	bl	8000678 <_LCD_SendCommand>
 80007a0:	4603      	mov	r3, r0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <LCD_Printf>:

HAL_StatusTypeDef LCD_Printf(LCD_HandleTypeDef *dev, const char *format, ...) {
 80007aa:	b40e      	push	{r1, r2, r3}
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b089      	sub	sp, #36	; 0x24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	char lcd_buffer[COLUMNS + 1];
	va_list args;
	va_start(args, format);
 80007b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007b8:	60bb      	str	r3, [r7, #8]
	vsnprintf(lcd_buffer, COLUMNS + 1, format, args);
 80007ba:	f107 000c 	add.w	r0, r7, #12
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007c2:	2111      	movs	r1, #17
 80007c4:	f005 fdd8 	bl	8006378 <vsniprintf>
	va_end(args);
	return LCD_Print(dev, lcd_buffer);
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	4619      	mov	r1, r3
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff ff74 	bl	80006bc <LCD_Print>
 80007d4:	4603      	mov	r3, r0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3724      	adds	r7, #36	; 0x24
 80007da:	46bd      	mov	sp, r7
 80007dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007e0:	b003      	add	sp, #12
 80007e2:	4770      	bx	lr

080007e4 <LCD_Print_Solar_Voltage>:
HAL_StatusTypeDef LCD_Print_Solar_Voltage(LCD_HandleTypeDef lcd_handle, uint16_t solar_value){
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b08d      	sub	sp, #52	; 0x34
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	1d3c      	adds	r4, r7, #4
 80007ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80007f0:	807b      	strh	r3, [r7, #2]
	char voltageMsg[20];
	float voltage = (float)solar_value * 3.3f / 4095.0f * 1000.0f;
 80007f2:	887b      	ldrh	r3, [r7, #2]
 80007f4:	ee07 3a90 	vmov	s15, r3
 80007f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007fc:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800087c <LCD_Print_Solar_Voltage+0x98>
 8000800:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000804:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000880 <LCD_Print_Solar_Voltage+0x9c>
 8000808:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800080c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000884 <LCD_Print_Solar_Voltage+0xa0>
 8000810:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000814:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	int voltageInt = (int)(voltage);
 8000818:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800081c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000820:	ee17 3a90 	vmov	r3, s15
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
	int voltageFrac = (int)((voltage - voltageInt) * 10);
 8000826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000828:	ee07 3a90 	vmov	s15, r3
 800082c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000830:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000834:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000838:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800083c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000844:	ee17 3a90 	vmov	r3, s15
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
	sprintf(voltageMsg, "Voltage:%d.%01dmV", voltageInt, voltageFrac);
 800084a:	f107 0010 	add.w	r0, r7, #16
 800084e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000852:	490d      	ldr	r1, [pc, #52]	; (8000888 <LCD_Print_Solar_Voltage+0xa4>)
 8000854:	f005 fd44 	bl	80062e0 <siprintf>
	LCD_SetCursor(&lcd_handle, 0, 0);
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2200      	movs	r2, #0
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff7e 	bl	8000760 <LCD_SetCursor>
	return LCD_Printf(&lcd_handle, voltageMsg);
 8000864:	f107 0210 	add.w	r2, r7, #16
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	4611      	mov	r1, r2
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff9c 	bl	80007aa <LCD_Printf>
 8000872:	4603      	mov	r3, r0

}
 8000874:	4618      	mov	r0, r3
 8000876:	3734      	adds	r7, #52	; 0x34
 8000878:	46bd      	mov	sp, r7
 800087a:	bd90      	pop	{r4, r7, pc}
 800087c:	40533333 	.word	0x40533333
 8000880:	457ff000 	.word	0x457ff000
 8000884:	447a0000 	.word	0x447a0000
 8000888:	08006ccc 	.word	0x08006ccc

0800088c <ldr_init>:
#include "ldr.h"
#include <stdio.h>
#include <stdint.h>
#include <string.h>

void ldr_init(ADC_HandleTypeDef type) {
 800088c:	b084      	sub	sp, #16
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0
 8000892:	f107 0c08 	add.w	ip, r7, #8
 8000896:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_ADC_Start(&type);
 800089a:	f107 0008 	add.w	r0, r7, #8
 800089e:	f001 f9f9 	bl	8001c94 <HAL_ADC_Start>
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008aa:	b004      	add	sp, #16
 80008ac:	4770      	bx	lr

080008ae <ldr_stop>:
void ldr_stop(ADC_HandleTypeDef type) {
 80008ae:	b084      	sub	sp, #16
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	f107 0c08 	add.w	ip, r7, #8
 80008b8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_ADC_Stop(&type);
 80008bc:	f107 0008 	add.w	r0, r7, #8
 80008c0:	f001 faba 	bl	8001e38 <HAL_ADC_Stop>
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008cc:	b004      	add	sp, #16
 80008ce:	4770      	bx	lr

080008d0 <ldr_get_value>:

uint32_t ldr_get_value(ADC_HandleTypeDef type, uint32_t delay_ms) {
 80008d0:	b084      	sub	sp, #16
 80008d2:	b5b0      	push	{r4, r5, r7, lr}
 80008d4:	b090      	sub	sp, #64	; 0x40
 80008d6:	af0e      	add	r7, sp, #56	; 0x38
 80008d8:	f107 0418 	add.w	r4, r7, #24
 80008dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t aValue;
	ldr_init(type);
 80008e0:	466d      	mov	r5, sp
 80008e2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80008e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80008fa:	f107 0318 	add.w	r3, r7, #24
 80008fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000900:	f7ff ffc4 	bl	800088c <ldr_init>
	if (HAL_ADC_PollForConversion(&type, 1000) == HAL_OK) {
 8000904:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000908:	f107 0018 	add.w	r0, r7, #24
 800090c:	f001 fac7 	bl	8001e9e <HAL_ADC_PollForConversion>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d11b      	bne.n	800094e <ldr_get_value+0x7e>
		aValue = HAL_ADC_GetValue(&type);
 8000916:	f107 0018 	add.w	r0, r7, #24
 800091a:	f001 fb4b 	bl	8001fb4 <HAL_ADC_GetValue>
 800091e:	6078      	str	r0, [r7, #4]
	} else {
		return ERROR_NUM;
	}
	ldr_stop(type);
 8000920:	466d      	mov	r5, sp
 8000922:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800092a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800092c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800092e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000932:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000936:	e885 0003 	stmia.w	r5, {r0, r1}
 800093a:	f107 0318 	add.w	r3, r7, #24
 800093e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000940:	f7ff ffb5 	bl	80008ae <ldr_stop>
	HAL_Delay(delay_ms);
 8000944:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000946:	f001 f93d 	bl	8001bc4 <HAL_Delay>
	return aValue;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	e001      	b.n	8000952 <ldr_get_value+0x82>
		return ERROR_NUM;
 800094e:	f241 3388 	movw	r3, #5000	; 0x1388
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800095c:	b004      	add	sp, #16
 800095e:	4770      	bx	lr

08000960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000962:	b097      	sub	sp, #92	; 0x5c
 8000964:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000966:	f001 f8bb 	bl	8001ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096a:	f000 f8a3 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800096e:	f000 fb5d 	bl	800102c <MX_GPIO_Init>
  MX_ETH_Init();
 8000972:	f000 f9ff 	bl	8000d74 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000976:	f000 fb01 	bl	8000f7c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800097a:	f000 fb29 	bl	8000fd0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800097e:	f000 fa87 	bl	8000e90 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000982:	f000 f901 	bl	8000b88 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000986:	f000 f951 	bl	8000c2c <MX_ADC2_Init>
  MX_ADC3_Init();
 800098a:	f000 f9a1 	bl	8000cd0 <MX_ADC3_Init>
  MX_I2C2_Init();
 800098e:	f000 fa3f 	bl	8000e10 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  // LCD Initilization
  LCD_HandleTypeDef lcd_handle = {
 8000992:	4a41      	ldr	r2, [pc, #260]	; (8000a98 <main+0x138>)
 8000994:	463b      	mov	r3, r7
 8000996:	ca07      	ldmia	r2, {r0, r1, r2}
 8000998:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		  .i2c_addr = LCD_DEFAULT_ADDR,
  	  	  .i2c = &hi2c2,
  	  	  .backlight_enable = true };
  LCD_Begin(&lcd_handle);
 800099c:	463b      	mov	r3, r7
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff feab 	bl	80006fa <LCD_Begin>
  uint8_t lcd_refresh_iterator = 0; // Used to slow refresh rate of lcd display
 80009a4:	2300      	movs	r3, #0
 80009a6:	75fb      	strb	r3, [r7, #23]

  // servo Initilization
  servo_start_init(&htim2, TIM_CHANNEL_2);
 80009a8:	2104      	movs	r1, #4
 80009aa:	483c      	ldr	r0, [pc, #240]	; (8000a9c <main+0x13c>)
 80009ac:	f000 fc8e 	bl	80012cc <servo_start_init>
  servo_reset();
 80009b0:	f000 fca8 	bl	8001304 <servo_reset>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // read sensor values
	  uint16_t ldr1_value = ldr_get_value(hadc1, 0);
 80009b4:	4e3a      	ldr	r6, [pc, #232]	; (8000aa0 <main+0x140>)
 80009b6:	2300      	movs	r3, #0
 80009b8:	930e      	str	r3, [sp, #56]	; 0x38
 80009ba:	466d      	mov	r5, sp
 80009bc:	f106 0410 	add.w	r4, r6, #16
 80009c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80009d4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80009d8:	f7ff ff7a 	bl	80008d0 <ldr_get_value>
 80009dc:	4603      	mov	r3, r0
 80009de:	82bb      	strh	r3, [r7, #20]
	  uint16_t ldr2_value = ldr_get_value(hadc2, 0);
 80009e0:	4e30      	ldr	r6, [pc, #192]	; (8000aa4 <main+0x144>)
 80009e2:	2300      	movs	r3, #0
 80009e4:	930e      	str	r3, [sp, #56]	; 0x38
 80009e6:	466d      	mov	r5, sp
 80009e8:	f106 0410 	add.w	r4, r6, #16
 80009ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000a00:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a04:	f7ff ff64 	bl	80008d0 <ldr_get_value>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	827b      	strh	r3, [r7, #18]
	  uint16_t solar_value = ldr_get_value(hadc3, 0);
 8000a0c:	4e26      	ldr	r6, [pc, #152]	; (8000aa8 <main+0x148>)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	930e      	str	r3, [sp, #56]	; 0x38
 8000a12:	466d      	mov	r5, sp
 8000a14:	f106 0410 	add.w	r4, r6, #16
 8000a18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a28:	e885 0003 	stmia.w	r5, {r0, r1}
 8000a2c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a30:	f7ff ff4e 	bl	80008d0 <ldr_get_value>
 8000a34:	4603      	mov	r3, r0
 8000a36:	823b      	strh	r3, [r7, #16]

	  // creates function parameter and rotates solar tray accordingly
	  int16_t ldr_diff = ldr1_value - ldr2_value;
 8000a38:	8aba      	ldrh	r2, [r7, #20]
 8000a3a:	8a7b      	ldrh	r3, [r7, #18]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	81fb      	strh	r3, [r7, #14]
	  uint16_t currentpulse = servo_rot(ldr_diff);
 8000a42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 fc66 	bl	8001318 <servo_rot>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	81bb      	strh	r3, [r7, #12]

	  //Displays solarpanel voltage with slowed refresh rate
	  if(lcd_refresh_iterator % 75 == 0) {
 8000a50:	7df9      	ldrb	r1, [r7, #23]
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <main+0x14c>)
 8000a54:	fba3 2301 	umull	r2, r3, r3, r1
 8000a58:	08da      	lsrs	r2, r3, #3
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	4413      	add	r3, r2
 8000a60:	011a      	lsls	r2, r3, #4
 8000a62:	1ad2      	subs	r2, r2, r3
 8000a64:	1a8b      	subs	r3, r1, r2
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d106      	bne.n	8000a7a <main+0x11a>
		  LCD_Print_Solar_Voltage(lcd_handle, solar_value);
 8000a6c:	8a3b      	ldrh	r3, [r7, #16]
 8000a6e:	463a      	mov	r2, r7
 8000a70:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a72:	f7ff feb7 	bl	80007e4 <LCD_Print_Solar_Voltage>
		  lcd_refresh_iterator = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	75fb      	strb	r3, [r7, #23]
	  }
	  //reset servo to horizontal position if User Button is pressed
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET) {
 8000a7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7e:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <main+0x150>)
 8000a80:	f002 faba 	bl	8002ff8 <HAL_GPIO_ReadPin>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d101      	bne.n	8000a8e <main+0x12e>
		  servo_reset();
 8000a8a:	f000 fc3b 	bl	8001304 <servo_reset>
	  // UART Debug
//	  char buf[50];
//	  sprintf(buf, "Pulse: %lu\r\n", currentpulse);
//	  HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), 1000);

	  lcd_refresh_iterator ++;
 8000a8e:	7dfb      	ldrb	r3, [r7, #23]
 8000a90:	3301      	adds	r3, #1
 8000a92:	75fb      	strb	r3, [r7, #23]
  {
 8000a94:	e78e      	b.n	80009b4 <main+0x54>
 8000a96:	bf00      	nop
 8000a98:	08006ce0 	.word	0x08006ce0
 8000a9c:	200003d0 	.word	0x200003d0
 8000aa0:	200001f4 	.word	0x200001f4
 8000aa4:	2000023c 	.word	0x2000023c
 8000aa8:	20000284 	.word	0x20000284
 8000aac:	1b4e81b5 	.word	0x1b4e81b5
 8000ab0:	40020800 	.word	0x40020800

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b094      	sub	sp, #80	; 0x50
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 0320 	add.w	r3, r7, #32
 8000abe:	2230      	movs	r2, #48	; 0x30
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f005 fc66 	bl	8006394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <SystemClock_Config+0xcc>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	4a27      	ldr	r2, [pc, #156]	; (8000b80 <SystemClock_Config+0xcc>)
 8000ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae8:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <SystemClock_Config+0xcc>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <SystemClock_Config+0xd0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a21      	ldr	r2, [pc, #132]	; (8000b84 <SystemClock_Config+0xd0>)
 8000afe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <SystemClock_Config+0xd0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b10:	2301      	movs	r3, #1
 8000b12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b14:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b24:	2304      	movs	r3, #4
 8000b26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b28:	23a8      	movs	r3, #168	; 0xa8
 8000b2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b30:	2307      	movs	r3, #7
 8000b32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	f107 0320 	add.w	r3, r7, #32
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f003 f9a1 	bl	8003e80 <HAL_RCC_OscConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b44:	f000 fb70 	bl	8001228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b48:	230f      	movs	r3, #15
 8000b4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000b54:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	2105      	movs	r1, #5
 8000b66:	4618      	mov	r0, r3
 8000b68:	f003 fc02 	bl	8004370 <HAL_RCC_ClockConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b72:	f000 fb59 	bl	8001228 <Error_Handler>
  }
}
 8000b76:	bf00      	nop
 8000b78:	3750      	adds	r7, #80	; 0x50
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40007000 	.word	0x40007000

08000b88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b8e:	463b      	mov	r3, r7
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b9a:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000b9c:	4a21      	ldr	r2, [pc, #132]	; (8000c24 <MX_ADC1_Init+0x9c>)
 8000b9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ba0:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000ba2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ba6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bba:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bc8:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000bca:	4a17      	ldr	r2, [pc, #92]	; (8000c28 <MX_ADC1_Init+0xa0>)
 8000bcc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000be8:	480d      	ldr	r0, [pc, #52]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000bea:	f001 f80f 	bl	8001c0c <HAL_ADC_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000bf4:	f000 fb18 	bl	8001228 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bf8:	230a      	movs	r3, #10
 8000bfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c04:	463b      	mov	r3, r7
 8000c06:	4619      	mov	r1, r3
 8000c08:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000c0a:	f001 f9e1 	bl	8001fd0 <HAL_ADC_ConfigChannel>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c14:	f000 fb08 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	200001f4 	.word	0x200001f4
 8000c24:	40012000 	.word	0x40012000
 8000c28:	0f000001 	.word	0x0f000001

08000c2c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c32:	463b      	mov	r3, r7
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000c3e:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <MX_ADC2_Init+0x98>)
 8000c40:	4a21      	ldr	r2, [pc, #132]	; (8000cc8 <MX_ADC2_Init+0x9c>)
 8000c42:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c44:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <MX_ADC2_Init+0x98>)
 8000c46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c4a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <MX_ADC2_Init+0x98>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000c52:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <MX_ADC2_Init+0x98>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c58:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <MX_ADC2_Init+0x98>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c5e:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <MX_ADC2_Init+0x98>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c66:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <MX_ADC2_Init+0x98>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c6c:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <MX_ADC2_Init+0x98>)
 8000c6e:	4a17      	ldr	r2, [pc, #92]	; (8000ccc <MX_ADC2_Init+0xa0>)
 8000c70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <MX_ADC2_Init+0x98>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <MX_ADC2_Init+0x98>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <MX_ADC2_Init+0x98>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c86:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <MX_ADC2_Init+0x98>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c8c:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <MX_ADC2_Init+0x98>)
 8000c8e:	f000 ffbd 	bl	8001c0c <HAL_ADC_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000c98:	f000 fac6 	bl	8001228 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000c9c:	230d      	movs	r3, #13
 8000c9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ca8:	463b      	mov	r3, r7
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_ADC2_Init+0x98>)
 8000cae:	f001 f98f 	bl	8001fd0 <HAL_ADC_ConfigChannel>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000cb8:	f000 fab6 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	2000023c 	.word	0x2000023c
 8000cc8:	40012100 	.word	0x40012100
 8000ccc:	0f000001 	.word	0x0f000001

08000cd0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000ce2:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <MX_ADC3_Init+0x98>)
 8000ce4:	4a21      	ldr	r2, [pc, #132]	; (8000d6c <MX_ADC3_Init+0x9c>)
 8000ce6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <MX_ADC3_Init+0x98>)
 8000cea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cee:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <MX_ADC3_Init+0x98>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <MX_ADC3_Init+0x98>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <MX_ADC3_Init+0x98>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d02:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <MX_ADC3_Init+0x98>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d0a:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <MX_ADC3_Init+0x98>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d10:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <MX_ADC3_Init+0x98>)
 8000d12:	4a17      	ldr	r2, [pc, #92]	; (8000d70 <MX_ADC3_Init+0xa0>)
 8000d14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d16:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <MX_ADC3_Init+0x98>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <MX_ADC3_Init+0x98>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <MX_ADC3_Init+0x98>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <MX_ADC3_Init+0x98>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d30:	480d      	ldr	r0, [pc, #52]	; (8000d68 <MX_ADC3_Init+0x98>)
 8000d32:	f000 ff6b 	bl	8001c0c <HAL_ADC_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000d3c:	f000 fa74 	bl	8001228 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d40:	2309      	movs	r3, #9
 8000d42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d44:	2301      	movs	r3, #1
 8000d46:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <MX_ADC3_Init+0x98>)
 8000d52:	f001 f93d 	bl	8001fd0 <HAL_ADC_ConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000d5c:	f000 fa64 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000284 	.word	0x20000284
 8000d6c:	40012200 	.word	0x40012200
 8000d70:	0f000001 	.word	0x0f000001

08000d74 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000d78:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <MX_ETH_Init+0x84>)
 8000d7a:	4a20      	ldr	r2, [pc, #128]	; (8000dfc <MX_ETH_Init+0x88>)
 8000d7c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000d7e:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <MX_ETH_Init+0x8c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000d84:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <MX_ETH_Init+0x8c>)
 8000d86:	2280      	movs	r2, #128	; 0x80
 8000d88:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <MX_ETH_Init+0x8c>)
 8000d8c:	22e1      	movs	r2, #225	; 0xe1
 8000d8e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <MX_ETH_Init+0x8c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <MX_ETH_Init+0x8c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d9c:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <MX_ETH_Init+0x8c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <MX_ETH_Init+0x84>)
 8000da4:	4a16      	ldr	r2, [pc, #88]	; (8000e00 <MX_ETH_Init+0x8c>)
 8000da6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <MX_ETH_Init+0x84>)
 8000daa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000dae:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <MX_ETH_Init+0x84>)
 8000db2:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <MX_ETH_Init+0x90>)
 8000db4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <MX_ETH_Init+0x84>)
 8000db8:	4a13      	ldr	r2, [pc, #76]	; (8000e08 <MX_ETH_Init+0x94>)
 8000dba:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <MX_ETH_Init+0x84>)
 8000dbe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000dc2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000dc4:	480c      	ldr	r0, [pc, #48]	; (8000df8 <MX_ETH_Init+0x84>)
 8000dc6:	f001 fc43 	bl	8002650 <HAL_ETH_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000dd0:	f000 fa2a 	bl	8001228 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000dd4:	2238      	movs	r2, #56	; 0x38
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	480c      	ldr	r0, [pc, #48]	; (8000e0c <MX_ETH_Init+0x98>)
 8000dda:	f005 fadb 	bl	8006394 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <MX_ETH_Init+0x98>)
 8000de0:	2221      	movs	r2, #33	; 0x21
 8000de2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_ETH_Init+0x98>)
 8000de6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000dea:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000dec:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <MX_ETH_Init+0x98>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200002cc 	.word	0x200002cc
 8000dfc:	40028000 	.word	0x40028000
 8000e00:	20000968 	.word	0x20000968
 8000e04:	20000154 	.word	0x20000154
 8000e08:	200000b4 	.word	0x200000b4
 8000e0c:	2000007c 	.word	0x2000007c

08000e10 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <MX_I2C2_Init+0x74>)
 8000e16:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <MX_I2C2_Init+0x78>)
 8000e18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <MX_I2C2_Init+0x74>)
 8000e1c:	4a1b      	ldr	r2, [pc, #108]	; (8000e8c <MX_I2C2_Init+0x7c>)
 8000e1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <MX_I2C2_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000e26:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <MX_I2C2_Init+0x74>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <MX_I2C2_Init+0x74>)
 8000e2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e32:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <MX_I2C2_Init+0x74>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <MX_I2C2_Init+0x74>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <MX_I2C2_Init+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_I2C2_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e4c:	480d      	ldr	r0, [pc, #52]	; (8000e84 <MX_I2C2_Init+0x74>)
 8000e4e:	f002 f905 	bl	800305c <HAL_I2C_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000e58:	f000 f9e6 	bl	8001228 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4809      	ldr	r0, [pc, #36]	; (8000e84 <MX_I2C2_Init+0x74>)
 8000e60:	f002 fe75 	bl	8003b4e <HAL_I2CEx_ConfigAnalogFilter>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000e6a:	f000 f9dd 	bl	8001228 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4804      	ldr	r0, [pc, #16]	; (8000e84 <MX_I2C2_Init+0x74>)
 8000e72:	f002 fea8 	bl	8003bc6 <HAL_I2CEx_ConfigDigitalFilter>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000e7c:	f000 f9d4 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000037c 	.word	0x2000037c
 8000e88:	40005800 	.word	0x40005800
 8000e8c:	000186a0 	.word	0x000186a0

08000e90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08e      	sub	sp, #56	; 0x38
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	f107 0320 	add.w	r3, r7, #32
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
 8000ebc:	615a      	str	r2, [r3, #20]
 8000ebe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ec0:	4b2d      	ldr	r3, [pc, #180]	; (8000f78 <MX_TIM2_Init+0xe8>)
 8000ec2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ec6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 419;
 8000ec8:	4b2b      	ldr	r3, [pc, #172]	; (8000f78 <MX_TIM2_Init+0xe8>)
 8000eca:	f240 12a3 	movw	r2, #419	; 0x1a3
 8000ece:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed0:	4b29      	ldr	r3, [pc, #164]	; (8000f78 <MX_TIM2_Init+0xe8>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000ed6:	4b28      	ldr	r3, [pc, #160]	; (8000f78 <MX_TIM2_Init+0xe8>)
 8000ed8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000edc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ede:	4b26      	ldr	r3, [pc, #152]	; (8000f78 <MX_TIM2_Init+0xe8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee4:	4b24      	ldr	r3, [pc, #144]	; (8000f78 <MX_TIM2_Init+0xe8>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eea:	4823      	ldr	r0, [pc, #140]	; (8000f78 <MX_TIM2_Init+0xe8>)
 8000eec:	f003 fc60 	bl	80047b0 <HAL_TIM_Base_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000ef6:	f000 f997 	bl	8001228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f04:	4619      	mov	r1, r3
 8000f06:	481c      	ldr	r0, [pc, #112]	; (8000f78 <MX_TIM2_Init+0xe8>)
 8000f08:	f003 ff8c 	bl	8004e24 <HAL_TIM_ConfigClockSource>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000f12:	f000 f989 	bl	8001228 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f16:	4818      	ldr	r0, [pc, #96]	; (8000f78 <MX_TIM2_Init+0xe8>)
 8000f18:	f003 fc99 	bl	800484e <HAL_TIM_PWM_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000f22:	f000 f981 	bl	8001228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f2e:	f107 0320 	add.w	r3, r7, #32
 8000f32:	4619      	mov	r1, r3
 8000f34:	4810      	ldr	r0, [pc, #64]	; (8000f78 <MX_TIM2_Init+0xe8>)
 8000f36:	f004 fb7f 	bl	8005638 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f40:	f000 f972 	bl	8001228 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f44:	2360      	movs	r3, #96	; 0x60
 8000f46:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2204      	movs	r2, #4
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4807      	ldr	r0, [pc, #28]	; (8000f78 <MX_TIM2_Init+0xe8>)
 8000f5c:	f003 fea0 	bl	8004ca0 <HAL_TIM_PWM_ConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000f66:	f000 f95f 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f6a:	4803      	ldr	r0, [pc, #12]	; (8000f78 <MX_TIM2_Init+0xe8>)
 8000f6c:	f000 fc38 	bl	80017e0 <HAL_TIM_MspPostInit>

}
 8000f70:	bf00      	nop
 8000f72:	3738      	adds	r7, #56	; 0x38
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200003d0 	.word	0x200003d0

08000f7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f82:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <MX_USART3_UART_Init+0x50>)
 8000f84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000fb4:	f004 fbd0 	bl	8005758 <HAL_UART_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fbe:	f000 f933 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000418 	.word	0x20000418
 8000fcc:	40004800 	.word	0x40004800

08000fd0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fda:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fde:	2204      	movs	r2, #4
 8000fe0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001008:	2201      	movs	r2, #1
 800100a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800100e:	2200      	movs	r2, #0
 8001010:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001014:	f002 fe16 	bl	8003c44 <HAL_PCD_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800101e:	f000 f903 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000045c 	.word	0x2000045c

0800102c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08e      	sub	sp, #56	; 0x38
 8001030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
 8001046:	4b72      	ldr	r3, [pc, #456]	; (8001210 <MX_GPIO_Init+0x1e4>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a71      	ldr	r2, [pc, #452]	; (8001210 <MX_GPIO_Init+0x1e4>)
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b6f      	ldr	r3, [pc, #444]	; (8001210 <MX_GPIO_Init+0x1e4>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	623b      	str	r3, [r7, #32]
 800105c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	4b6b      	ldr	r3, [pc, #428]	; (8001210 <MX_GPIO_Init+0x1e4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a6a      	ldr	r2, [pc, #424]	; (8001210 <MX_GPIO_Init+0x1e4>)
 8001068:	f043 0320 	orr.w	r3, r3, #32
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b68      	ldr	r3, [pc, #416]	; (8001210 <MX_GPIO_Init+0x1e4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0320 	and.w	r3, r3, #32
 8001076:	61fb      	str	r3, [r7, #28]
 8001078:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
 800107e:	4b64      	ldr	r3, [pc, #400]	; (8001210 <MX_GPIO_Init+0x1e4>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a63      	ldr	r2, [pc, #396]	; (8001210 <MX_GPIO_Init+0x1e4>)
 8001084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b61      	ldr	r3, [pc, #388]	; (8001210 <MX_GPIO_Init+0x1e4>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001092:	61bb      	str	r3, [r7, #24]
 8001094:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	4b5d      	ldr	r3, [pc, #372]	; (8001210 <MX_GPIO_Init+0x1e4>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a5c      	ldr	r2, [pc, #368]	; (8001210 <MX_GPIO_Init+0x1e4>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b5a      	ldr	r3, [pc, #360]	; (8001210 <MX_GPIO_Init+0x1e4>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	4b56      	ldr	r3, [pc, #344]	; (8001210 <MX_GPIO_Init+0x1e4>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a55      	ldr	r2, [pc, #340]	; (8001210 <MX_GPIO_Init+0x1e4>)
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b53      	ldr	r3, [pc, #332]	; (8001210 <MX_GPIO_Init+0x1e4>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b4f      	ldr	r3, [pc, #316]	; (8001210 <MX_GPIO_Init+0x1e4>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a4e      	ldr	r2, [pc, #312]	; (8001210 <MX_GPIO_Init+0x1e4>)
 80010d8:	f043 0310 	orr.w	r3, r3, #16
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b4c      	ldr	r3, [pc, #304]	; (8001210 <MX_GPIO_Init+0x1e4>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0310 	and.w	r3, r3, #16
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	4b48      	ldr	r3, [pc, #288]	; (8001210 <MX_GPIO_Init+0x1e4>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a47      	ldr	r2, [pc, #284]	; (8001210 <MX_GPIO_Init+0x1e4>)
 80010f4:	f043 0308 	orr.w	r3, r3, #8
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b45      	ldr	r3, [pc, #276]	; (8001210 <MX_GPIO_Init+0x1e4>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b41      	ldr	r3, [pc, #260]	; (8001210 <MX_GPIO_Init+0x1e4>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a40      	ldr	r2, [pc, #256]	; (8001210 <MX_GPIO_Init+0x1e4>)
 8001110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b3e      	ldr	r3, [pc, #248]	; (8001210 <MX_GPIO_Init+0x1e4>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	f244 0181 	movw	r1, #16513	; 0x4081
 8001128:	483a      	ldr	r0, [pc, #232]	; (8001214 <MX_GPIO_Init+0x1e8>)
 800112a:	f001 ff7d 	bl	8003028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001134:	4838      	ldr	r0, [pc, #224]	; (8001218 <MX_GPIO_Init+0x1ec>)
 8001136:	f001 ff77 	bl	8003028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 800113a:	2201      	movs	r2, #1
 800113c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001140:	4836      	ldr	r0, [pc, #216]	; (800121c <MX_GPIO_Init+0x1f0>)
 8001142:	f001 ff71 	bl	8003028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	2140      	movs	r1, #64	; 0x40
 800114a:	4835      	ldr	r0, [pc, #212]	; (8001220 <MX_GPIO_Init+0x1f4>)
 800114c:	f001 ff6c 	bl	8003028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001156:	4832      	ldr	r0, [pc, #200]	; (8001220 <MX_GPIO_Init+0x1f4>)
 8001158:	f001 ff66 	bl	8003028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800115c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001162:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001170:	4619      	mov	r1, r3
 8001172:	482c      	ldr	r0, [pc, #176]	; (8001224 <MX_GPIO_Init+0x1f8>)
 8001174:	f001 fd94 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001178:	f244 0381 	movw	r3, #16513	; 0x4081
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117e:	2301      	movs	r3, #1
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118e:	4619      	mov	r1, r3
 8001190:	4820      	ldr	r0, [pc, #128]	; (8001214 <MX_GPIO_Init+0x1e8>)
 8001192:	f001 fd85 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ac:	4619      	mov	r1, r3
 80011ae:	481a      	ldr	r0, [pc, #104]	; (8001218 <MX_GPIO_Init+0x1ec>)
 80011b0:	f001 fd76 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ca:	4619      	mov	r1, r3
 80011cc:	4813      	ldr	r0, [pc, #76]	; (800121c <MX_GPIO_Init+0x1f0>)
 80011ce:	f001 fd67 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin PG14 */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|GPIO_PIN_14;
 80011d2:	f244 0340 	movw	r3, #16448	; 0x4040
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	2301      	movs	r3, #1
 80011da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e8:	4619      	mov	r1, r3
 80011ea:	480d      	ldr	r0, [pc, #52]	; (8001220 <MX_GPIO_Init+0x1f4>)
 80011ec:	f001 fd58 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001200:	4619      	mov	r1, r3
 8001202:	4807      	ldr	r0, [pc, #28]	; (8001220 <MX_GPIO_Init+0x1f4>)
 8001204:	f001 fd4c 	bl	8002ca0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001208:	bf00      	nop
 800120a:	3738      	adds	r7, #56	; 0x38
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40023800 	.word	0x40023800
 8001214:	40020400 	.word	0x40020400
 8001218:	40021400 	.word	0x40021400
 800121c:	40021000 	.word	0x40021000
 8001220:	40021800 	.word	0x40021800
 8001224:	40020800 	.word	0x40020800

08001228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800122c:	b672      	cpsid	i
}
 800122e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001230:	e7fe      	b.n	8001230 <Error_Handler+0x8>
	...

08001234 <set_Pulse>:
static uint32_t currentpulse = LOWER_PULSE_LIMIT;



static void set_Pulse(uint32_t pulse)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	if(pulse <= UPPER_PULSE_LIMIT && pulse >= LOWER_PULSE_LIMIT)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2bfa      	cmp	r3, #250	; 0xfa
 8001240:	d828      	bhi.n	8001294 <set_Pulse+0x60>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b31      	cmp	r3, #49	; 0x31
 8001246:	d925      	bls.n	8001294 <set_Pulse+0x60>
	{
		currentpulse = pulse;
 8001248:	4a15      	ldr	r2, [pc, #84]	; (80012a0 <set_Pulse+0x6c>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(timhandle,channel,pulse);
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <set_Pulse+0x70>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d105      	bne.n	8001262 <set_Pulse+0x2e>
 8001256:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <set_Pulse+0x74>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8001260:	e018      	b.n	8001294 <set_Pulse+0x60>
		__HAL_TIM_SET_COMPARE(timhandle,channel,pulse);
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <set_Pulse+0x70>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b04      	cmp	r3, #4
 8001268:	d105      	bne.n	8001276 <set_Pulse+0x42>
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <set_Pulse+0x74>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001274:	e00e      	b.n	8001294 <set_Pulse+0x60>
		__HAL_TIM_SET_COMPARE(timhandle,channel,pulse);
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <set_Pulse+0x70>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b08      	cmp	r3, #8
 800127c:	d105      	bne.n	800128a <set_Pulse+0x56>
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <set_Pulse+0x74>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001288:	e004      	b.n	8001294 <set_Pulse+0x60>
		__HAL_TIM_SET_COMPARE(timhandle,channel,pulse);
 800128a:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <set_Pulse+0x74>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	20000000 	.word	0x20000000
 80012a4:	20000974 	.word	0x20000974
 80012a8:	20000970 	.word	0x20000970

080012ac <set_Servospeed>:


static void set_Servospeed(SERVO_Speed speed)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
	servospeed = speed;
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	4a03      	ldr	r2, [pc, #12]	; (80012c8 <set_Servospeed+0x1c>)
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	20000978 	.word	0x20000978

080012cc <servo_start_init>:


HAL_StatusTypeDef servo_start_init(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
	timhandle = htim;
 80012d6:	4a09      	ldr	r2, [pc, #36]	; (80012fc <servo_start_init+0x30>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6013      	str	r3, [r2, #0]
	channel = Channel;
 80012dc:	4a08      	ldr	r2, [pc, #32]	; (8001300 <servo_start_init+0x34>)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	6013      	str	r3, [r2, #0]
	set_Servospeed(SERVO_SPEED_NORMAL);
 80012e2:	200a      	movs	r0, #10
 80012e4:	f7ff ffe2 	bl	80012ac <set_Servospeed>
	return HAL_TIM_PWM_Start(htim, Channel);
 80012e8:	6839      	ldr	r1, [r7, #0]
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f003 fb08 	bl	8004900 <HAL_TIM_PWM_Start>
 80012f0:	4603      	mov	r3, r0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000970 	.word	0x20000970
 8001300:	20000974 	.word	0x20000974

08001304 <servo_reset>:


void servo_reset()
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	set_Pulse(150);
 8001308:	2096      	movs	r0, #150	; 0x96
 800130a:	f7ff ff93 	bl	8001234 <set_Pulse>
	HAL_Delay(200);
 800130e:	20c8      	movs	r0, #200	; 0xc8
 8001310:	f000 fc58 	bl	8001bc4 <HAL_Delay>
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <servo_rot>:


uint16_t servo_rot(int16_t sensorval)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]
	uint32_t abssens = abs(sensorval);
 8001322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001326:	2b00      	cmp	r3, #0
 8001328:	bfb8      	it	lt
 800132a:	425b      	neglt	r3, r3
 800132c:	b29b      	uxth	r3, r3
 800132e:	60fb      	str	r3, [r7, #12]
	if(abssens <= CHANGE_THRESHOLD) return currentpulse;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2b0a      	cmp	r3, #10
 8001334:	d803      	bhi.n	800133e <servo_rot+0x26>
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <servo_rot+0xb8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	b29b      	uxth	r3, r3
 800133c:	e043      	b.n	80013c6 <servo_rot+0xae>

	int8_t i = (sensorval > 0) ? 1: -1;
 800133e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001342:	2b00      	cmp	r3, #0
 8001344:	dd01      	ble.n	800134a <servo_rot+0x32>
 8001346:	2301      	movs	r3, #1
 8001348:	e001      	b.n	800134e <servo_rot+0x36>
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	72fb      	strb	r3, [r7, #11]

	// Checks if pulse is in allowed range (0.5-2.5ms)
	if(currentpulse + i <= UPPER_PULSE_LIMIT && currentpulse + i >= LOWER_PULSE_LIMIT){
 8001350:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8001354:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <servo_rot+0xb8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4413      	add	r3, r2
 800135a:	2bfa      	cmp	r3, #250	; 0xfa
 800135c:	d82d      	bhi.n	80013ba <servo_rot+0xa2>
 800135e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <servo_rot+0xb8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
 8001368:	2b31      	cmp	r3, #49	; 0x31
 800136a:	d926      	bls.n	80013ba <servo_rot+0xa2>
		__HAL_TIM_SET_COMPARE(timhandle,channel,currentpulse);
 800136c:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <servo_rot+0xbc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d106      	bne.n	8001382 <servo_rot+0x6a>
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <servo_rot+0xc0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a15      	ldr	r2, [pc, #84]	; (80013d0 <servo_rot+0xb8>)
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	635a      	str	r2, [r3, #52]	; 0x34
 8001380:	e01b      	b.n	80013ba <servo_rot+0xa2>
 8001382:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <servo_rot+0xbc>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b04      	cmp	r3, #4
 8001388:	d106      	bne.n	8001398 <servo_rot+0x80>
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <servo_rot+0xc0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <servo_rot+0xb8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6393      	str	r3, [r2, #56]	; 0x38
 8001396:	e010      	b.n	80013ba <servo_rot+0xa2>
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <servo_rot+0xbc>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b08      	cmp	r3, #8
 800139e:	d106      	bne.n	80013ae <servo_rot+0x96>
 80013a0:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <servo_rot+0xc0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <servo_rot+0xb8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	63d3      	str	r3, [r2, #60]	; 0x3c
 80013ac:	e005      	b.n	80013ba <servo_rot+0xa2>
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <servo_rot+0xc0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <servo_rot+0xb8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
	}

	// HAL_Delay((4095/abssens)+4);
    HAL_Delay(10);
 80013ba:	200a      	movs	r0, #10
 80013bc:	f000 fc02 	bl	8001bc4 <HAL_Delay>
	return currentpulse;
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <servo_rot+0xb8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	b29b      	uxth	r3, r3
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000000 	.word	0x20000000
 80013d4:	20000974 	.word	0x20000974
 80013d8:	20000970 	.word	0x20000970

080013dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <HAL_MspInit+0x4c>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	4a0f      	ldr	r2, [pc, #60]	; (8001428 <HAL_MspInit+0x4c>)
 80013ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f0:	6453      	str	r3, [r2, #68]	; 0x44
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <HAL_MspInit+0x4c>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <HAL_MspInit+0x4c>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	4a08      	ldr	r2, [pc, #32]	; (8001428 <HAL_MspInit+0x4c>)
 8001408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140c:	6413      	str	r3, [r2, #64]	; 0x40
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_MspInit+0x4c>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800

0800142c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08e      	sub	sp, #56	; 0x38
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a45      	ldr	r2, [pc, #276]	; (8001560 <HAL_ADC_MspInit+0x134>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d128      	bne.n	80014a0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
 8001452:	4b44      	ldr	r3, [pc, #272]	; (8001564 <HAL_ADC_MspInit+0x138>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	4a43      	ldr	r2, [pc, #268]	; (8001564 <HAL_ADC_MspInit+0x138>)
 8001458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145c:	6453      	str	r3, [r2, #68]	; 0x44
 800145e:	4b41      	ldr	r3, [pc, #260]	; (8001564 <HAL_ADC_MspInit+0x138>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001466:	623b      	str	r3, [r7, #32]
 8001468:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
 800146e:	4b3d      	ldr	r3, [pc, #244]	; (8001564 <HAL_ADC_MspInit+0x138>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a3c      	ldr	r2, [pc, #240]	; (8001564 <HAL_ADC_MspInit+0x138>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b3a      	ldr	r3, [pc, #232]	; (8001564 <HAL_ADC_MspInit+0x138>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	61fb      	str	r3, [r7, #28]
 8001484:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001486:	2301      	movs	r3, #1
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800148a:	2303      	movs	r3, #3
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001496:	4619      	mov	r1, r3
 8001498:	4833      	ldr	r0, [pc, #204]	; (8001568 <HAL_ADC_MspInit+0x13c>)
 800149a:	f001 fc01 	bl	8002ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800149e:	e05a      	b.n	8001556 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a31      	ldr	r2, [pc, #196]	; (800156c <HAL_ADC_MspInit+0x140>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d128      	bne.n	80014fc <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
 80014ae:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <HAL_ADC_MspInit+0x138>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4a2c      	ldr	r2, [pc, #176]	; (8001564 <HAL_ADC_MspInit+0x138>)
 80014b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ba:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <HAL_ADC_MspInit+0x138>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014c2:	61bb      	str	r3, [r7, #24]
 80014c4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	4b26      	ldr	r3, [pc, #152]	; (8001564 <HAL_ADC_MspInit+0x138>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a25      	ldr	r2, [pc, #148]	; (8001564 <HAL_ADC_MspInit+0x138>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b23      	ldr	r3, [pc, #140]	; (8001564 <HAL_ADC_MspInit+0x138>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014e2:	2308      	movs	r3, #8
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e6:	2303      	movs	r3, #3
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f2:	4619      	mov	r1, r3
 80014f4:	481c      	ldr	r0, [pc, #112]	; (8001568 <HAL_ADC_MspInit+0x13c>)
 80014f6:	f001 fbd3 	bl	8002ca0 <HAL_GPIO_Init>
}
 80014fa:	e02c      	b.n	8001556 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a1b      	ldr	r2, [pc, #108]	; (8001570 <HAL_ADC_MspInit+0x144>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d127      	bne.n	8001556 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	4b16      	ldr	r3, [pc, #88]	; (8001564 <HAL_ADC_MspInit+0x138>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	4a15      	ldr	r2, [pc, #84]	; (8001564 <HAL_ADC_MspInit+0x138>)
 8001510:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001514:	6453      	str	r3, [r2, #68]	; 0x44
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <HAL_ADC_MspInit+0x138>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_ADC_MspInit+0x138>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <HAL_ADC_MspInit+0x138>)
 800152c:	f043 0320 	orr.w	r3, r3, #32
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <HAL_ADC_MspInit+0x138>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0320 	and.w	r3, r3, #32
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800153e:	2308      	movs	r3, #8
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001542:	2303      	movs	r3, #3
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800154a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154e:	4619      	mov	r1, r3
 8001550:	4808      	ldr	r0, [pc, #32]	; (8001574 <HAL_ADC_MspInit+0x148>)
 8001552:	f001 fba5 	bl	8002ca0 <HAL_GPIO_Init>
}
 8001556:	bf00      	nop
 8001558:	3738      	adds	r7, #56	; 0x38
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40012000 	.word	0x40012000
 8001564:	40023800 	.word	0x40023800
 8001568:	40020800 	.word	0x40020800
 800156c:	40012100 	.word	0x40012100
 8001570:	40012200 	.word	0x40012200
 8001574:	40021400 	.word	0x40021400

08001578 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08e      	sub	sp, #56	; 0x38
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a55      	ldr	r2, [pc, #340]	; (80016ec <HAL_ETH_MspInit+0x174>)
 8001596:	4293      	cmp	r3, r2
 8001598:	f040 80a4 	bne.w	80016e4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800159c:	2300      	movs	r3, #0
 800159e:	623b      	str	r3, [r7, #32]
 80015a0:	4b53      	ldr	r3, [pc, #332]	; (80016f0 <HAL_ETH_MspInit+0x178>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	4a52      	ldr	r2, [pc, #328]	; (80016f0 <HAL_ETH_MspInit+0x178>)
 80015a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015aa:	6313      	str	r3, [r2, #48]	; 0x30
 80015ac:	4b50      	ldr	r3, [pc, #320]	; (80016f0 <HAL_ETH_MspInit+0x178>)
 80015ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b4:	623b      	str	r3, [r7, #32]
 80015b6:	6a3b      	ldr	r3, [r7, #32]
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
 80015bc:	4b4c      	ldr	r3, [pc, #304]	; (80016f0 <HAL_ETH_MspInit+0x178>)
 80015be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c0:	4a4b      	ldr	r2, [pc, #300]	; (80016f0 <HAL_ETH_MspInit+0x178>)
 80015c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015c6:	6313      	str	r3, [r2, #48]	; 0x30
 80015c8:	4b49      	ldr	r3, [pc, #292]	; (80016f0 <HAL_ETH_MspInit+0x178>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	2300      	movs	r3, #0
 80015d6:	61bb      	str	r3, [r7, #24]
 80015d8:	4b45      	ldr	r3, [pc, #276]	; (80016f0 <HAL_ETH_MspInit+0x178>)
 80015da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015dc:	4a44      	ldr	r2, [pc, #272]	; (80016f0 <HAL_ETH_MspInit+0x178>)
 80015de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015e2:	6313      	str	r3, [r2, #48]	; 0x30
 80015e4:	4b42      	ldr	r3, [pc, #264]	; (80016f0 <HAL_ETH_MspInit+0x178>)
 80015e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80015ec:	61bb      	str	r3, [r7, #24]
 80015ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	4b3e      	ldr	r3, [pc, #248]	; (80016f0 <HAL_ETH_MspInit+0x178>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f8:	4a3d      	ldr	r2, [pc, #244]	; (80016f0 <HAL_ETH_MspInit+0x178>)
 80015fa:	f043 0304 	orr.w	r3, r3, #4
 80015fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001600:	4b3b      	ldr	r3, [pc, #236]	; (80016f0 <HAL_ETH_MspInit+0x178>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	4b37      	ldr	r3, [pc, #220]	; (80016f0 <HAL_ETH_MspInit+0x178>)
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001614:	4a36      	ldr	r2, [pc, #216]	; (80016f0 <HAL_ETH_MspInit+0x178>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6313      	str	r3, [r2, #48]	; 0x30
 800161c:	4b34      	ldr	r3, [pc, #208]	; (80016f0 <HAL_ETH_MspInit+0x178>)
 800161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	4b30      	ldr	r3, [pc, #192]	; (80016f0 <HAL_ETH_MspInit+0x178>)
 800162e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001630:	4a2f      	ldr	r2, [pc, #188]	; (80016f0 <HAL_ETH_MspInit+0x178>)
 8001632:	f043 0302 	orr.w	r3, r3, #2
 8001636:	6313      	str	r3, [r2, #48]	; 0x30
 8001638:	4b2d      	ldr	r3, [pc, #180]	; (80016f0 <HAL_ETH_MspInit+0x178>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001644:	2300      	movs	r3, #0
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <HAL_ETH_MspInit+0x178>)
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	4a28      	ldr	r2, [pc, #160]	; (80016f0 <HAL_ETH_MspInit+0x178>)
 800164e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001652:	6313      	str	r3, [r2, #48]	; 0x30
 8001654:	4b26      	ldr	r3, [pc, #152]	; (80016f0 <HAL_ETH_MspInit+0x178>)
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001660:	2332      	movs	r3, #50	; 0x32
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166c:	2303      	movs	r3, #3
 800166e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001670:	230b      	movs	r3, #11
 8001672:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001678:	4619      	mov	r1, r3
 800167a:	481e      	ldr	r0, [pc, #120]	; (80016f4 <HAL_ETH_MspInit+0x17c>)
 800167c:	f001 fb10 	bl	8002ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001680:	2386      	movs	r3, #134	; 0x86
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001690:	230b      	movs	r3, #11
 8001692:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001698:	4619      	mov	r1, r3
 800169a:	4817      	ldr	r0, [pc, #92]	; (80016f8 <HAL_ETH_MspInit+0x180>)
 800169c:	f001 fb00 	bl	8002ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80016a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016b2:	230b      	movs	r3, #11
 80016b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ba:	4619      	mov	r1, r3
 80016bc:	480f      	ldr	r0, [pc, #60]	; (80016fc <HAL_ETH_MspInit+0x184>)
 80016be:	f001 faef 	bl	8002ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80016c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016d4:	230b      	movs	r3, #11
 80016d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016dc:	4619      	mov	r1, r3
 80016de:	4808      	ldr	r0, [pc, #32]	; (8001700 <HAL_ETH_MspInit+0x188>)
 80016e0:	f001 fade 	bl	8002ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80016e4:	bf00      	nop
 80016e6:	3738      	adds	r7, #56	; 0x38
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40028000 	.word	0x40028000
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40020800 	.word	0x40020800
 80016f8:	40020000 	.word	0x40020000
 80016fc:	40020400 	.word	0x40020400
 8001700:	40021800 	.word	0x40021800

08001704 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a19      	ldr	r2, [pc, #100]	; (8001788 <HAL_I2C_MspInit+0x84>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d12b      	bne.n	800177e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <HAL_I2C_MspInit+0x88>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a17      	ldr	r2, [pc, #92]	; (800178c <HAL_I2C_MspInit+0x88>)
 8001730:	f043 0320 	orr.w	r3, r3, #32
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_I2C_MspInit+0x88>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0320 	and.w	r3, r3, #32
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001742:	2303      	movs	r3, #3
 8001744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001746:	2312      	movs	r3, #18
 8001748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001752:	2304      	movs	r3, #4
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	480c      	ldr	r0, [pc, #48]	; (8001790 <HAL_I2C_MspInit+0x8c>)
 800175e:	f001 fa9f 	bl	8002ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_I2C_MspInit+0x88>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	4a08      	ldr	r2, [pc, #32]	; (800178c <HAL_I2C_MspInit+0x88>)
 800176c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001770:	6413      	str	r3, [r2, #64]	; 0x40
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_I2C_MspInit+0x88>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	; 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40005800 	.word	0x40005800
 800178c:	40023800 	.word	0x40023800
 8001790:	40021400 	.word	0x40021400

08001794 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a4:	d115      	bne.n	80017d2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <HAL_TIM_Base_MspInit+0x48>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <HAL_TIM_Base_MspInit+0x48>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_TIM_Base_MspInit+0x48>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	201c      	movs	r0, #28
 80017c8:	f000 ff0b 	bl	80025e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017cc:	201c      	movs	r0, #28
 80017ce:	f000 ff24 	bl	800261a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800

080017e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001800:	d11d      	bne.n	800183e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <HAL_TIM_MspPostInit+0x68>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a0f      	ldr	r2, [pc, #60]	; (8001848 <HAL_TIM_MspPostInit+0x68>)
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <HAL_TIM_MspPostInit+0x68>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800181e:	2308      	movs	r3, #8
 8001820:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800182e:	2301      	movs	r3, #1
 8001830:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001832:	f107 030c 	add.w	r3, r7, #12
 8001836:	4619      	mov	r1, r3
 8001838:	4804      	ldr	r0, [pc, #16]	; (800184c <HAL_TIM_MspPostInit+0x6c>)
 800183a:	f001 fa31 	bl	8002ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800183e:	bf00      	nop
 8001840:	3720      	adds	r7, #32
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800
 800184c:	40020400 	.word	0x40020400

08001850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	; 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a19      	ldr	r2, [pc, #100]	; (80018d4 <HAL_UART_MspInit+0x84>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d12c      	bne.n	80018cc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <HAL_UART_MspInit+0x88>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	4a17      	ldr	r2, [pc, #92]	; (80018d8 <HAL_UART_MspInit+0x88>)
 800187c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001880:	6413      	str	r3, [r2, #64]	; 0x40
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_UART_MspInit+0x88>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_UART_MspInit+0x88>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a10      	ldr	r2, [pc, #64]	; (80018d8 <HAL_UART_MspInit+0x88>)
 8001898:	f043 0308 	orr.w	r3, r3, #8
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_UART_MspInit+0x88>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b8:	2303      	movs	r3, #3
 80018ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018bc:	2307      	movs	r3, #7
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4619      	mov	r1, r3
 80018c6:	4805      	ldr	r0, [pc, #20]	; (80018dc <HAL_UART_MspInit+0x8c>)
 80018c8:	f001 f9ea 	bl	8002ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018cc:	bf00      	nop
 80018ce:	3728      	adds	r7, #40	; 0x28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40004800 	.word	0x40004800
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020c00 	.word	0x40020c00

080018e0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001900:	d13f      	bne.n	8001982 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	4b21      	ldr	r3, [pc, #132]	; (800198c <HAL_PCD_MspInit+0xac>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a20      	ldr	r2, [pc, #128]	; (800198c <HAL_PCD_MspInit+0xac>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b1e      	ldr	r3, [pc, #120]	; (800198c <HAL_PCD_MspInit+0xac>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800191e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001930:	230a      	movs	r3, #10
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	4815      	ldr	r0, [pc, #84]	; (8001990 <HAL_PCD_MspInit+0xb0>)
 800193c:	f001 f9b0 	bl	8002ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001940:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	480e      	ldr	r0, [pc, #56]	; (8001990 <HAL_PCD_MspInit+0xb0>)
 8001956:	f001 f9a3 	bl	8002ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800195a:	4b0c      	ldr	r3, [pc, #48]	; (800198c <HAL_PCD_MspInit+0xac>)
 800195c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800195e:	4a0b      	ldr	r2, [pc, #44]	; (800198c <HAL_PCD_MspInit+0xac>)
 8001960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001964:	6353      	str	r3, [r2, #52]	; 0x34
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <HAL_PCD_MspInit+0xac>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	4a07      	ldr	r2, [pc, #28]	; (800198c <HAL_PCD_MspInit+0xac>)
 8001970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001974:	6453      	str	r3, [r2, #68]	; 0x44
 8001976:	4b05      	ldr	r3, [pc, #20]	; (800198c <HAL_PCD_MspInit+0xac>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001982:	bf00      	nop
 8001984:	3728      	adds	r7, #40	; 0x28
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800
 8001990:	40020000 	.word	0x40020000

08001994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001998:	e7fe      	b.n	8001998 <NMI_Handler+0x4>

0800199a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800199e:	e7fe      	b.n	800199e <HardFault_Handler+0x4>

080019a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <MemManage_Handler+0x4>

080019a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <BusFault_Handler+0x4>

080019ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <UsageFault_Handler+0x4>

080019b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019e0:	f000 f8d0 	bl	8001b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <TIM2_IRQHandler+0x10>)
 80019ee:	f003 f84f 	bl	8004a90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200003d0 	.word	0x200003d0

080019fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a04:	4a14      	ldr	r2, [pc, #80]	; (8001a58 <_sbrk+0x5c>)
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <_sbrk+0x60>)
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a10:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d102      	bne.n	8001a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <_sbrk+0x64>)
 8001a1a:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <_sbrk+0x68>)
 8001a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <_sbrk+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d207      	bcs.n	8001a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a2c:	f004 fcba 	bl	80063a4 <__errno>
 8001a30:	4603      	mov	r3, r0
 8001a32:	220c      	movs	r2, #12
 8001a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3a:	e009      	b.n	8001a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a42:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <_sbrk+0x64>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	4a05      	ldr	r2, [pc, #20]	; (8001a60 <_sbrk+0x64>)
 8001a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20030000 	.word	0x20030000
 8001a5c:	00000400 	.word	0x00000400
 8001a60:	2000097c 	.word	0x2000097c
 8001a64:	20000ad0 	.word	0x20000ad0

08001a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <SystemInit+0x20>)
 8001a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a72:	4a05      	ldr	r2, [pc, #20]	; (8001a88 <SystemInit+0x20>)
 8001a74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a90:	480d      	ldr	r0, [pc, #52]	; (8001ac8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a92:	490e      	ldr	r1, [pc, #56]	; (8001acc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a94:	4a0e      	ldr	r2, [pc, #56]	; (8001ad0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a98:	e002      	b.n	8001aa0 <LoopCopyDataInit>

08001a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9e:	3304      	adds	r3, #4

08001aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa4:	d3f9      	bcc.n	8001a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa6:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aa8:	4c0b      	ldr	r4, [pc, #44]	; (8001ad8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aac:	e001      	b.n	8001ab2 <LoopFillZerobss>

08001aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab0:	3204      	adds	r2, #4

08001ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab4:	d3fb      	bcc.n	8001aae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ab6:	f7ff ffd7 	bl	8001a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aba:	f004 fc79 	bl	80063b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001abe:	f7fe ff4f 	bl	8000960 <main>
  bx  lr    
 8001ac2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ac4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001acc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001ad0:	08006d48 	.word	0x08006d48
  ldr r2, =_sbss
 8001ad4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001ad8:	20000acc 	.word	0x20000acc

08001adc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001adc:	e7fe      	b.n	8001adc <ADC_IRQHandler>
	...

08001ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <HAL_Init+0x40>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0d      	ldr	r2, [pc, #52]	; (8001b20 <HAL_Init+0x40>)
 8001aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_Init+0x40>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <HAL_Init+0x40>)
 8001af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001afa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <HAL_Init+0x40>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <HAL_Init+0x40>)
 8001b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b08:	2003      	movs	r0, #3
 8001b0a:	f000 fd5f 	bl	80025cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f000 f808 	bl	8001b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b14:	f7ff fc62 	bl	80013dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023c00 	.word	0x40023c00

08001b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_InitTick+0x54>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_InitTick+0x58>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4619      	mov	r1, r3
 8001b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 fd77 	bl	8002636 <HAL_SYSTICK_Config>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00e      	b.n	8001b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b0f      	cmp	r3, #15
 8001b56:	d80a      	bhi.n	8001b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	f000 fd3f 	bl	80025e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b64:	4a06      	ldr	r2, [pc, #24]	; (8001b80 <HAL_InitTick+0x5c>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e000      	b.n	8001b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000004 	.word	0x20000004
 8001b7c:	2000000c 	.word	0x2000000c
 8001b80:	20000008 	.word	0x20000008

08001b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_IncTick+0x20>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_IncTick+0x24>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <HAL_IncTick+0x24>)
 8001b96:	6013      	str	r3, [r2, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	2000000c 	.word	0x2000000c
 8001ba8:	20000980 	.word	0x20000980

08001bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <HAL_GetTick+0x14>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000980 	.word	0x20000980

08001bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bcc:	f7ff ffee 	bl	8001bac <HAL_GetTick>
 8001bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bdc:	d005      	beq.n	8001bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <HAL_Delay+0x44>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4413      	add	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bea:	bf00      	nop
 8001bec:	f7ff ffde 	bl	8001bac <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d8f7      	bhi.n	8001bec <HAL_Delay+0x28>
  {
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	2000000c 	.word	0x2000000c

08001c0c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c14:	2300      	movs	r3, #0
 8001c16:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e033      	b.n	8001c8a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff fbfe 	bl	800142c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d118      	bne.n	8001c7c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c52:	f023 0302 	bic.w	r3, r3, #2
 8001c56:	f043 0202 	orr.w	r2, r3, #2
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 fae8 	bl	8002234 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f023 0303 	bic.w	r3, r3, #3
 8001c72:	f043 0201 	orr.w	r2, r3, #1
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	641a      	str	r2, [r3, #64]	; 0x40
 8001c7a:	e001      	b.n	8001c80 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d101      	bne.n	8001cae <HAL_ADC_Start+0x1a>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e0b2      	b.n	8001e14 <HAL_ADC_Start+0x180>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d018      	beq.n	8001cf6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0201 	orr.w	r2, r2, #1
 8001cd2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cd4:	4b52      	ldr	r3, [pc, #328]	; (8001e20 <HAL_ADC_Start+0x18c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a52      	ldr	r2, [pc, #328]	; (8001e24 <HAL_ADC_Start+0x190>)
 8001cda:	fba2 2303 	umull	r2, r3, r2, r3
 8001cde:	0c9a      	lsrs	r2, r3, #18
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ce8:	e002      	b.n	8001cf0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f9      	bne.n	8001cea <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d17a      	bne.n	8001dfa <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d0c:	f023 0301 	bic.w	r3, r3, #1
 8001d10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d007      	beq.n	8001d36 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d2e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d42:	d106      	bne.n	8001d52 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d48:	f023 0206 	bic.w	r2, r3, #6
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	645a      	str	r2, [r3, #68]	; 0x44
 8001d50:	e002      	b.n	8001d58 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d60:	4b31      	ldr	r3, [pc, #196]	; (8001e28 <HAL_ADC_Start+0x194>)
 8001d62:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d6c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 031f 	and.w	r3, r3, #31
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d12a      	bne.n	8001dd0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a2b      	ldr	r2, [pc, #172]	; (8001e2c <HAL_ADC_Start+0x198>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d015      	beq.n	8001db0 <HAL_ADC_Start+0x11c>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a29      	ldr	r2, [pc, #164]	; (8001e30 <HAL_ADC_Start+0x19c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d105      	bne.n	8001d9a <HAL_ADC_Start+0x106>
 8001d8e:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <HAL_ADC_Start+0x194>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 031f 	and.w	r3, r3, #31
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00a      	beq.n	8001db0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a25      	ldr	r2, [pc, #148]	; (8001e34 <HAL_ADC_Start+0x1a0>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d136      	bne.n	8001e12 <HAL_ADC_Start+0x17e>
 8001da4:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <HAL_ADC_Start+0x194>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0310 	and.w	r3, r3, #16
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d130      	bne.n	8001e12 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d129      	bne.n	8001e12 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	e020      	b.n	8001e12 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a15      	ldr	r2, [pc, #84]	; (8001e2c <HAL_ADC_Start+0x198>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d11b      	bne.n	8001e12 <HAL_ADC_Start+0x17e>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d114      	bne.n	8001e12 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	e00b      	b.n	8001e12 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f043 0210 	orr.w	r2, r3, #16
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	f043 0201 	orr.w	r2, r3, #1
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	20000004 	.word	0x20000004
 8001e24:	431bde83 	.word	0x431bde83
 8001e28:	40012300 	.word	0x40012300
 8001e2c:	40012000 	.word	0x40012000
 8001e30:	40012100 	.word	0x40012100
 8001e34:	40012200 	.word	0x40012200

08001e38 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_ADC_Stop+0x16>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e021      	b.n	8001e92 <HAL_ADC_Stop+0x5a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0201 	bic.w	r2, r2, #1
 8001e64:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d109      	bne.n	8001e88 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	f043 0201 	orr.w	r2, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eba:	d113      	bne.n	8001ee4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eca:	d10b      	bne.n	8001ee4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	f043 0220 	orr.w	r2, r3, #32
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e063      	b.n	8001fac <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001ee4:	f7ff fe62 	bl	8001bac <HAL_GetTick>
 8001ee8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001eea:	e021      	b.n	8001f30 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef2:	d01d      	beq.n	8001f30 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d007      	beq.n	8001f0a <HAL_ADC_PollForConversion+0x6c>
 8001efa:	f7ff fe57 	bl	8001bac <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d212      	bcs.n	8001f30 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d00b      	beq.n	8001f30 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	f043 0204 	orr.w	r2, r3, #4
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e03d      	b.n	8001fac <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d1d6      	bne.n	8001eec <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f06f 0212 	mvn.w	r2, #18
 8001f46:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d123      	bne.n	8001faa <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d11f      	bne.n	8001faa <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f70:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d006      	beq.n	8001f86 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d111      	bne.n	8001faa <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d105      	bne.n	8001faa <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f043 0201 	orr.w	r2, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x1c>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e113      	b.n	8002214 <HAL_ADC_ConfigChannel+0x244>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b09      	cmp	r3, #9
 8001ffa:	d925      	bls.n	8002048 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68d9      	ldr	r1, [r3, #12]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	b29b      	uxth	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	4613      	mov	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	3b1e      	subs	r3, #30
 8002012:	2207      	movs	r2, #7
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43da      	mvns	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	400a      	ands	r2, r1
 8002020:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68d9      	ldr	r1, [r3, #12]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	b29b      	uxth	r3, r3
 8002032:	4618      	mov	r0, r3
 8002034:	4603      	mov	r3, r0
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4403      	add	r3, r0
 800203a:	3b1e      	subs	r3, #30
 800203c:	409a      	lsls	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	e022      	b.n	800208e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6919      	ldr	r1, [r3, #16]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	b29b      	uxth	r3, r3
 8002054:	461a      	mov	r2, r3
 8002056:	4613      	mov	r3, r2
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	4413      	add	r3, r2
 800205c:	2207      	movs	r2, #7
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43da      	mvns	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	400a      	ands	r2, r1
 800206a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6919      	ldr	r1, [r3, #16]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	4618      	mov	r0, r3
 800207e:	4603      	mov	r3, r0
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4403      	add	r3, r0
 8002084:	409a      	lsls	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b06      	cmp	r3, #6
 8002094:	d824      	bhi.n	80020e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	3b05      	subs	r3, #5
 80020a8:	221f      	movs	r2, #31
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	400a      	ands	r2, r1
 80020b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	4618      	mov	r0, r3
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	3b05      	subs	r3, #5
 80020d2:	fa00 f203 	lsl.w	r2, r0, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	635a      	str	r2, [r3, #52]	; 0x34
 80020de:	e04c      	b.n	800217a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b0c      	cmp	r3, #12
 80020e6:	d824      	bhi.n	8002132 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	3b23      	subs	r3, #35	; 0x23
 80020fa:	221f      	movs	r2, #31
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43da      	mvns	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	400a      	ands	r2, r1
 8002108:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	b29b      	uxth	r3, r3
 8002116:	4618      	mov	r0, r3
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	3b23      	subs	r3, #35	; 0x23
 8002124:	fa00 f203 	lsl.w	r2, r0, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	631a      	str	r2, [r3, #48]	; 0x30
 8002130:	e023      	b.n	800217a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	3b41      	subs	r3, #65	; 0x41
 8002144:	221f      	movs	r2, #31
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43da      	mvns	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	400a      	ands	r2, r1
 8002152:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	b29b      	uxth	r3, r3
 8002160:	4618      	mov	r0, r3
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	3b41      	subs	r3, #65	; 0x41
 800216e:	fa00 f203 	lsl.w	r2, r0, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800217a:	4b29      	ldr	r3, [pc, #164]	; (8002220 <HAL_ADC_ConfigChannel+0x250>)
 800217c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a28      	ldr	r2, [pc, #160]	; (8002224 <HAL_ADC_ConfigChannel+0x254>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d10f      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x1d8>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b12      	cmp	r3, #18
 800218e:	d10b      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a1d      	ldr	r2, [pc, #116]	; (8002224 <HAL_ADC_ConfigChannel+0x254>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d12b      	bne.n	800220a <HAL_ADC_ConfigChannel+0x23a>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a1c      	ldr	r2, [pc, #112]	; (8002228 <HAL_ADC_ConfigChannel+0x258>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d003      	beq.n	80021c4 <HAL_ADC_ConfigChannel+0x1f4>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b11      	cmp	r3, #17
 80021c2:	d122      	bne.n	800220a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a11      	ldr	r2, [pc, #68]	; (8002228 <HAL_ADC_ConfigChannel+0x258>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d111      	bne.n	800220a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_ADC_ConfigChannel+0x25c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a11      	ldr	r2, [pc, #68]	; (8002230 <HAL_ADC_ConfigChannel+0x260>)
 80021ec:	fba2 2303 	umull	r2, r3, r2, r3
 80021f0:	0c9a      	lsrs	r2, r3, #18
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021fc:	e002      	b.n	8002204 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	3b01      	subs	r3, #1
 8002202:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f9      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	40012300 	.word	0x40012300
 8002224:	40012000 	.word	0x40012000
 8002228:	10000012 	.word	0x10000012
 800222c:	20000004 	.word	0x20000004
 8002230:	431bde83 	.word	0x431bde83

08002234 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800223c:	4b79      	ldr	r3, [pc, #484]	; (8002424 <ADC_Init+0x1f0>)
 800223e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	431a      	orrs	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002268:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6859      	ldr	r1, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	021a      	lsls	r2, r3, #8
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800228c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6859      	ldr	r1, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6899      	ldr	r1, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c6:	4a58      	ldr	r2, [pc, #352]	; (8002428 <ADC_Init+0x1f4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d022      	beq.n	8002312 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6899      	ldr	r1, [r3, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6899      	ldr	r1, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	e00f      	b.n	8002332 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002320:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002330:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0202 	bic.w	r2, r2, #2
 8002340:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6899      	ldr	r1, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	7e1b      	ldrb	r3, [r3, #24]
 800234c:	005a      	lsls	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3020 	ldrb.w	r3, [r3, #32]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01b      	beq.n	8002398 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800236e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800237e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6859      	ldr	r1, [r3, #4]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	3b01      	subs	r3, #1
 800238c:	035a      	lsls	r2, r3, #13
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	e007      	b.n	80023a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	051a      	lsls	r2, r3, #20
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6899      	ldr	r1, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023ea:	025a      	lsls	r2, r3, #9
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002402:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6899      	ldr	r1, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	029a      	lsls	r2, r3, #10
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	609a      	str	r2, [r3, #8]
}
 8002418:	bf00      	nop
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	40012300 	.word	0x40012300
 8002428:	0f000001 	.word	0x0f000001

0800242c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002448:	4013      	ands	r3, r2
 800244a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800245c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245e:	4a04      	ldr	r2, [pc, #16]	; (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	60d3      	str	r3, [r2, #12]
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <__NVIC_GetPriorityGrouping+0x18>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	f003 0307 	and.w	r3, r3, #7
}
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	db0b      	blt.n	80024ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	f003 021f 	and.w	r2, r3, #31
 80024a8:	4907      	ldr	r1, [pc, #28]	; (80024c8 <__NVIC_EnableIRQ+0x38>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2001      	movs	r0, #1
 80024b2:	fa00 f202 	lsl.w	r2, r0, r2
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	e000e100 	.word	0xe000e100

080024cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	6039      	str	r1, [r7, #0]
 80024d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	db0a      	blt.n	80024f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	490c      	ldr	r1, [pc, #48]	; (8002518 <__NVIC_SetPriority+0x4c>)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	0112      	lsls	r2, r2, #4
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	440b      	add	r3, r1
 80024f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f4:	e00a      	b.n	800250c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4908      	ldr	r1, [pc, #32]	; (800251c <__NVIC_SetPriority+0x50>)
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	3b04      	subs	r3, #4
 8002504:	0112      	lsls	r2, r2, #4
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	440b      	add	r3, r1
 800250a:	761a      	strb	r2, [r3, #24]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000e100 	.word	0xe000e100
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002520:	b480      	push	{r7}
 8002522:	b089      	sub	sp, #36	; 0x24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f1c3 0307 	rsb	r3, r3, #7
 800253a:	2b04      	cmp	r3, #4
 800253c:	bf28      	it	cs
 800253e:	2304      	movcs	r3, #4
 8002540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3304      	adds	r3, #4
 8002546:	2b06      	cmp	r3, #6
 8002548:	d902      	bls.n	8002550 <NVIC_EncodePriority+0x30>
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3b03      	subs	r3, #3
 800254e:	e000      	b.n	8002552 <NVIC_EncodePriority+0x32>
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002554:	f04f 32ff 	mov.w	r2, #4294967295
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43da      	mvns	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	401a      	ands	r2, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002568:	f04f 31ff 	mov.w	r1, #4294967295
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	fa01 f303 	lsl.w	r3, r1, r3
 8002572:	43d9      	mvns	r1, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	4313      	orrs	r3, r2
         );
}
 800257a:	4618      	mov	r0, r3
 800257c:	3724      	adds	r7, #36	; 0x24
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3b01      	subs	r3, #1
 8002594:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002598:	d301      	bcc.n	800259e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800259a:	2301      	movs	r3, #1
 800259c:	e00f      	b.n	80025be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800259e:	4a0a      	ldr	r2, [pc, #40]	; (80025c8 <SysTick_Config+0x40>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025a6:	210f      	movs	r1, #15
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ac:	f7ff ff8e 	bl	80024cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <SysTick_Config+0x40>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b6:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <SysTick_Config+0x40>)
 80025b8:	2207      	movs	r2, #7
 80025ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	e000e010 	.word	0xe000e010

080025cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff ff29 	bl	800242c <__NVIC_SetPriorityGrouping>
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b086      	sub	sp, #24
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f4:	f7ff ff3e 	bl	8002474 <__NVIC_GetPriorityGrouping>
 80025f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68b9      	ldr	r1, [r7, #8]
 80025fe:	6978      	ldr	r0, [r7, #20]
 8002600:	f7ff ff8e 	bl	8002520 <NVIC_EncodePriority>
 8002604:	4602      	mov	r2, r0
 8002606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff5d 	bl	80024cc <__NVIC_SetPriority>
}
 8002612:	bf00      	nop
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	4603      	mov	r3, r0
 8002622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff31 	bl	8002490 <__NVIC_EnableIRQ>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ffa2 	bl	8002588 <SysTick_Config>
 8002644:	4603      	mov	r3, r0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e06c      	b.n	800273c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002668:	2b00      	cmp	r3, #0
 800266a:	d106      	bne.n	800267a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2223      	movs	r2, #35	; 0x23
 8002670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7fe ff7f 	bl	8001578 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	4b31      	ldr	r3, [pc, #196]	; (8002744 <HAL_ETH_Init+0xf4>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	4a30      	ldr	r2, [pc, #192]	; (8002744 <HAL_ETH_Init+0xf4>)
 8002684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002688:	6453      	str	r3, [r2, #68]	; 0x44
 800268a:	4b2e      	ldr	r3, [pc, #184]	; (8002744 <HAL_ETH_Init+0xf4>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002696:	4b2c      	ldr	r3, [pc, #176]	; (8002748 <HAL_ETH_Init+0xf8>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4a2b      	ldr	r2, [pc, #172]	; (8002748 <HAL_ETH_Init+0xf8>)
 800269c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80026a0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80026a2:	4b29      	ldr	r3, [pc, #164]	; (8002748 <HAL_ETH_Init+0xf8>)
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	4927      	ldr	r1, [pc, #156]	; (8002748 <HAL_ETH_Init+0xf8>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80026b0:	4b25      	ldr	r3, [pc, #148]	; (8002748 <HAL_ETH_Init+0xf8>)
 80026b2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026cc:	f7ff fa6e 	bl	8001bac <HAL_GetTick>
 80026d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80026d2:	e011      	b.n	80026f8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80026d4:	f7ff fa6a 	bl	8001bac <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026e2:	d909      	bls.n	80026f8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2204      	movs	r2, #4
 80026e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	22e0      	movs	r2, #224	; 0xe0
 80026f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e021      	b.n	800273c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1e4      	bne.n	80026d4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f958 	bl	80029c0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f9ff 	bl	8002b14 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 fa55 	bl	8002bc6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	461a      	mov	r2, r3
 8002722:	2100      	movs	r1, #0
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f9bd 	bl	8002aa4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2210      	movs	r2, #16
 8002736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40023800 	.word	0x40023800
 8002748:	40013800 	.word	0x40013800

0800274c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4b51      	ldr	r3, [pc, #324]	; (80028a8 <ETH_SetMACConfig+0x15c>)
 8002762:	4013      	ands	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	7c1b      	ldrb	r3, [r3, #16]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d102      	bne.n	8002774 <ETH_SetMACConfig+0x28>
 800276e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002772:	e000      	b.n	8002776 <ETH_SetMACConfig+0x2a>
 8002774:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	7c5b      	ldrb	r3, [r3, #17]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d102      	bne.n	8002784 <ETH_SetMACConfig+0x38>
 800277e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002782:	e000      	b.n	8002786 <ETH_SetMACConfig+0x3a>
 8002784:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002786:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800278c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	7fdb      	ldrb	r3, [r3, #31]
 8002792:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002794:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800279a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	7f92      	ldrb	r2, [r2, #30]
 80027a0:	2a00      	cmp	r2, #0
 80027a2:	d102      	bne.n	80027aa <ETH_SetMACConfig+0x5e>
 80027a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027a8:	e000      	b.n	80027ac <ETH_SetMACConfig+0x60>
 80027aa:	2200      	movs	r2, #0
                        macconf->Speed |
 80027ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	7f1b      	ldrb	r3, [r3, #28]
 80027b2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80027b4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80027ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	791b      	ldrb	r3, [r3, #4]
 80027c0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80027c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80027ca:	2a00      	cmp	r2, #0
 80027cc:	d102      	bne.n	80027d4 <ETH_SetMACConfig+0x88>
 80027ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027d2:	e000      	b.n	80027d6 <ETH_SetMACConfig+0x8a>
 80027d4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80027d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	7bdb      	ldrb	r3, [r3, #15]
 80027dc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80027de:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80027e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027ec:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027ee:	4313      	orrs	r3, r2
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002806:	2001      	movs	r0, #1
 8002808:	f7ff f9dc 	bl	8001bc4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002822:	4013      	ands	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800282a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002832:	2a00      	cmp	r2, #0
 8002834:	d101      	bne.n	800283a <ETH_SetMACConfig+0xee>
 8002836:	2280      	movs	r2, #128	; 0x80
 8002838:	e000      	b.n	800283c <ETH_SetMACConfig+0xf0>
 800283a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800283c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002842:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800284a:	2a01      	cmp	r2, #1
 800284c:	d101      	bne.n	8002852 <ETH_SetMACConfig+0x106>
 800284e:	2208      	movs	r2, #8
 8002850:	e000      	b.n	8002854 <ETH_SetMACConfig+0x108>
 8002852:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002854:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800285c:	2a01      	cmp	r2, #1
 800285e:	d101      	bne.n	8002864 <ETH_SetMACConfig+0x118>
 8002860:	2204      	movs	r2, #4
 8002862:	e000      	b.n	8002866 <ETH_SetMACConfig+0x11a>
 8002864:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002866:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800286e:	2a01      	cmp	r2, #1
 8002870:	d101      	bne.n	8002876 <ETH_SetMACConfig+0x12a>
 8002872:	2202      	movs	r2, #2
 8002874:	e000      	b.n	8002878 <ETH_SetMACConfig+0x12c>
 8002876:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002878:	4313      	orrs	r3, r2
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4313      	orrs	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002890:	2001      	movs	r0, #1
 8002892:	f7ff f997 	bl	8001bc4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	619a      	str	r2, [r3, #24]
}
 800289e:	bf00      	nop
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	ff20810f 	.word	0xff20810f

080028ac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4b3d      	ldr	r3, [pc, #244]	; (80029bc <ETH_SetDMAConfig+0x110>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	7b1b      	ldrb	r3, [r3, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d102      	bne.n	80028d8 <ETH_SetDMAConfig+0x2c>
 80028d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80028d6:	e000      	b.n	80028da <ETH_SetDMAConfig+0x2e>
 80028d8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	7b5b      	ldrb	r3, [r3, #13]
 80028de:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80028e0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	7f52      	ldrb	r2, [r2, #29]
 80028e6:	2a00      	cmp	r2, #0
 80028e8:	d102      	bne.n	80028f0 <ETH_SetDMAConfig+0x44>
 80028ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80028ee:	e000      	b.n	80028f2 <ETH_SetDMAConfig+0x46>
 80028f0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80028f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	7b9b      	ldrb	r3, [r3, #14]
 80028f8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80028fa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002900:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	7f1b      	ldrb	r3, [r3, #28]
 8002906:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002908:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	7f9b      	ldrb	r3, [r3, #30]
 800290e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002910:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002916:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800291e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002920:	4313      	orrs	r3, r2
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002930:	461a      	mov	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002942:	2001      	movs	r0, #1
 8002944:	f7ff f93e 	bl	8001bc4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002950:	461a      	mov	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	791b      	ldrb	r3, [r3, #4]
 800295a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002960:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002966:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800296c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002974:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002976:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800297e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002984:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6812      	ldr	r2, [r2, #0]
 800298a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800298e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002992:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029a0:	2001      	movs	r0, #1
 80029a2:	f7ff f90f 	bl	8001bc4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029ae:	461a      	mov	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6013      	str	r3, [r2, #0]
}
 80029b4:	bf00      	nop
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	f8de3f23 	.word	0xf8de3f23

080029c0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b0a6      	sub	sp, #152	; 0x98
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80029c8:	2301      	movs	r3, #1
 80029ca:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80029ce:	2301      	movs	r3, #1
 80029d0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80029d4:	2300      	movs	r3, #0
 80029d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80029d8:	2300      	movs	r3, #0
 80029da:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80029de:	2301      	movs	r3, #1
 80029e0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80029e4:	2300      	movs	r3, #0
 80029e6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80029ea:	2301      	movs	r3, #1
 80029ec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80029f0:	2300      	movs	r3, #0
 80029f2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80029f6:	2300      	movs	r3, #0
 80029f8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80029fc:	2300      	movs	r3, #0
 80029fe:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002a00:	2300      	movs	r3, #0
 8002a02:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002a10:	2300      	movs	r3, #0
 8002a12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002a22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a26:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002a28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a38:	4619      	mov	r1, r3
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff fe86 	bl	800274c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002a40:	2301      	movs	r3, #1
 8002a42:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002a44:	2301      	movs	r3, #1
 8002a46:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002a62:	2300      	movs	r3, #0
 8002a64:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002a66:	2301      	movs	r3, #1
 8002a68:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a74:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a7a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a80:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002a82:	2301      	movs	r3, #1
 8002a84:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a90:	f107 0308 	add.w	r3, r7, #8
 8002a94:	4619      	mov	r1, r3
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff ff08 	bl	80028ac <ETH_SetDMAConfig>
}
 8002a9c:	bf00      	nop
 8002a9e:	3798      	adds	r7, #152	; 0x98
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3305      	adds	r3, #5
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	021b      	lsls	r3, r3, #8
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	3204      	adds	r2, #4
 8002abc:	7812      	ldrb	r2, [r2, #0]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <ETH_MACAddressConfig+0x68>)
 8002ac6:	4413      	add	r3, r2
 8002ac8:	461a      	mov	r2, r3
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3303      	adds	r3, #3
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	061a      	lsls	r2, r3, #24
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3302      	adds	r3, #2
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	041b      	lsls	r3, r3, #16
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	7812      	ldrb	r2, [r2, #0]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <ETH_MACAddressConfig+0x6c>)
 8002af6:	4413      	add	r3, r2
 8002af8:	461a      	mov	r2, r3
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	6013      	str	r3, [r2, #0]
}
 8002afe:	bf00      	nop
 8002b00:	371c      	adds	r7, #28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40028040 	.word	0x40028040
 8002b10:	40028044 	.word	0x40028044

08002b14 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	e03e      	b.n	8002ba0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68d9      	ldr	r1, [r3, #12]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	440b      	add	r3, r1
 8002b32:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002b4c:	68b9      	ldr	r1, [r7, #8]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	3206      	adds	r2, #6
 8002b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d80c      	bhi.n	8002b84 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68d9      	ldr	r1, [r3, #12]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	440b      	add	r3, r1
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	e004      	b.n	8002b8e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d9bd      	bls.n	8002b22 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bb8:	611a      	str	r2, [r3, #16]
}
 8002bba:	bf00      	nop
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b085      	sub	sp, #20
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	e046      	b.n	8002c62 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6919      	ldr	r1, [r3, #16]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	440b      	add	r3, r1
 8002be4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2200      	movs	r2, #0
 8002c02:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2200      	movs	r2, #0
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c10:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002c18:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c26:	68b9      	ldr	r1, [r7, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	3212      	adds	r2, #18
 8002c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d80c      	bhi.n	8002c52 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6919      	ldr	r1, [r3, #16]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	4613      	mov	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	440b      	add	r3, r1
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	60da      	str	r2, [r3, #12]
 8002c50:	e004      	b.n	8002c5c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	461a      	mov	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d9b5      	bls.n	8002bd4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691a      	ldr	r2, [r3, #16]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c92:	60da      	str	r2, [r3, #12]
}
 8002c94:	bf00      	nop
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b089      	sub	sp, #36	; 0x24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
 8002cba:	e177      	b.n	8002fac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	f040 8166 	bne.w	8002fa6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d005      	beq.n	8002cf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d130      	bne.n	8002d54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43db      	mvns	r3, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4013      	ands	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d28:	2201      	movs	r2, #1
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	f003 0201 	and.w	r2, r3, #1
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 0303 	and.w	r3, r3, #3
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d017      	beq.n	8002d90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4013      	ands	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d123      	bne.n	8002de4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	08da      	lsrs	r2, r3, #3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3208      	adds	r2, #8
 8002da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	220f      	movs	r2, #15
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	08da      	lsrs	r2, r3, #3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3208      	adds	r2, #8
 8002dde:	69b9      	ldr	r1, [r7, #24]
 8002de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	2203      	movs	r2, #3
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 0203 	and.w	r2, r3, #3
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 80c0 	beq.w	8002fa6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	4b66      	ldr	r3, [pc, #408]	; (8002fc4 <HAL_GPIO_Init+0x324>)
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	4a65      	ldr	r2, [pc, #404]	; (8002fc4 <HAL_GPIO_Init+0x324>)
 8002e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e34:	6453      	str	r3, [r2, #68]	; 0x44
 8002e36:	4b63      	ldr	r3, [pc, #396]	; (8002fc4 <HAL_GPIO_Init+0x324>)
 8002e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e42:	4a61      	ldr	r2, [pc, #388]	; (8002fc8 <HAL_GPIO_Init+0x328>)
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	089b      	lsrs	r3, r3, #2
 8002e48:	3302      	adds	r3, #2
 8002e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	220f      	movs	r2, #15
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4013      	ands	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a58      	ldr	r2, [pc, #352]	; (8002fcc <HAL_GPIO_Init+0x32c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d037      	beq.n	8002ede <HAL_GPIO_Init+0x23e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a57      	ldr	r2, [pc, #348]	; (8002fd0 <HAL_GPIO_Init+0x330>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d031      	beq.n	8002eda <HAL_GPIO_Init+0x23a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a56      	ldr	r2, [pc, #344]	; (8002fd4 <HAL_GPIO_Init+0x334>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d02b      	beq.n	8002ed6 <HAL_GPIO_Init+0x236>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a55      	ldr	r2, [pc, #340]	; (8002fd8 <HAL_GPIO_Init+0x338>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d025      	beq.n	8002ed2 <HAL_GPIO_Init+0x232>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a54      	ldr	r2, [pc, #336]	; (8002fdc <HAL_GPIO_Init+0x33c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d01f      	beq.n	8002ece <HAL_GPIO_Init+0x22e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a53      	ldr	r2, [pc, #332]	; (8002fe0 <HAL_GPIO_Init+0x340>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d019      	beq.n	8002eca <HAL_GPIO_Init+0x22a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a52      	ldr	r2, [pc, #328]	; (8002fe4 <HAL_GPIO_Init+0x344>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d013      	beq.n	8002ec6 <HAL_GPIO_Init+0x226>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a51      	ldr	r2, [pc, #324]	; (8002fe8 <HAL_GPIO_Init+0x348>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00d      	beq.n	8002ec2 <HAL_GPIO_Init+0x222>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a50      	ldr	r2, [pc, #320]	; (8002fec <HAL_GPIO_Init+0x34c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d007      	beq.n	8002ebe <HAL_GPIO_Init+0x21e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a4f      	ldr	r2, [pc, #316]	; (8002ff0 <HAL_GPIO_Init+0x350>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d101      	bne.n	8002eba <HAL_GPIO_Init+0x21a>
 8002eb6:	2309      	movs	r3, #9
 8002eb8:	e012      	b.n	8002ee0 <HAL_GPIO_Init+0x240>
 8002eba:	230a      	movs	r3, #10
 8002ebc:	e010      	b.n	8002ee0 <HAL_GPIO_Init+0x240>
 8002ebe:	2308      	movs	r3, #8
 8002ec0:	e00e      	b.n	8002ee0 <HAL_GPIO_Init+0x240>
 8002ec2:	2307      	movs	r3, #7
 8002ec4:	e00c      	b.n	8002ee0 <HAL_GPIO_Init+0x240>
 8002ec6:	2306      	movs	r3, #6
 8002ec8:	e00a      	b.n	8002ee0 <HAL_GPIO_Init+0x240>
 8002eca:	2305      	movs	r3, #5
 8002ecc:	e008      	b.n	8002ee0 <HAL_GPIO_Init+0x240>
 8002ece:	2304      	movs	r3, #4
 8002ed0:	e006      	b.n	8002ee0 <HAL_GPIO_Init+0x240>
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e004      	b.n	8002ee0 <HAL_GPIO_Init+0x240>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e002      	b.n	8002ee0 <HAL_GPIO_Init+0x240>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <HAL_GPIO_Init+0x240>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	69fa      	ldr	r2, [r7, #28]
 8002ee2:	f002 0203 	and.w	r2, r2, #3
 8002ee6:	0092      	lsls	r2, r2, #2
 8002ee8:	4093      	lsls	r3, r2
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ef0:	4935      	ldr	r1, [pc, #212]	; (8002fc8 <HAL_GPIO_Init+0x328>)
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	089b      	lsrs	r3, r3, #2
 8002ef6:	3302      	adds	r3, #2
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002efe:	4b3d      	ldr	r3, [pc, #244]	; (8002ff4 <HAL_GPIO_Init+0x354>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f22:	4a34      	ldr	r2, [pc, #208]	; (8002ff4 <HAL_GPIO_Init+0x354>)
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f28:	4b32      	ldr	r3, [pc, #200]	; (8002ff4 <HAL_GPIO_Init+0x354>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	43db      	mvns	r3, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4013      	ands	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f4c:	4a29      	ldr	r2, [pc, #164]	; (8002ff4 <HAL_GPIO_Init+0x354>)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f52:	4b28      	ldr	r3, [pc, #160]	; (8002ff4 <HAL_GPIO_Init+0x354>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f76:	4a1f      	ldr	r2, [pc, #124]	; (8002ff4 <HAL_GPIO_Init+0x354>)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <HAL_GPIO_Init+0x354>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fa0:	4a14      	ldr	r2, [pc, #80]	; (8002ff4 <HAL_GPIO_Init+0x354>)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	61fb      	str	r3, [r7, #28]
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	2b0f      	cmp	r3, #15
 8002fb0:	f67f ae84 	bls.w	8002cbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fb4:	bf00      	nop
 8002fb6:	bf00      	nop
 8002fb8:	3724      	adds	r7, #36	; 0x24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40013800 	.word	0x40013800
 8002fcc:	40020000 	.word	0x40020000
 8002fd0:	40020400 	.word	0x40020400
 8002fd4:	40020800 	.word	0x40020800
 8002fd8:	40020c00 	.word	0x40020c00
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	40021400 	.word	0x40021400
 8002fe4:	40021800 	.word	0x40021800
 8002fe8:	40021c00 	.word	0x40021c00
 8002fec:	40022000 	.word	0x40022000
 8002ff0:	40022400 	.word	0x40022400
 8002ff4:	40013c00 	.word	0x40013c00

08002ff8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	887b      	ldrh	r3, [r7, #2]
 800300a:	4013      	ands	r3, r2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d002      	beq.n	8003016 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003010:	2301      	movs	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
 8003014:	e001      	b.n	800301a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003016:	2300      	movs	r3, #0
 8003018:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800301a:	7bfb      	ldrb	r3, [r7, #15]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	807b      	strh	r3, [r7, #2]
 8003034:	4613      	mov	r3, r2
 8003036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003038:	787b      	ldrb	r3, [r7, #1]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800303e:	887a      	ldrh	r2, [r7, #2]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003044:	e003      	b.n	800304e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003046:	887b      	ldrh	r3, [r7, #2]
 8003048:	041a      	lsls	r2, r3, #16
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	619a      	str	r2, [r3, #24]
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
	...

0800305c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e12b      	b.n	80032c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d106      	bne.n	8003088 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7fe fb3e 	bl	8001704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2224      	movs	r2, #36	; 0x24
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0201 	bic.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030c0:	f001 fb4e 	bl	8004760 <HAL_RCC_GetPCLK1Freq>
 80030c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	4a81      	ldr	r2, [pc, #516]	; (80032d0 <HAL_I2C_Init+0x274>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d807      	bhi.n	80030e0 <HAL_I2C_Init+0x84>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4a80      	ldr	r2, [pc, #512]	; (80032d4 <HAL_I2C_Init+0x278>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	bf94      	ite	ls
 80030d8:	2301      	movls	r3, #1
 80030da:	2300      	movhi	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	e006      	b.n	80030ee <HAL_I2C_Init+0x92>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4a7d      	ldr	r2, [pc, #500]	; (80032d8 <HAL_I2C_Init+0x27c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	bf94      	ite	ls
 80030e8:	2301      	movls	r3, #1
 80030ea:	2300      	movhi	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e0e7      	b.n	80032c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4a78      	ldr	r2, [pc, #480]	; (80032dc <HAL_I2C_Init+0x280>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	0c9b      	lsrs	r3, r3, #18
 8003100:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	430a      	orrs	r2, r1
 8003114:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	4a6a      	ldr	r2, [pc, #424]	; (80032d0 <HAL_I2C_Init+0x274>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d802      	bhi.n	8003130 <HAL_I2C_Init+0xd4>
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	3301      	adds	r3, #1
 800312e:	e009      	b.n	8003144 <HAL_I2C_Init+0xe8>
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003136:	fb02 f303 	mul.w	r3, r2, r3
 800313a:	4a69      	ldr	r2, [pc, #420]	; (80032e0 <HAL_I2C_Init+0x284>)
 800313c:	fba2 2303 	umull	r2, r3, r2, r3
 8003140:	099b      	lsrs	r3, r3, #6
 8003142:	3301      	adds	r3, #1
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	430b      	orrs	r3, r1
 800314a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003156:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	495c      	ldr	r1, [pc, #368]	; (80032d0 <HAL_I2C_Init+0x274>)
 8003160:	428b      	cmp	r3, r1
 8003162:	d819      	bhi.n	8003198 <HAL_I2C_Init+0x13c>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1e59      	subs	r1, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003172:	1c59      	adds	r1, r3, #1
 8003174:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003178:	400b      	ands	r3, r1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <HAL_I2C_Init+0x138>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1e59      	subs	r1, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	fbb1 f3f3 	udiv	r3, r1, r3
 800318c:	3301      	adds	r3, #1
 800318e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003192:	e051      	b.n	8003238 <HAL_I2C_Init+0x1dc>
 8003194:	2304      	movs	r3, #4
 8003196:	e04f      	b.n	8003238 <HAL_I2C_Init+0x1dc>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d111      	bne.n	80031c4 <HAL_I2C_Init+0x168>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1e58      	subs	r0, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	440b      	add	r3, r1
 80031ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b2:	3301      	adds	r3, #1
 80031b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	bf0c      	ite	eq
 80031bc:	2301      	moveq	r3, #1
 80031be:	2300      	movne	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	e012      	b.n	80031ea <HAL_I2C_Init+0x18e>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	1e58      	subs	r0, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6859      	ldr	r1, [r3, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	0099      	lsls	r1, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031da:	3301      	adds	r3, #1
 80031dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	bf0c      	ite	eq
 80031e4:	2301      	moveq	r3, #1
 80031e6:	2300      	movne	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_I2C_Init+0x196>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e022      	b.n	8003238 <HAL_I2C_Init+0x1dc>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10e      	bne.n	8003218 <HAL_I2C_Init+0x1bc>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	1e58      	subs	r0, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6859      	ldr	r1, [r3, #4]
 8003202:	460b      	mov	r3, r1
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	440b      	add	r3, r1
 8003208:	fbb0 f3f3 	udiv	r3, r0, r3
 800320c:	3301      	adds	r3, #1
 800320e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003216:	e00f      	b.n	8003238 <HAL_I2C_Init+0x1dc>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1e58      	subs	r0, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6859      	ldr	r1, [r3, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	0099      	lsls	r1, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	fbb0 f3f3 	udiv	r3, r0, r3
 800322e:	3301      	adds	r3, #1
 8003230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003234:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	6809      	ldr	r1, [r1, #0]
 800323c:	4313      	orrs	r3, r2
 800323e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69da      	ldr	r2, [r3, #28]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003266:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6911      	ldr	r1, [r2, #16]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68d2      	ldr	r2, [r2, #12]
 8003272:	4311      	orrs	r1, r2
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6812      	ldr	r2, [r2, #0]
 8003278:	430b      	orrs	r3, r1
 800327a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695a      	ldr	r2, [r3, #20]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0201 	orr.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	000186a0 	.word	0x000186a0
 80032d4:	001e847f 	.word	0x001e847f
 80032d8:	003d08ff 	.word	0x003d08ff
 80032dc:	431bde83 	.word	0x431bde83
 80032e0:	10624dd3 	.word	0x10624dd3

080032e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b088      	sub	sp, #32
 80032e8:	af02      	add	r7, sp, #8
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	607a      	str	r2, [r7, #4]
 80032ee:	461a      	mov	r2, r3
 80032f0:	460b      	mov	r3, r1
 80032f2:	817b      	strh	r3, [r7, #10]
 80032f4:	4613      	mov	r3, r2
 80032f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032f8:	f7fe fc58 	bl	8001bac <HAL_GetTick>
 80032fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b20      	cmp	r3, #32
 8003308:	f040 80e0 	bne.w	80034cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	2319      	movs	r3, #25
 8003312:	2201      	movs	r2, #1
 8003314:	4970      	ldr	r1, [pc, #448]	; (80034d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 fa92 	bl	8003840 <I2C_WaitOnFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003322:	2302      	movs	r3, #2
 8003324:	e0d3      	b.n	80034ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_I2C_Master_Transmit+0x50>
 8003330:	2302      	movs	r3, #2
 8003332:	e0cc      	b.n	80034ce <HAL_I2C_Master_Transmit+0x1ea>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b01      	cmp	r3, #1
 8003348:	d007      	beq.n	800335a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f042 0201 	orr.w	r2, r2, #1
 8003358:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003368:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2221      	movs	r2, #33	; 0x21
 800336e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2210      	movs	r2, #16
 8003376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	893a      	ldrh	r2, [r7, #8]
 800338a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4a50      	ldr	r2, [pc, #320]	; (80034dc <HAL_I2C_Master_Transmit+0x1f8>)
 800339a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800339c:	8979      	ldrh	r1, [r7, #10]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	6a3a      	ldr	r2, [r7, #32]
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f9ca 	bl	800373c <I2C_MasterRequestWrite>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e08d      	b.n	80034ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b2:	2300      	movs	r3, #0
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033c8:	e066      	b.n	8003498 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	6a39      	ldr	r1, [r7, #32]
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 fb0c 	bl	80039ec <I2C_WaitOnTXEFlagUntilTimeout>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00d      	beq.n	80033f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d107      	bne.n	80033f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e06b      	b.n	80034ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	781a      	ldrb	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b04      	cmp	r3, #4
 8003432:	d11b      	bne.n	800346c <HAL_I2C_Master_Transmit+0x188>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003438:	2b00      	cmp	r3, #0
 800343a:	d017      	beq.n	800346c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	781a      	ldrb	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003456:	b29b      	uxth	r3, r3
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	6a39      	ldr	r1, [r7, #32]
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 fafc 	bl	8003a6e <I2C_WaitOnBTFFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00d      	beq.n	8003498 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	2b04      	cmp	r3, #4
 8003482:	d107      	bne.n	8003494 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003492:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e01a      	b.n	80034ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349c:	2b00      	cmp	r3, #0
 800349e:	d194      	bne.n	80033ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	e000      	b.n	80034ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034cc:	2302      	movs	r3, #2
  }
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	00100002 	.word	0x00100002
 80034dc:	ffff0000 	.word	0xffff0000

080034e0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08a      	sub	sp, #40	; 0x28
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	607a      	str	r2, [r7, #4]
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	460b      	mov	r3, r1
 80034ee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80034f0:	f7fe fb5c 	bl	8001bac <HAL_GetTick>
 80034f4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b20      	cmp	r3, #32
 8003504:	f040 8111 	bne.w	800372a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	2319      	movs	r3, #25
 800350e:	2201      	movs	r2, #1
 8003510:	4988      	ldr	r1, [pc, #544]	; (8003734 <HAL_I2C_IsDeviceReady+0x254>)
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 f994 	bl	8003840 <I2C_WaitOnFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800351e:	2302      	movs	r3, #2
 8003520:	e104      	b.n	800372c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_I2C_IsDeviceReady+0x50>
 800352c:	2302      	movs	r3, #2
 800352e:	e0fd      	b.n	800372c <HAL_I2C_IsDeviceReady+0x24c>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b01      	cmp	r3, #1
 8003544:	d007      	beq.n	8003556 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0201 	orr.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003564:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2224      	movs	r2, #36	; 0x24
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4a70      	ldr	r2, [pc, #448]	; (8003738 <HAL_I2C_IsDeviceReady+0x258>)
 8003578:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003588:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2200      	movs	r2, #0
 8003592:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 f952 	bl	8003840 <I2C_WaitOnFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00d      	beq.n	80035be <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b0:	d103      	bne.n	80035ba <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035b8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e0b6      	b.n	800372c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035be:	897b      	ldrh	r3, [r7, #10]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	461a      	mov	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035cc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80035ce:	f7fe faed 	bl	8001bac <HAL_GetTick>
 80035d2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b02      	cmp	r3, #2
 80035e0:	bf0c      	ite	eq
 80035e2:	2301      	moveq	r3, #1
 80035e4:	2300      	movne	r3, #0
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f8:	bf0c      	ite	eq
 80035fa:	2301      	moveq	r3, #1
 80035fc:	2300      	movne	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003602:	e025      	b.n	8003650 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003604:	f7fe fad2 	bl	8001bac <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d302      	bcc.n	800361a <HAL_I2C_IsDeviceReady+0x13a>
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d103      	bne.n	8003622 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	22a0      	movs	r2, #160	; 0xa0
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b02      	cmp	r3, #2
 800362e:	bf0c      	ite	eq
 8003630:	2301      	moveq	r3, #1
 8003632:	2300      	movne	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003646:	bf0c      	ite	eq
 8003648:	2301      	moveq	r3, #1
 800364a:	2300      	movne	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2ba0      	cmp	r3, #160	; 0xa0
 800365a:	d005      	beq.n	8003668 <HAL_I2C_IsDeviceReady+0x188>
 800365c:	7dfb      	ldrb	r3, [r7, #23]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d102      	bne.n	8003668 <HAL_I2C_IsDeviceReady+0x188>
 8003662:	7dbb      	ldrb	r3, [r7, #22]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0cd      	beq.n	8003604 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b02      	cmp	r3, #2
 800367c:	d129      	bne.n	80036d2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368e:	2300      	movs	r3, #0
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	2319      	movs	r3, #25
 80036aa:	2201      	movs	r2, #1
 80036ac:	4921      	ldr	r1, [pc, #132]	; (8003734 <HAL_I2C_IsDeviceReady+0x254>)
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 f8c6 	bl	8003840 <I2C_WaitOnFlagUntilTimeout>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e036      	b.n	800372c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	e02c      	b.n	800372c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036ea:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	2319      	movs	r3, #25
 80036f2:	2201      	movs	r2, #1
 80036f4:	490f      	ldr	r1, [pc, #60]	; (8003734 <HAL_I2C_IsDeviceReady+0x254>)
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f8a2 	bl	8003840 <I2C_WaitOnFlagUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e012      	b.n	800372c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	3301      	adds	r3, #1
 800370a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	429a      	cmp	r2, r3
 8003712:	f4ff af32 	bcc.w	800357a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2220      	movs	r2, #32
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800372a:	2302      	movs	r3, #2
  }
}
 800372c:	4618      	mov	r0, r3
 800372e:	3720      	adds	r7, #32
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	00100002 	.word	0x00100002
 8003738:	ffff0000 	.word	0xffff0000

0800373c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af02      	add	r7, sp, #8
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	607a      	str	r2, [r7, #4]
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	460b      	mov	r3, r1
 800374a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2b08      	cmp	r3, #8
 8003756:	d006      	beq.n	8003766 <I2C_MasterRequestWrite+0x2a>
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d003      	beq.n	8003766 <I2C_MasterRequestWrite+0x2a>
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003764:	d108      	bne.n	8003778 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	e00b      	b.n	8003790 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	2b12      	cmp	r3, #18
 800377e:	d107      	bne.n	8003790 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800378e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 f84f 	bl	8003840 <I2C_WaitOnFlagUntilTimeout>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00d      	beq.n	80037c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037b6:	d103      	bne.n	80037c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e035      	b.n	8003830 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037cc:	d108      	bne.n	80037e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037ce:	897b      	ldrh	r3, [r7, #10]
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	461a      	mov	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037dc:	611a      	str	r2, [r3, #16]
 80037de:	e01b      	b.n	8003818 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037e0:	897b      	ldrh	r3, [r7, #10]
 80037e2:	11db      	asrs	r3, r3, #7
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	f003 0306 	and.w	r3, r3, #6
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	f063 030f 	orn	r3, r3, #15
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	490e      	ldr	r1, [pc, #56]	; (8003838 <I2C_MasterRequestWrite+0xfc>)
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 f875 	bl	80038ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e010      	b.n	8003830 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800380e:	897b      	ldrh	r3, [r7, #10]
 8003810:	b2da      	uxtb	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	4907      	ldr	r1, [pc, #28]	; (800383c <I2C_MasterRequestWrite+0x100>)
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f865 	bl	80038ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	00010008 	.word	0x00010008
 800383c:	00010002 	.word	0x00010002

08003840 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	603b      	str	r3, [r7, #0]
 800384c:	4613      	mov	r3, r2
 800384e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003850:	e025      	b.n	800389e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003858:	d021      	beq.n	800389e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800385a:	f7fe f9a7 	bl	8001bac <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d302      	bcc.n	8003870 <I2C_WaitOnFlagUntilTimeout+0x30>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d116      	bne.n	800389e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	f043 0220 	orr.w	r2, r3, #32
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e023      	b.n	80038e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	0c1b      	lsrs	r3, r3, #16
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d10d      	bne.n	80038c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	43da      	mvns	r2, r3
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4013      	ands	r3, r2
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	bf0c      	ite	eq
 80038ba:	2301      	moveq	r3, #1
 80038bc:	2300      	movne	r3, #0
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	e00c      	b.n	80038de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	43da      	mvns	r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	4013      	ands	r3, r2
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	bf0c      	ite	eq
 80038d6:	2301      	moveq	r3, #1
 80038d8:	2300      	movne	r3, #0
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	461a      	mov	r2, r3
 80038de:	79fb      	ldrb	r3, [r7, #7]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d0b6      	beq.n	8003852 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	607a      	str	r2, [r7, #4]
 80038fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038fc:	e051      	b.n	80039a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800390c:	d123      	bne.n	8003956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800391c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003926:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f043 0204 	orr.w	r2, r3, #4
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e046      	b.n	80039e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395c:	d021      	beq.n	80039a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800395e:	f7fe f925 	bl	8001bac <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	429a      	cmp	r2, r3
 800396c:	d302      	bcc.n	8003974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d116      	bne.n	80039a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f043 0220 	orr.w	r2, r3, #32
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e020      	b.n	80039e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	0c1b      	lsrs	r3, r3, #16
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d10c      	bne.n	80039c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	43da      	mvns	r2, r3
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4013      	ands	r3, r2
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	bf14      	ite	ne
 80039be:	2301      	movne	r3, #1
 80039c0:	2300      	moveq	r3, #0
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	e00b      	b.n	80039de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	43da      	mvns	r2, r3
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	4013      	ands	r3, r2
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bf14      	ite	ne
 80039d8:	2301      	movne	r3, #1
 80039da:	2300      	moveq	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d18d      	bne.n	80038fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039f8:	e02d      	b.n	8003a56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 f878 	bl	8003af0 <I2C_IsAcknowledgeFailed>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e02d      	b.n	8003a66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a10:	d021      	beq.n	8003a56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a12:	f7fe f8cb 	bl	8001bac <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d302      	bcc.n	8003a28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d116      	bne.n	8003a56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f043 0220 	orr.w	r2, r3, #32
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e007      	b.n	8003a66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a60:	2b80      	cmp	r3, #128	; 0x80
 8003a62:	d1ca      	bne.n	80039fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b084      	sub	sp, #16
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a7a:	e02d      	b.n	8003ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 f837 	bl	8003af0 <I2C_IsAcknowledgeFailed>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e02d      	b.n	8003ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a92:	d021      	beq.n	8003ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a94:	f7fe f88a 	bl	8001bac <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d302      	bcc.n	8003aaa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d116      	bne.n	8003ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	f043 0220 	orr.w	r2, r3, #32
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e007      	b.n	8003ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d1ca      	bne.n	8003a7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b06:	d11b      	bne.n	8003b40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	f043 0204 	orr.w	r2, r3, #4
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e000      	b.n	8003b42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d129      	bne.n	8003bb8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2224      	movs	r2, #36	; 0x24
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0201 	bic.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0210 	bic.w	r2, r2, #16
 8003b8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0201 	orr.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	e000      	b.n	8003bba <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003bb8:	2302      	movs	r3, #2
  }
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b085      	sub	sp, #20
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
 8003bce:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d12a      	bne.n	8003c36 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2224      	movs	r2, #36	; 0x24
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0201 	bic.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003c00:	89fb      	ldrh	r3, [r7, #14]
 8003c02:	f023 030f 	bic.w	r3, r3, #15
 8003c06:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	89fb      	ldrh	r3, [r7, #14]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	89fa      	ldrh	r2, [r7, #14]
 8003c18:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f042 0201 	orr.w	r2, r2, #1
 8003c28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	e000      	b.n	8003c38 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003c36:	2302      	movs	r3, #2
  }
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c46:	b08f      	sub	sp, #60	; 0x3c
 8003c48:	af0a      	add	r7, sp, #40	; 0x28
 8003c4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e10f      	b.n	8003e76 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d106      	bne.n	8003c76 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7fd fe35 	bl	80018e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2203      	movs	r2, #3
 8003c7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d102      	bne.n	8003c90 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f002 f882 	bl	8005d9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	603b      	str	r3, [r7, #0]
 8003ca0:	687e      	ldr	r6, [r7, #4]
 8003ca2:	466d      	mov	r5, sp
 8003ca4:	f106 0410 	add.w	r4, r6, #16
 8003ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cb8:	1d33      	adds	r3, r6, #4
 8003cba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cbc:	6838      	ldr	r0, [r7, #0]
 8003cbe:	f002 f80d 	bl	8005cdc <USB_CoreInit>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0d0      	b.n	8003e76 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2100      	movs	r1, #0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f002 f870 	bl	8005dc0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	73fb      	strb	r3, [r7, #15]
 8003ce4:	e04a      	b.n	8003d7c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ce6:	7bfa      	ldrb	r2, [r7, #15]
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	333d      	adds	r3, #61	; 0x3d
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003cfa:	7bfa      	ldrb	r2, [r7, #15]
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	333c      	adds	r3, #60	; 0x3c
 8003d0a:	7bfa      	ldrb	r2, [r7, #15]
 8003d0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d0e:	7bfa      	ldrb	r2, [r7, #15]
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
 8003d12:	b298      	uxth	r0, r3
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	3344      	adds	r3, #68	; 0x44
 8003d22:	4602      	mov	r2, r0
 8003d24:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d26:	7bfa      	ldrb	r2, [r7, #15]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	3340      	adds	r3, #64	; 0x40
 8003d36:	2200      	movs	r2, #0
 8003d38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d3a:	7bfa      	ldrb	r2, [r7, #15]
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	4413      	add	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	3348      	adds	r3, #72	; 0x48
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d4e:	7bfa      	ldrb	r2, [r7, #15]
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4413      	add	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	334c      	adds	r3, #76	; 0x4c
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d62:	7bfa      	ldrb	r2, [r7, #15]
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	440b      	add	r3, r1
 8003d70:	3354      	adds	r3, #84	; 0x54
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	73fb      	strb	r3, [r7, #15]
 8003d7c:	7bfa      	ldrb	r2, [r7, #15]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d3af      	bcc.n	8003ce6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d86:	2300      	movs	r3, #0
 8003d88:	73fb      	strb	r3, [r7, #15]
 8003d8a:	e044      	b.n	8003e16 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d8c:	7bfa      	ldrb	r2, [r7, #15]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	4413      	add	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003d9e:	2200      	movs	r2, #0
 8003da0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003da2:	7bfa      	ldrb	r2, [r7, #15]
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003db4:	7bfa      	ldrb	r2, [r7, #15]
 8003db6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003db8:	7bfa      	ldrb	r2, [r7, #15]
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003dca:	2200      	movs	r2, #0
 8003dcc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003dce:	7bfa      	ldrb	r2, [r7, #15]
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	440b      	add	r3, r1
 8003ddc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003de4:	7bfa      	ldrb	r2, [r7, #15]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003dfa:	7bfa      	ldrb	r2, [r7, #15]
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	4413      	add	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	440b      	add	r3, r1
 8003e08:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	3301      	adds	r3, #1
 8003e14:	73fb      	strb	r3, [r7, #15]
 8003e16:	7bfa      	ldrb	r2, [r7, #15]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d3b5      	bcc.n	8003d8c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	603b      	str	r3, [r7, #0]
 8003e26:	687e      	ldr	r6, [r7, #4]
 8003e28:	466d      	mov	r5, sp
 8003e2a:	f106 0410 	add.w	r4, r6, #16
 8003e2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e3e:	1d33      	adds	r3, r6, #4
 8003e40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e42:	6838      	ldr	r0, [r7, #0]
 8003e44:	f002 f808 	bl	8005e58 <USB_DevInit>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d005      	beq.n	8003e5a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2202      	movs	r2, #2
 8003e52:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e00d      	b.n	8003e76 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f002 f9d3 	bl	800621a <USB_DevDisconnect>

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003e80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e267      	b.n	8004362 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d075      	beq.n	8003f8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e9e:	4b88      	ldr	r3, [pc, #544]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d00c      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eaa:	4b85      	ldr	r3, [pc, #532]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d112      	bne.n	8003edc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eb6:	4b82      	ldr	r3, [pc, #520]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ec2:	d10b      	bne.n	8003edc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec4:	4b7e      	ldr	r3, [pc, #504]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d05b      	beq.n	8003f88 <HAL_RCC_OscConfig+0x108>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d157      	bne.n	8003f88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e242      	b.n	8004362 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee4:	d106      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x74>
 8003ee6:	4b76      	ldr	r3, [pc, #472]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a75      	ldr	r2, [pc, #468]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 8003eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	e01d      	b.n	8003f30 <HAL_RCC_OscConfig+0xb0>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003efc:	d10c      	bne.n	8003f18 <HAL_RCC_OscConfig+0x98>
 8003efe:	4b70      	ldr	r3, [pc, #448]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a6f      	ldr	r2, [pc, #444]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 8003f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	4b6d      	ldr	r3, [pc, #436]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a6c      	ldr	r2, [pc, #432]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 8003f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	e00b      	b.n	8003f30 <HAL_RCC_OscConfig+0xb0>
 8003f18:	4b69      	ldr	r3, [pc, #420]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a68      	ldr	r2, [pc, #416]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 8003f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	4b66      	ldr	r3, [pc, #408]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a65      	ldr	r2, [pc, #404]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 8003f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d013      	beq.n	8003f60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f38:	f7fd fe38 	bl	8001bac <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f40:	f7fd fe34 	bl	8001bac <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b64      	cmp	r3, #100	; 0x64
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e207      	b.n	8004362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f52:	4b5b      	ldr	r3, [pc, #364]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCC_OscConfig+0xc0>
 8003f5e:	e014      	b.n	8003f8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f60:	f7fd fe24 	bl	8001bac <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f68:	f7fd fe20 	bl	8001bac <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b64      	cmp	r3, #100	; 0x64
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e1f3      	b.n	8004362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f7a:	4b51      	ldr	r3, [pc, #324]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f0      	bne.n	8003f68 <HAL_RCC_OscConfig+0xe8>
 8003f86:	e000      	b.n	8003f8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d063      	beq.n	800405e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f96:	4b4a      	ldr	r3, [pc, #296]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00b      	beq.n	8003fba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fa2:	4b47      	ldr	r3, [pc, #284]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d11c      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fae:	4b44      	ldr	r3, [pc, #272]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d116      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fba:	4b41      	ldr	r3, [pc, #260]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d005      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x152>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d001      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e1c7      	b.n	8004362 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd2:	4b3b      	ldr	r3, [pc, #236]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	4937      	ldr	r1, [pc, #220]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fe6:	e03a      	b.n	800405e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d020      	beq.n	8004032 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff0:	4b34      	ldr	r3, [pc, #208]	; (80040c4 <HAL_RCC_OscConfig+0x244>)
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff6:	f7fd fdd9 	bl	8001bac <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ffe:	f7fd fdd5 	bl	8001bac <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e1a8      	b.n	8004362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004010:	4b2b      	ldr	r3, [pc, #172]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0f0      	beq.n	8003ffe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800401c:	4b28      	ldr	r3, [pc, #160]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	4925      	ldr	r1, [pc, #148]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 800402c:	4313      	orrs	r3, r2
 800402e:	600b      	str	r3, [r1, #0]
 8004030:	e015      	b.n	800405e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004032:	4b24      	ldr	r3, [pc, #144]	; (80040c4 <HAL_RCC_OscConfig+0x244>)
 8004034:	2200      	movs	r2, #0
 8004036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004038:	f7fd fdb8 	bl	8001bac <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004040:	f7fd fdb4 	bl	8001bac <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e187      	b.n	8004362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004052:	4b1b      	ldr	r3, [pc, #108]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f0      	bne.n	8004040 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b00      	cmp	r3, #0
 8004068:	d036      	beq.n	80040d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d016      	beq.n	80040a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004072:	4b15      	ldr	r3, [pc, #84]	; (80040c8 <HAL_RCC_OscConfig+0x248>)
 8004074:	2201      	movs	r2, #1
 8004076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004078:	f7fd fd98 	bl	8001bac <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004080:	f7fd fd94 	bl	8001bac <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e167      	b.n	8004362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004092:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <HAL_RCC_OscConfig+0x240>)
 8004094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0f0      	beq.n	8004080 <HAL_RCC_OscConfig+0x200>
 800409e:	e01b      	b.n	80040d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040a0:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <HAL_RCC_OscConfig+0x248>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040a6:	f7fd fd81 	bl	8001bac <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040ac:	e00e      	b.n	80040cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040ae:	f7fd fd7d 	bl	8001bac <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d907      	bls.n	80040cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e150      	b.n	8004362 <HAL_RCC_OscConfig+0x4e2>
 80040c0:	40023800 	.word	0x40023800
 80040c4:	42470000 	.word	0x42470000
 80040c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040cc:	4b88      	ldr	r3, [pc, #544]	; (80042f0 <HAL_RCC_OscConfig+0x470>)
 80040ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1ea      	bne.n	80040ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 8097 	beq.w	8004214 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040e6:	2300      	movs	r3, #0
 80040e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ea:	4b81      	ldr	r3, [pc, #516]	; (80042f0 <HAL_RCC_OscConfig+0x470>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10f      	bne.n	8004116 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040f6:	2300      	movs	r3, #0
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	4b7d      	ldr	r3, [pc, #500]	; (80042f0 <HAL_RCC_OscConfig+0x470>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	4a7c      	ldr	r2, [pc, #496]	; (80042f0 <HAL_RCC_OscConfig+0x470>)
 8004100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004104:	6413      	str	r3, [r2, #64]	; 0x40
 8004106:	4b7a      	ldr	r3, [pc, #488]	; (80042f0 <HAL_RCC_OscConfig+0x470>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410e:	60bb      	str	r3, [r7, #8]
 8004110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004112:	2301      	movs	r3, #1
 8004114:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004116:	4b77      	ldr	r3, [pc, #476]	; (80042f4 <HAL_RCC_OscConfig+0x474>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411e:	2b00      	cmp	r3, #0
 8004120:	d118      	bne.n	8004154 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004122:	4b74      	ldr	r3, [pc, #464]	; (80042f4 <HAL_RCC_OscConfig+0x474>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a73      	ldr	r2, [pc, #460]	; (80042f4 <HAL_RCC_OscConfig+0x474>)
 8004128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800412c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800412e:	f7fd fd3d 	bl	8001bac <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004136:	f7fd fd39 	bl	8001bac <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e10c      	b.n	8004362 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004148:	4b6a      	ldr	r3, [pc, #424]	; (80042f4 <HAL_RCC_OscConfig+0x474>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0f0      	beq.n	8004136 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d106      	bne.n	800416a <HAL_RCC_OscConfig+0x2ea>
 800415c:	4b64      	ldr	r3, [pc, #400]	; (80042f0 <HAL_RCC_OscConfig+0x470>)
 800415e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004160:	4a63      	ldr	r2, [pc, #396]	; (80042f0 <HAL_RCC_OscConfig+0x470>)
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	6713      	str	r3, [r2, #112]	; 0x70
 8004168:	e01c      	b.n	80041a4 <HAL_RCC_OscConfig+0x324>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	2b05      	cmp	r3, #5
 8004170:	d10c      	bne.n	800418c <HAL_RCC_OscConfig+0x30c>
 8004172:	4b5f      	ldr	r3, [pc, #380]	; (80042f0 <HAL_RCC_OscConfig+0x470>)
 8004174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004176:	4a5e      	ldr	r2, [pc, #376]	; (80042f0 <HAL_RCC_OscConfig+0x470>)
 8004178:	f043 0304 	orr.w	r3, r3, #4
 800417c:	6713      	str	r3, [r2, #112]	; 0x70
 800417e:	4b5c      	ldr	r3, [pc, #368]	; (80042f0 <HAL_RCC_OscConfig+0x470>)
 8004180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004182:	4a5b      	ldr	r2, [pc, #364]	; (80042f0 <HAL_RCC_OscConfig+0x470>)
 8004184:	f043 0301 	orr.w	r3, r3, #1
 8004188:	6713      	str	r3, [r2, #112]	; 0x70
 800418a:	e00b      	b.n	80041a4 <HAL_RCC_OscConfig+0x324>
 800418c:	4b58      	ldr	r3, [pc, #352]	; (80042f0 <HAL_RCC_OscConfig+0x470>)
 800418e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004190:	4a57      	ldr	r2, [pc, #348]	; (80042f0 <HAL_RCC_OscConfig+0x470>)
 8004192:	f023 0301 	bic.w	r3, r3, #1
 8004196:	6713      	str	r3, [r2, #112]	; 0x70
 8004198:	4b55      	ldr	r3, [pc, #340]	; (80042f0 <HAL_RCC_OscConfig+0x470>)
 800419a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419c:	4a54      	ldr	r2, [pc, #336]	; (80042f0 <HAL_RCC_OscConfig+0x470>)
 800419e:	f023 0304 	bic.w	r3, r3, #4
 80041a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d015      	beq.n	80041d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ac:	f7fd fcfe 	bl	8001bac <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b2:	e00a      	b.n	80041ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041b4:	f7fd fcfa 	bl	8001bac <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e0cb      	b.n	8004362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ca:	4b49      	ldr	r3, [pc, #292]	; (80042f0 <HAL_RCC_OscConfig+0x470>)
 80041cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0ee      	beq.n	80041b4 <HAL_RCC_OscConfig+0x334>
 80041d6:	e014      	b.n	8004202 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d8:	f7fd fce8 	bl	8001bac <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041de:	e00a      	b.n	80041f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041e0:	f7fd fce4 	bl	8001bac <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e0b5      	b.n	8004362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041f6:	4b3e      	ldr	r3, [pc, #248]	; (80042f0 <HAL_RCC_OscConfig+0x470>)
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1ee      	bne.n	80041e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004202:	7dfb      	ldrb	r3, [r7, #23]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d105      	bne.n	8004214 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004208:	4b39      	ldr	r3, [pc, #228]	; (80042f0 <HAL_RCC_OscConfig+0x470>)
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	4a38      	ldr	r2, [pc, #224]	; (80042f0 <HAL_RCC_OscConfig+0x470>)
 800420e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004212:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 80a1 	beq.w	8004360 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800421e:	4b34      	ldr	r3, [pc, #208]	; (80042f0 <HAL_RCC_OscConfig+0x470>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 030c 	and.w	r3, r3, #12
 8004226:	2b08      	cmp	r3, #8
 8004228:	d05c      	beq.n	80042e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	2b02      	cmp	r3, #2
 8004230:	d141      	bne.n	80042b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004232:	4b31      	ldr	r3, [pc, #196]	; (80042f8 <HAL_RCC_OscConfig+0x478>)
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004238:	f7fd fcb8 	bl	8001bac <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004240:	f7fd fcb4 	bl	8001bac <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e087      	b.n	8004362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004252:	4b27      	ldr	r3, [pc, #156]	; (80042f0 <HAL_RCC_OscConfig+0x470>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f0      	bne.n	8004240 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69da      	ldr	r2, [r3, #28]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	019b      	lsls	r3, r3, #6
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004274:	085b      	lsrs	r3, r3, #1
 8004276:	3b01      	subs	r3, #1
 8004278:	041b      	lsls	r3, r3, #16
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	061b      	lsls	r3, r3, #24
 8004282:	491b      	ldr	r1, [pc, #108]	; (80042f0 <HAL_RCC_OscConfig+0x470>)
 8004284:	4313      	orrs	r3, r2
 8004286:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004288:	4b1b      	ldr	r3, [pc, #108]	; (80042f8 <HAL_RCC_OscConfig+0x478>)
 800428a:	2201      	movs	r2, #1
 800428c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428e:	f7fd fc8d 	bl	8001bac <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004296:	f7fd fc89 	bl	8001bac <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e05c      	b.n	8004362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a8:	4b11      	ldr	r3, [pc, #68]	; (80042f0 <HAL_RCC_OscConfig+0x470>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0f0      	beq.n	8004296 <HAL_RCC_OscConfig+0x416>
 80042b4:	e054      	b.n	8004360 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b6:	4b10      	ldr	r3, [pc, #64]	; (80042f8 <HAL_RCC_OscConfig+0x478>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042bc:	f7fd fc76 	bl	8001bac <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c4:	f7fd fc72 	bl	8001bac <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e045      	b.n	8004362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d6:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <HAL_RCC_OscConfig+0x470>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1f0      	bne.n	80042c4 <HAL_RCC_OscConfig+0x444>
 80042e2:	e03d      	b.n	8004360 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d107      	bne.n	80042fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e038      	b.n	8004362 <HAL_RCC_OscConfig+0x4e2>
 80042f0:	40023800 	.word	0x40023800
 80042f4:	40007000 	.word	0x40007000
 80042f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042fc:	4b1b      	ldr	r3, [pc, #108]	; (800436c <HAL_RCC_OscConfig+0x4ec>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d028      	beq.n	800435c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004314:	429a      	cmp	r2, r3
 8004316:	d121      	bne.n	800435c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004322:	429a      	cmp	r2, r3
 8004324:	d11a      	bne.n	800435c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800432c:	4013      	ands	r3, r2
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004332:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004334:	4293      	cmp	r3, r2
 8004336:	d111      	bne.n	800435c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004342:	085b      	lsrs	r3, r3, #1
 8004344:	3b01      	subs	r3, #1
 8004346:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004348:	429a      	cmp	r2, r3
 800434a:	d107      	bne.n	800435c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004356:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004358:	429a      	cmp	r2, r3
 800435a:	d001      	beq.n	8004360 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e000      	b.n	8004362 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40023800 	.word	0x40023800

08004370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e0cc      	b.n	800451e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004384:	4b68      	ldr	r3, [pc, #416]	; (8004528 <HAL_RCC_ClockConfig+0x1b8>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 030f 	and.w	r3, r3, #15
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d90c      	bls.n	80043ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004392:	4b65      	ldr	r3, [pc, #404]	; (8004528 <HAL_RCC_ClockConfig+0x1b8>)
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800439a:	4b63      	ldr	r3, [pc, #396]	; (8004528 <HAL_RCC_ClockConfig+0x1b8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d001      	beq.n	80043ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e0b8      	b.n	800451e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d020      	beq.n	80043fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043c4:	4b59      	ldr	r3, [pc, #356]	; (800452c <HAL_RCC_ClockConfig+0x1bc>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	4a58      	ldr	r2, [pc, #352]	; (800452c <HAL_RCC_ClockConfig+0x1bc>)
 80043ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043dc:	4b53      	ldr	r3, [pc, #332]	; (800452c <HAL_RCC_ClockConfig+0x1bc>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	4a52      	ldr	r2, [pc, #328]	; (800452c <HAL_RCC_ClockConfig+0x1bc>)
 80043e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043e8:	4b50      	ldr	r3, [pc, #320]	; (800452c <HAL_RCC_ClockConfig+0x1bc>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	494d      	ldr	r1, [pc, #308]	; (800452c <HAL_RCC_ClockConfig+0x1bc>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d044      	beq.n	8004490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d107      	bne.n	800441e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440e:	4b47      	ldr	r3, [pc, #284]	; (800452c <HAL_RCC_ClockConfig+0x1bc>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d119      	bne.n	800444e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e07f      	b.n	800451e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b02      	cmp	r3, #2
 8004424:	d003      	beq.n	800442e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800442a:	2b03      	cmp	r3, #3
 800442c:	d107      	bne.n	800443e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800442e:	4b3f      	ldr	r3, [pc, #252]	; (800452c <HAL_RCC_ClockConfig+0x1bc>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d109      	bne.n	800444e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e06f      	b.n	800451e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800443e:	4b3b      	ldr	r3, [pc, #236]	; (800452c <HAL_RCC_ClockConfig+0x1bc>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e067      	b.n	800451e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800444e:	4b37      	ldr	r3, [pc, #220]	; (800452c <HAL_RCC_ClockConfig+0x1bc>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f023 0203 	bic.w	r2, r3, #3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	4934      	ldr	r1, [pc, #208]	; (800452c <HAL_RCC_ClockConfig+0x1bc>)
 800445c:	4313      	orrs	r3, r2
 800445e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004460:	f7fd fba4 	bl	8001bac <HAL_GetTick>
 8004464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004466:	e00a      	b.n	800447e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004468:	f7fd fba0 	bl	8001bac <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	f241 3288 	movw	r2, #5000	; 0x1388
 8004476:	4293      	cmp	r3, r2
 8004478:	d901      	bls.n	800447e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e04f      	b.n	800451e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800447e:	4b2b      	ldr	r3, [pc, #172]	; (800452c <HAL_RCC_ClockConfig+0x1bc>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 020c 	and.w	r2, r3, #12
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	429a      	cmp	r2, r3
 800448e:	d1eb      	bne.n	8004468 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004490:	4b25      	ldr	r3, [pc, #148]	; (8004528 <HAL_RCC_ClockConfig+0x1b8>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 030f 	and.w	r3, r3, #15
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d20c      	bcs.n	80044b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800449e:	4b22      	ldr	r3, [pc, #136]	; (8004528 <HAL_RCC_ClockConfig+0x1b8>)
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a6:	4b20      	ldr	r3, [pc, #128]	; (8004528 <HAL_RCC_ClockConfig+0x1b8>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d001      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e032      	b.n	800451e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d008      	beq.n	80044d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044c4:	4b19      	ldr	r3, [pc, #100]	; (800452c <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	4916      	ldr	r1, [pc, #88]	; (800452c <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d009      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044e2:	4b12      	ldr	r3, [pc, #72]	; (800452c <HAL_RCC_ClockConfig+0x1bc>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	490e      	ldr	r1, [pc, #56]	; (800452c <HAL_RCC_ClockConfig+0x1bc>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044f6:	f000 f821 	bl	800453c <HAL_RCC_GetSysClockFreq>
 80044fa:	4602      	mov	r2, r0
 80044fc:	4b0b      	ldr	r3, [pc, #44]	; (800452c <HAL_RCC_ClockConfig+0x1bc>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	091b      	lsrs	r3, r3, #4
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	490a      	ldr	r1, [pc, #40]	; (8004530 <HAL_RCC_ClockConfig+0x1c0>)
 8004508:	5ccb      	ldrb	r3, [r1, r3]
 800450a:	fa22 f303 	lsr.w	r3, r2, r3
 800450e:	4a09      	ldr	r2, [pc, #36]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 8004510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004512:	4b09      	ldr	r3, [pc, #36]	; (8004538 <HAL_RCC_ClockConfig+0x1c8>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f7fd fb04 	bl	8001b24 <HAL_InitTick>

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40023c00 	.word	0x40023c00
 800452c:	40023800 	.word	0x40023800
 8004530:	08006cec 	.word	0x08006cec
 8004534:	20000004 	.word	0x20000004
 8004538:	20000008 	.word	0x20000008

0800453c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800453c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004540:	b094      	sub	sp, #80	; 0x50
 8004542:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	647b      	str	r3, [r7, #68]	; 0x44
 8004548:	2300      	movs	r3, #0
 800454a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800454c:	2300      	movs	r3, #0
 800454e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004554:	4b79      	ldr	r3, [pc, #484]	; (800473c <HAL_RCC_GetSysClockFreq+0x200>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 030c 	and.w	r3, r3, #12
 800455c:	2b08      	cmp	r3, #8
 800455e:	d00d      	beq.n	800457c <HAL_RCC_GetSysClockFreq+0x40>
 8004560:	2b08      	cmp	r3, #8
 8004562:	f200 80e1 	bhi.w	8004728 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <HAL_RCC_GetSysClockFreq+0x34>
 800456a:	2b04      	cmp	r3, #4
 800456c:	d003      	beq.n	8004576 <HAL_RCC_GetSysClockFreq+0x3a>
 800456e:	e0db      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004570:	4b73      	ldr	r3, [pc, #460]	; (8004740 <HAL_RCC_GetSysClockFreq+0x204>)
 8004572:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004574:	e0db      	b.n	800472e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004576:	4b73      	ldr	r3, [pc, #460]	; (8004744 <HAL_RCC_GetSysClockFreq+0x208>)
 8004578:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800457a:	e0d8      	b.n	800472e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800457c:	4b6f      	ldr	r3, [pc, #444]	; (800473c <HAL_RCC_GetSysClockFreq+0x200>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004584:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004586:	4b6d      	ldr	r3, [pc, #436]	; (800473c <HAL_RCC_GetSysClockFreq+0x200>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d063      	beq.n	800465a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004592:	4b6a      	ldr	r3, [pc, #424]	; (800473c <HAL_RCC_GetSysClockFreq+0x200>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	099b      	lsrs	r3, r3, #6
 8004598:	2200      	movs	r2, #0
 800459a:	63bb      	str	r3, [r7, #56]	; 0x38
 800459c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800459e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a4:	633b      	str	r3, [r7, #48]	; 0x30
 80045a6:	2300      	movs	r3, #0
 80045a8:	637b      	str	r3, [r7, #52]	; 0x34
 80045aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80045ae:	4622      	mov	r2, r4
 80045b0:	462b      	mov	r3, r5
 80045b2:	f04f 0000 	mov.w	r0, #0
 80045b6:	f04f 0100 	mov.w	r1, #0
 80045ba:	0159      	lsls	r1, r3, #5
 80045bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045c0:	0150      	lsls	r0, r2, #5
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4621      	mov	r1, r4
 80045c8:	1a51      	subs	r1, r2, r1
 80045ca:	6139      	str	r1, [r7, #16]
 80045cc:	4629      	mov	r1, r5
 80045ce:	eb63 0301 	sbc.w	r3, r3, r1
 80045d2:	617b      	str	r3, [r7, #20]
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	f04f 0300 	mov.w	r3, #0
 80045dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045e0:	4659      	mov	r1, fp
 80045e2:	018b      	lsls	r3, r1, #6
 80045e4:	4651      	mov	r1, sl
 80045e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045ea:	4651      	mov	r1, sl
 80045ec:	018a      	lsls	r2, r1, #6
 80045ee:	4651      	mov	r1, sl
 80045f0:	ebb2 0801 	subs.w	r8, r2, r1
 80045f4:	4659      	mov	r1, fp
 80045f6:	eb63 0901 	sbc.w	r9, r3, r1
 80045fa:	f04f 0200 	mov.w	r2, #0
 80045fe:	f04f 0300 	mov.w	r3, #0
 8004602:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004606:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800460a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800460e:	4690      	mov	r8, r2
 8004610:	4699      	mov	r9, r3
 8004612:	4623      	mov	r3, r4
 8004614:	eb18 0303 	adds.w	r3, r8, r3
 8004618:	60bb      	str	r3, [r7, #8]
 800461a:	462b      	mov	r3, r5
 800461c:	eb49 0303 	adc.w	r3, r9, r3
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	f04f 0200 	mov.w	r2, #0
 8004626:	f04f 0300 	mov.w	r3, #0
 800462a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800462e:	4629      	mov	r1, r5
 8004630:	024b      	lsls	r3, r1, #9
 8004632:	4621      	mov	r1, r4
 8004634:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004638:	4621      	mov	r1, r4
 800463a:	024a      	lsls	r2, r1, #9
 800463c:	4610      	mov	r0, r2
 800463e:	4619      	mov	r1, r3
 8004640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004642:	2200      	movs	r2, #0
 8004644:	62bb      	str	r3, [r7, #40]	; 0x28
 8004646:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004648:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800464c:	f7fb fe20 	bl	8000290 <__aeabi_uldivmod>
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	4613      	mov	r3, r2
 8004656:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004658:	e058      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800465a:	4b38      	ldr	r3, [pc, #224]	; (800473c <HAL_RCC_GetSysClockFreq+0x200>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	099b      	lsrs	r3, r3, #6
 8004660:	2200      	movs	r2, #0
 8004662:	4618      	mov	r0, r3
 8004664:	4611      	mov	r1, r2
 8004666:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800466a:	623b      	str	r3, [r7, #32]
 800466c:	2300      	movs	r3, #0
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
 8004670:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004674:	4642      	mov	r2, r8
 8004676:	464b      	mov	r3, r9
 8004678:	f04f 0000 	mov.w	r0, #0
 800467c:	f04f 0100 	mov.w	r1, #0
 8004680:	0159      	lsls	r1, r3, #5
 8004682:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004686:	0150      	lsls	r0, r2, #5
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	4641      	mov	r1, r8
 800468e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004692:	4649      	mov	r1, r9
 8004694:	eb63 0b01 	sbc.w	fp, r3, r1
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046ac:	ebb2 040a 	subs.w	r4, r2, sl
 80046b0:	eb63 050b 	sbc.w	r5, r3, fp
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	f04f 0300 	mov.w	r3, #0
 80046bc:	00eb      	lsls	r3, r5, #3
 80046be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046c2:	00e2      	lsls	r2, r4, #3
 80046c4:	4614      	mov	r4, r2
 80046c6:	461d      	mov	r5, r3
 80046c8:	4643      	mov	r3, r8
 80046ca:	18e3      	adds	r3, r4, r3
 80046cc:	603b      	str	r3, [r7, #0]
 80046ce:	464b      	mov	r3, r9
 80046d0:	eb45 0303 	adc.w	r3, r5, r3
 80046d4:	607b      	str	r3, [r7, #4]
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046e2:	4629      	mov	r1, r5
 80046e4:	028b      	lsls	r3, r1, #10
 80046e6:	4621      	mov	r1, r4
 80046e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046ec:	4621      	mov	r1, r4
 80046ee:	028a      	lsls	r2, r1, #10
 80046f0:	4610      	mov	r0, r2
 80046f2:	4619      	mov	r1, r3
 80046f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046f6:	2200      	movs	r2, #0
 80046f8:	61bb      	str	r3, [r7, #24]
 80046fa:	61fa      	str	r2, [r7, #28]
 80046fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004700:	f7fb fdc6 	bl	8000290 <__aeabi_uldivmod>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4613      	mov	r3, r2
 800470a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800470c:	4b0b      	ldr	r3, [pc, #44]	; (800473c <HAL_RCC_GetSysClockFreq+0x200>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	0c1b      	lsrs	r3, r3, #16
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	3301      	adds	r3, #1
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800471c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800471e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004720:	fbb2 f3f3 	udiv	r3, r2, r3
 8004724:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004726:	e002      	b.n	800472e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004728:	4b05      	ldr	r3, [pc, #20]	; (8004740 <HAL_RCC_GetSysClockFreq+0x204>)
 800472a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800472c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800472e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004730:	4618      	mov	r0, r3
 8004732:	3750      	adds	r7, #80	; 0x50
 8004734:	46bd      	mov	sp, r7
 8004736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800473a:	bf00      	nop
 800473c:	40023800 	.word	0x40023800
 8004740:	00f42400 	.word	0x00f42400
 8004744:	007a1200 	.word	0x007a1200

08004748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004748:	b480      	push	{r7}
 800474a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800474c:	4b03      	ldr	r3, [pc, #12]	; (800475c <HAL_RCC_GetHCLKFreq+0x14>)
 800474e:	681b      	ldr	r3, [r3, #0]
}
 8004750:	4618      	mov	r0, r3
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	20000004 	.word	0x20000004

08004760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004764:	f7ff fff0 	bl	8004748 <HAL_RCC_GetHCLKFreq>
 8004768:	4602      	mov	r2, r0
 800476a:	4b05      	ldr	r3, [pc, #20]	; (8004780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	0a9b      	lsrs	r3, r3, #10
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	4903      	ldr	r1, [pc, #12]	; (8004784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004776:	5ccb      	ldrb	r3, [r1, r3]
 8004778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800477c:	4618      	mov	r0, r3
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40023800 	.word	0x40023800
 8004784:	08006cfc 	.word	0x08006cfc

08004788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800478c:	f7ff ffdc 	bl	8004748 <HAL_RCC_GetHCLKFreq>
 8004790:	4602      	mov	r2, r0
 8004792:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	0b5b      	lsrs	r3, r3, #13
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	4903      	ldr	r1, [pc, #12]	; (80047ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800479e:	5ccb      	ldrb	r3, [r1, r3]
 80047a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40023800 	.word	0x40023800
 80047ac:	08006cfc 	.word	0x08006cfc

080047b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e041      	b.n	8004846 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d106      	bne.n	80047dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7fc ffdc 	bl	8001794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	3304      	adds	r3, #4
 80047ec:	4619      	mov	r1, r3
 80047ee:	4610      	mov	r0, r2
 80047f0:	f000 fc12 	bl	8005018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b082      	sub	sp, #8
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e041      	b.n	80048e4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d106      	bne.n	800487a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f839 	bl	80048ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2202      	movs	r2, #2
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3304      	adds	r3, #4
 800488a:	4619      	mov	r1, r3
 800488c:	4610      	mov	r0, r2
 800488e:	f000 fbc3 	bl	8005018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d109      	bne.n	8004924 <HAL_TIM_PWM_Start+0x24>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b01      	cmp	r3, #1
 800491a:	bf14      	ite	ne
 800491c:	2301      	movne	r3, #1
 800491e:	2300      	moveq	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	e022      	b.n	800496a <HAL_TIM_PWM_Start+0x6a>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2b04      	cmp	r3, #4
 8004928:	d109      	bne.n	800493e <HAL_TIM_PWM_Start+0x3e>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b01      	cmp	r3, #1
 8004934:	bf14      	ite	ne
 8004936:	2301      	movne	r3, #1
 8004938:	2300      	moveq	r3, #0
 800493a:	b2db      	uxtb	r3, r3
 800493c:	e015      	b.n	800496a <HAL_TIM_PWM_Start+0x6a>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b08      	cmp	r3, #8
 8004942:	d109      	bne.n	8004958 <HAL_TIM_PWM_Start+0x58>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b01      	cmp	r3, #1
 800494e:	bf14      	ite	ne
 8004950:	2301      	movne	r3, #1
 8004952:	2300      	moveq	r3, #0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	e008      	b.n	800496a <HAL_TIM_PWM_Start+0x6a>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b01      	cmp	r3, #1
 8004962:	bf14      	ite	ne
 8004964:	2301      	movne	r3, #1
 8004966:	2300      	moveq	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e07c      	b.n	8004a6c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d104      	bne.n	8004982 <HAL_TIM_PWM_Start+0x82>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004980:	e013      	b.n	80049aa <HAL_TIM_PWM_Start+0xaa>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b04      	cmp	r3, #4
 8004986:	d104      	bne.n	8004992 <HAL_TIM_PWM_Start+0x92>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004990:	e00b      	b.n	80049aa <HAL_TIM_PWM_Start+0xaa>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b08      	cmp	r3, #8
 8004996:	d104      	bne.n	80049a2 <HAL_TIM_PWM_Start+0xa2>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049a0:	e003      	b.n	80049aa <HAL_TIM_PWM_Start+0xaa>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2202      	movs	r2, #2
 80049a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2201      	movs	r2, #1
 80049b0:	6839      	ldr	r1, [r7, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fe1a 	bl	80055ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a2d      	ldr	r2, [pc, #180]	; (8004a74 <HAL_TIM_PWM_Start+0x174>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d004      	beq.n	80049cc <HAL_TIM_PWM_Start+0xcc>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a2c      	ldr	r2, [pc, #176]	; (8004a78 <HAL_TIM_PWM_Start+0x178>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d101      	bne.n	80049d0 <HAL_TIM_PWM_Start+0xd0>
 80049cc:	2301      	movs	r3, #1
 80049ce:	e000      	b.n	80049d2 <HAL_TIM_PWM_Start+0xd2>
 80049d0:	2300      	movs	r3, #0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d007      	beq.n	80049e6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a22      	ldr	r2, [pc, #136]	; (8004a74 <HAL_TIM_PWM_Start+0x174>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d022      	beq.n	8004a36 <HAL_TIM_PWM_Start+0x136>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f8:	d01d      	beq.n	8004a36 <HAL_TIM_PWM_Start+0x136>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a1f      	ldr	r2, [pc, #124]	; (8004a7c <HAL_TIM_PWM_Start+0x17c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d018      	beq.n	8004a36 <HAL_TIM_PWM_Start+0x136>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a1d      	ldr	r2, [pc, #116]	; (8004a80 <HAL_TIM_PWM_Start+0x180>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d013      	beq.n	8004a36 <HAL_TIM_PWM_Start+0x136>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a1c      	ldr	r2, [pc, #112]	; (8004a84 <HAL_TIM_PWM_Start+0x184>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00e      	beq.n	8004a36 <HAL_TIM_PWM_Start+0x136>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a16      	ldr	r2, [pc, #88]	; (8004a78 <HAL_TIM_PWM_Start+0x178>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d009      	beq.n	8004a36 <HAL_TIM_PWM_Start+0x136>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a18      	ldr	r2, [pc, #96]	; (8004a88 <HAL_TIM_PWM_Start+0x188>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d004      	beq.n	8004a36 <HAL_TIM_PWM_Start+0x136>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a16      	ldr	r2, [pc, #88]	; (8004a8c <HAL_TIM_PWM_Start+0x18c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d111      	bne.n	8004a5a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2b06      	cmp	r3, #6
 8004a46:	d010      	beq.n	8004a6a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0201 	orr.w	r2, r2, #1
 8004a56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a58:	e007      	b.n	8004a6a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f042 0201 	orr.w	r2, r2, #1
 8004a68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40010000 	.word	0x40010000
 8004a78:	40010400 	.word	0x40010400
 8004a7c:	40000400 	.word	0x40000400
 8004a80:	40000800 	.word	0x40000800
 8004a84:	40000c00 	.word	0x40000c00
 8004a88:	40014000 	.word	0x40014000
 8004a8c:	40001800 	.word	0x40001800

08004a90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d122      	bne.n	8004aec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d11b      	bne.n	8004aec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f06f 0202 	mvn.w	r2, #2
 8004abc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 fa81 	bl	8004fda <HAL_TIM_IC_CaptureCallback>
 8004ad8:	e005      	b.n	8004ae6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fa73 	bl	8004fc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 fa84 	bl	8004fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d122      	bne.n	8004b40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d11b      	bne.n	8004b40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f06f 0204 	mvn.w	r2, #4
 8004b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2202      	movs	r2, #2
 8004b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fa57 	bl	8004fda <HAL_TIM_IC_CaptureCallback>
 8004b2c:	e005      	b.n	8004b3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fa49 	bl	8004fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 fa5a 	bl	8004fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	f003 0308 	and.w	r3, r3, #8
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d122      	bne.n	8004b94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f003 0308 	and.w	r3, r3, #8
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	d11b      	bne.n	8004b94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f06f 0208 	mvn.w	r2, #8
 8004b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2204      	movs	r2, #4
 8004b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fa2d 	bl	8004fda <HAL_TIM_IC_CaptureCallback>
 8004b80:	e005      	b.n	8004b8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fa1f 	bl	8004fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 fa30 	bl	8004fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f003 0310 	and.w	r3, r3, #16
 8004b9e:	2b10      	cmp	r3, #16
 8004ba0:	d122      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f003 0310 	and.w	r3, r3, #16
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d11b      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0210 	mvn.w	r2, #16
 8004bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2208      	movs	r2, #8
 8004bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fa03 	bl	8004fda <HAL_TIM_IC_CaptureCallback>
 8004bd4:	e005      	b.n	8004be2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f9f5 	bl	8004fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fa06 	bl	8004fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d10e      	bne.n	8004c14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d107      	bne.n	8004c14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0201 	mvn.w	r2, #1
 8004c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f9cf 	bl	8004fb2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1e:	2b80      	cmp	r3, #128	; 0x80
 8004c20:	d10e      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2c:	2b80      	cmp	r3, #128	; 0x80
 8004c2e:	d107      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fd82 	bl	8005744 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4a:	2b40      	cmp	r3, #64	; 0x40
 8004c4c:	d10e      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c58:	2b40      	cmp	r3, #64	; 0x40
 8004c5a:	d107      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f9cb 	bl	8005002 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 0320 	and.w	r3, r3, #32
 8004c76:	2b20      	cmp	r3, #32
 8004c78:	d10e      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f003 0320 	and.w	r3, r3, #32
 8004c84:	2b20      	cmp	r3, #32
 8004c86:	d107      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0220 	mvn.w	r2, #32
 8004c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fd4c 	bl	8005730 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c98:	bf00      	nop
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cac:	2300      	movs	r3, #0
 8004cae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d101      	bne.n	8004cbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	e0ae      	b.n	8004e1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b0c      	cmp	r3, #12
 8004cca:	f200 809f 	bhi.w	8004e0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004cce:	a201      	add	r2, pc, #4	; (adr r2, 8004cd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd4:	08004d09 	.word	0x08004d09
 8004cd8:	08004e0d 	.word	0x08004e0d
 8004cdc:	08004e0d 	.word	0x08004e0d
 8004ce0:	08004e0d 	.word	0x08004e0d
 8004ce4:	08004d49 	.word	0x08004d49
 8004ce8:	08004e0d 	.word	0x08004e0d
 8004cec:	08004e0d 	.word	0x08004e0d
 8004cf0:	08004e0d 	.word	0x08004e0d
 8004cf4:	08004d8b 	.word	0x08004d8b
 8004cf8:	08004e0d 	.word	0x08004e0d
 8004cfc:	08004e0d 	.word	0x08004e0d
 8004d00:	08004e0d 	.word	0x08004e0d
 8004d04:	08004dcb 	.word	0x08004dcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68b9      	ldr	r1, [r7, #8]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fa22 	bl	8005158 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699a      	ldr	r2, [r3, #24]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0208 	orr.w	r2, r2, #8
 8004d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699a      	ldr	r2, [r3, #24]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0204 	bic.w	r2, r2, #4
 8004d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6999      	ldr	r1, [r3, #24]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	691a      	ldr	r2, [r3, #16]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	619a      	str	r2, [r3, #24]
      break;
 8004d46:	e064      	b.n	8004e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68b9      	ldr	r1, [r7, #8]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fa72 	bl	8005238 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699a      	ldr	r2, [r3, #24]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699a      	ldr	r2, [r3, #24]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6999      	ldr	r1, [r3, #24]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	021a      	lsls	r2, r3, #8
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	619a      	str	r2, [r3, #24]
      break;
 8004d88:	e043      	b.n	8004e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68b9      	ldr	r1, [r7, #8]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fac7 	bl	8005324 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69da      	ldr	r2, [r3, #28]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f042 0208 	orr.w	r2, r2, #8
 8004da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	69da      	ldr	r2, [r3, #28]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0204 	bic.w	r2, r2, #4
 8004db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	69d9      	ldr	r1, [r3, #28]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	691a      	ldr	r2, [r3, #16]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	61da      	str	r2, [r3, #28]
      break;
 8004dc8:	e023      	b.n	8004e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68b9      	ldr	r1, [r7, #8]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 fb1b 	bl	800540c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69da      	ldr	r2, [r3, #28]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004de4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	69da      	ldr	r2, [r3, #28]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69d9      	ldr	r1, [r3, #28]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	021a      	lsls	r2, r3, #8
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	61da      	str	r2, [r3, #28]
      break;
 8004e0a:	e002      	b.n	8004e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d101      	bne.n	8004e40 <HAL_TIM_ConfigClockSource+0x1c>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e0b4      	b.n	8004faa <HAL_TIM_ConfigClockSource+0x186>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e78:	d03e      	beq.n	8004ef8 <HAL_TIM_ConfigClockSource+0xd4>
 8004e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e7e:	f200 8087 	bhi.w	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e86:	f000 8086 	beq.w	8004f96 <HAL_TIM_ConfigClockSource+0x172>
 8004e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e8e:	d87f      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004e90:	2b70      	cmp	r3, #112	; 0x70
 8004e92:	d01a      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0xa6>
 8004e94:	2b70      	cmp	r3, #112	; 0x70
 8004e96:	d87b      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004e98:	2b60      	cmp	r3, #96	; 0x60
 8004e9a:	d050      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0x11a>
 8004e9c:	2b60      	cmp	r3, #96	; 0x60
 8004e9e:	d877      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea0:	2b50      	cmp	r3, #80	; 0x50
 8004ea2:	d03c      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0xfa>
 8004ea4:	2b50      	cmp	r3, #80	; 0x50
 8004ea6:	d873      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea8:	2b40      	cmp	r3, #64	; 0x40
 8004eaa:	d058      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0x13a>
 8004eac:	2b40      	cmp	r3, #64	; 0x40
 8004eae:	d86f      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb0:	2b30      	cmp	r3, #48	; 0x30
 8004eb2:	d064      	beq.n	8004f7e <HAL_TIM_ConfigClockSource+0x15a>
 8004eb4:	2b30      	cmp	r3, #48	; 0x30
 8004eb6:	d86b      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb8:	2b20      	cmp	r3, #32
 8004eba:	d060      	beq.n	8004f7e <HAL_TIM_ConfigClockSource+0x15a>
 8004ebc:	2b20      	cmp	r3, #32
 8004ebe:	d867      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d05c      	beq.n	8004f7e <HAL_TIM_ConfigClockSource+0x15a>
 8004ec4:	2b10      	cmp	r3, #16
 8004ec6:	d05a      	beq.n	8004f7e <HAL_TIM_ConfigClockSource+0x15a>
 8004ec8:	e062      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	6899      	ldr	r1, [r3, #8]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f000 fb67 	bl	80055ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004eec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	609a      	str	r2, [r3, #8]
      break;
 8004ef6:	e04f      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6818      	ldr	r0, [r3, #0]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	6899      	ldr	r1, [r3, #8]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f000 fb50 	bl	80055ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f1a:	609a      	str	r2, [r3, #8]
      break;
 8004f1c:	e03c      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6818      	ldr	r0, [r3, #0]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	6859      	ldr	r1, [r3, #4]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f000 fac4 	bl	80054b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2150      	movs	r1, #80	; 0x50
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fb1d 	bl	8005576 <TIM_ITRx_SetConfig>
      break;
 8004f3c:	e02c      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6818      	ldr	r0, [r3, #0]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	6859      	ldr	r1, [r3, #4]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f000 fae3 	bl	8005516 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2160      	movs	r1, #96	; 0x60
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 fb0d 	bl	8005576 <TIM_ITRx_SetConfig>
      break;
 8004f5c:	e01c      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6818      	ldr	r0, [r3, #0]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	6859      	ldr	r1, [r3, #4]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f000 faa4 	bl	80054b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2140      	movs	r1, #64	; 0x40
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 fafd 	bl	8005576 <TIM_ITRx_SetConfig>
      break;
 8004f7c:	e00c      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4619      	mov	r1, r3
 8004f88:	4610      	mov	r0, r2
 8004f8a:	f000 faf4 	bl	8005576 <TIM_ITRx_SetConfig>
      break;
 8004f8e:	e003      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	73fb      	strb	r3, [r7, #15]
      break;
 8004f94:	e000      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
	...

08005018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a40      	ldr	r2, [pc, #256]	; (800512c <TIM_Base_SetConfig+0x114>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d013      	beq.n	8005058 <TIM_Base_SetConfig+0x40>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005036:	d00f      	beq.n	8005058 <TIM_Base_SetConfig+0x40>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a3d      	ldr	r2, [pc, #244]	; (8005130 <TIM_Base_SetConfig+0x118>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d00b      	beq.n	8005058 <TIM_Base_SetConfig+0x40>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a3c      	ldr	r2, [pc, #240]	; (8005134 <TIM_Base_SetConfig+0x11c>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d007      	beq.n	8005058 <TIM_Base_SetConfig+0x40>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a3b      	ldr	r2, [pc, #236]	; (8005138 <TIM_Base_SetConfig+0x120>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d003      	beq.n	8005058 <TIM_Base_SetConfig+0x40>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a3a      	ldr	r2, [pc, #232]	; (800513c <TIM_Base_SetConfig+0x124>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d108      	bne.n	800506a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a2f      	ldr	r2, [pc, #188]	; (800512c <TIM_Base_SetConfig+0x114>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d02b      	beq.n	80050ca <TIM_Base_SetConfig+0xb2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005078:	d027      	beq.n	80050ca <TIM_Base_SetConfig+0xb2>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a2c      	ldr	r2, [pc, #176]	; (8005130 <TIM_Base_SetConfig+0x118>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d023      	beq.n	80050ca <TIM_Base_SetConfig+0xb2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a2b      	ldr	r2, [pc, #172]	; (8005134 <TIM_Base_SetConfig+0x11c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d01f      	beq.n	80050ca <TIM_Base_SetConfig+0xb2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a2a      	ldr	r2, [pc, #168]	; (8005138 <TIM_Base_SetConfig+0x120>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d01b      	beq.n	80050ca <TIM_Base_SetConfig+0xb2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a29      	ldr	r2, [pc, #164]	; (800513c <TIM_Base_SetConfig+0x124>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d017      	beq.n	80050ca <TIM_Base_SetConfig+0xb2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a28      	ldr	r2, [pc, #160]	; (8005140 <TIM_Base_SetConfig+0x128>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d013      	beq.n	80050ca <TIM_Base_SetConfig+0xb2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a27      	ldr	r2, [pc, #156]	; (8005144 <TIM_Base_SetConfig+0x12c>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00f      	beq.n	80050ca <TIM_Base_SetConfig+0xb2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a26      	ldr	r2, [pc, #152]	; (8005148 <TIM_Base_SetConfig+0x130>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d00b      	beq.n	80050ca <TIM_Base_SetConfig+0xb2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a25      	ldr	r2, [pc, #148]	; (800514c <TIM_Base_SetConfig+0x134>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d007      	beq.n	80050ca <TIM_Base_SetConfig+0xb2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a24      	ldr	r2, [pc, #144]	; (8005150 <TIM_Base_SetConfig+0x138>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d003      	beq.n	80050ca <TIM_Base_SetConfig+0xb2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a23      	ldr	r2, [pc, #140]	; (8005154 <TIM_Base_SetConfig+0x13c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d108      	bne.n	80050dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	4313      	orrs	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a0a      	ldr	r2, [pc, #40]	; (800512c <TIM_Base_SetConfig+0x114>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d003      	beq.n	8005110 <TIM_Base_SetConfig+0xf8>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a0c      	ldr	r2, [pc, #48]	; (800513c <TIM_Base_SetConfig+0x124>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d103      	bne.n	8005118 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	691a      	ldr	r2, [r3, #16]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	615a      	str	r2, [r3, #20]
}
 800511e:	bf00      	nop
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40010000 	.word	0x40010000
 8005130:	40000400 	.word	0x40000400
 8005134:	40000800 	.word	0x40000800
 8005138:	40000c00 	.word	0x40000c00
 800513c:	40010400 	.word	0x40010400
 8005140:	40014000 	.word	0x40014000
 8005144:	40014400 	.word	0x40014400
 8005148:	40014800 	.word	0x40014800
 800514c:	40001800 	.word	0x40001800
 8005150:	40001c00 	.word	0x40001c00
 8005154:	40002000 	.word	0x40002000

08005158 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	f023 0201 	bic.w	r2, r3, #1
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f023 0303 	bic.w	r3, r3, #3
 800518e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f023 0302 	bic.w	r3, r3, #2
 80051a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a20      	ldr	r2, [pc, #128]	; (8005230 <TIM_OC1_SetConfig+0xd8>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d003      	beq.n	80051bc <TIM_OC1_SetConfig+0x64>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a1f      	ldr	r2, [pc, #124]	; (8005234 <TIM_OC1_SetConfig+0xdc>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d10c      	bne.n	80051d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f023 0308 	bic.w	r3, r3, #8
 80051c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f023 0304 	bic.w	r3, r3, #4
 80051d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a15      	ldr	r2, [pc, #84]	; (8005230 <TIM_OC1_SetConfig+0xd8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d003      	beq.n	80051e6 <TIM_OC1_SetConfig+0x8e>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a14      	ldr	r2, [pc, #80]	; (8005234 <TIM_OC1_SetConfig+0xdc>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d111      	bne.n	800520a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	4313      	orrs	r3, r2
 8005208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	621a      	str	r2, [r3, #32]
}
 8005224:	bf00      	nop
 8005226:	371c      	adds	r7, #28
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	40010000 	.word	0x40010000
 8005234:	40010400 	.word	0x40010400

08005238 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	f023 0210 	bic.w	r2, r3, #16
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800526e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	021b      	lsls	r3, r3, #8
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4313      	orrs	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f023 0320 	bic.w	r3, r3, #32
 8005282:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	4313      	orrs	r3, r2
 800528e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a22      	ldr	r2, [pc, #136]	; (800531c <TIM_OC2_SetConfig+0xe4>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d003      	beq.n	80052a0 <TIM_OC2_SetConfig+0x68>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a21      	ldr	r2, [pc, #132]	; (8005320 <TIM_OC2_SetConfig+0xe8>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d10d      	bne.n	80052bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a17      	ldr	r2, [pc, #92]	; (800531c <TIM_OC2_SetConfig+0xe4>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d003      	beq.n	80052cc <TIM_OC2_SetConfig+0x94>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a16      	ldr	r2, [pc, #88]	; (8005320 <TIM_OC2_SetConfig+0xe8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d113      	bne.n	80052f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	621a      	str	r2, [r3, #32]
}
 800530e:	bf00      	nop
 8005310:	371c      	adds	r7, #28
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	40010000 	.word	0x40010000
 8005320:	40010400 	.word	0x40010400

08005324 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 0303 	bic.w	r3, r3, #3
 800535a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800536c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	021b      	lsls	r3, r3, #8
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	4313      	orrs	r3, r2
 8005378:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a21      	ldr	r2, [pc, #132]	; (8005404 <TIM_OC3_SetConfig+0xe0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d003      	beq.n	800538a <TIM_OC3_SetConfig+0x66>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a20      	ldr	r2, [pc, #128]	; (8005408 <TIM_OC3_SetConfig+0xe4>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d10d      	bne.n	80053a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005390:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	021b      	lsls	r3, r3, #8
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	4313      	orrs	r3, r2
 800539c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a16      	ldr	r2, [pc, #88]	; (8005404 <TIM_OC3_SetConfig+0xe0>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d003      	beq.n	80053b6 <TIM_OC3_SetConfig+0x92>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a15      	ldr	r2, [pc, #84]	; (8005408 <TIM_OC3_SetConfig+0xe4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d113      	bne.n	80053de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	621a      	str	r2, [r3, #32]
}
 80053f8:	bf00      	nop
 80053fa:	371c      	adds	r7, #28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	40010000 	.word	0x40010000
 8005408:	40010400 	.word	0x40010400

0800540c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800543a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	021b      	lsls	r3, r3, #8
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	4313      	orrs	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005456:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	031b      	lsls	r3, r3, #12
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	4313      	orrs	r3, r2
 8005462:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a12      	ldr	r2, [pc, #72]	; (80054b0 <TIM_OC4_SetConfig+0xa4>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d003      	beq.n	8005474 <TIM_OC4_SetConfig+0x68>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a11      	ldr	r2, [pc, #68]	; (80054b4 <TIM_OC4_SetConfig+0xa8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d109      	bne.n	8005488 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800547a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	019b      	lsls	r3, r3, #6
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	4313      	orrs	r3, r2
 8005486:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	621a      	str	r2, [r3, #32]
}
 80054a2:	bf00      	nop
 80054a4:	371c      	adds	r7, #28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	40010000 	.word	0x40010000
 80054b4:	40010400 	.word	0x40010400

080054b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	f023 0201 	bic.w	r2, r3, #1
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f023 030a 	bic.w	r3, r3, #10
 80054f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	621a      	str	r2, [r3, #32]
}
 800550a:	bf00      	nop
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005516:	b480      	push	{r7}
 8005518:	b087      	sub	sp, #28
 800551a:	af00      	add	r7, sp, #0
 800551c:	60f8      	str	r0, [r7, #12]
 800551e:	60b9      	str	r1, [r7, #8]
 8005520:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f023 0210 	bic.w	r2, r3, #16
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005540:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	031b      	lsls	r3, r3, #12
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005552:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	011b      	lsls	r3, r3, #4
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	621a      	str	r2, [r3, #32]
}
 800556a:	bf00      	nop
 800556c:	371c      	adds	r7, #28
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005576:	b480      	push	{r7}
 8005578:	b085      	sub	sp, #20
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
 800557e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4313      	orrs	r3, r2
 8005594:	f043 0307 	orr.w	r3, r3, #7
 8005598:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	609a      	str	r2, [r3, #8]
}
 80055a0:	bf00      	nop
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	021a      	lsls	r2, r3, #8
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	431a      	orrs	r2, r3
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	609a      	str	r2, [r3, #8]
}
 80055e0:	bf00      	nop
 80055e2:	371c      	adds	r7, #28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f003 031f 	and.w	r3, r3, #31
 80055fe:	2201      	movs	r2, #1
 8005600:	fa02 f303 	lsl.w	r3, r2, r3
 8005604:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6a1a      	ldr	r2, [r3, #32]
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	43db      	mvns	r3, r3
 800560e:	401a      	ands	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6a1a      	ldr	r2, [r3, #32]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f003 031f 	and.w	r3, r3, #31
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	fa01 f303 	lsl.w	r3, r1, r3
 8005624:	431a      	orrs	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	621a      	str	r2, [r3, #32]
}
 800562a:	bf00      	nop
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
	...

08005638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005648:	2b01      	cmp	r3, #1
 800564a:	d101      	bne.n	8005650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800564c:	2302      	movs	r3, #2
 800564e:	e05a      	b.n	8005706 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005676:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	4313      	orrs	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a21      	ldr	r2, [pc, #132]	; (8005714 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d022      	beq.n	80056da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800569c:	d01d      	beq.n	80056da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a1d      	ldr	r2, [pc, #116]	; (8005718 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d018      	beq.n	80056da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a1b      	ldr	r2, [pc, #108]	; (800571c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d013      	beq.n	80056da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a1a      	ldr	r2, [pc, #104]	; (8005720 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00e      	beq.n	80056da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a18      	ldr	r2, [pc, #96]	; (8005724 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d009      	beq.n	80056da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a17      	ldr	r2, [pc, #92]	; (8005728 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d004      	beq.n	80056da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a15      	ldr	r2, [pc, #84]	; (800572c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d10c      	bne.n	80056f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	40010000 	.word	0x40010000
 8005718:	40000400 	.word	0x40000400
 800571c:	40000800 	.word	0x40000800
 8005720:	40000c00 	.word	0x40000c00
 8005724:	40010400 	.word	0x40010400
 8005728:	40014000 	.word	0x40014000
 800572c:	40001800 	.word	0x40001800

08005730 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e03f      	b.n	80057ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d106      	bne.n	8005784 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7fc f866 	bl	8001850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2224      	movs	r2, #36	; 0x24
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800579a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f829 	bl	80057f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	691a      	ldr	r2, [r3, #16]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	695a      	ldr	r2, [r3, #20]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68da      	ldr	r2, [r3, #12]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2220      	movs	r2, #32
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2220      	movs	r2, #32
 80057e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
	...

080057f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057f8:	b0c0      	sub	sp, #256	; 0x100
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800580c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005810:	68d9      	ldr	r1, [r3, #12]
 8005812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	ea40 0301 	orr.w	r3, r0, r1
 800581c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800581e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	431a      	orrs	r2, r3
 800582c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	431a      	orrs	r2, r3
 8005834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	4313      	orrs	r3, r2
 800583c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800584c:	f021 010c 	bic.w	r1, r1, #12
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800585a:	430b      	orrs	r3, r1
 800585c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800585e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800586a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800586e:	6999      	ldr	r1, [r3, #24]
 8005870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	ea40 0301 	orr.w	r3, r0, r1
 800587a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800587c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	4b8f      	ldr	r3, [pc, #572]	; (8005ac0 <UART_SetConfig+0x2cc>)
 8005884:	429a      	cmp	r2, r3
 8005886:	d005      	beq.n	8005894 <UART_SetConfig+0xa0>
 8005888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	4b8d      	ldr	r3, [pc, #564]	; (8005ac4 <UART_SetConfig+0x2d0>)
 8005890:	429a      	cmp	r2, r3
 8005892:	d104      	bne.n	800589e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005894:	f7fe ff78 	bl	8004788 <HAL_RCC_GetPCLK2Freq>
 8005898:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800589c:	e003      	b.n	80058a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800589e:	f7fe ff5f 	bl	8004760 <HAL_RCC_GetPCLK1Freq>
 80058a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058b0:	f040 810c 	bne.w	8005acc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058b8:	2200      	movs	r2, #0
 80058ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80058c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80058c6:	4622      	mov	r2, r4
 80058c8:	462b      	mov	r3, r5
 80058ca:	1891      	adds	r1, r2, r2
 80058cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80058ce:	415b      	adcs	r3, r3
 80058d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80058d6:	4621      	mov	r1, r4
 80058d8:	eb12 0801 	adds.w	r8, r2, r1
 80058dc:	4629      	mov	r1, r5
 80058de:	eb43 0901 	adc.w	r9, r3, r1
 80058e2:	f04f 0200 	mov.w	r2, #0
 80058e6:	f04f 0300 	mov.w	r3, #0
 80058ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058f6:	4690      	mov	r8, r2
 80058f8:	4699      	mov	r9, r3
 80058fa:	4623      	mov	r3, r4
 80058fc:	eb18 0303 	adds.w	r3, r8, r3
 8005900:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005904:	462b      	mov	r3, r5
 8005906:	eb49 0303 	adc.w	r3, r9, r3
 800590a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800590e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800591a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800591e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005922:	460b      	mov	r3, r1
 8005924:	18db      	adds	r3, r3, r3
 8005926:	653b      	str	r3, [r7, #80]	; 0x50
 8005928:	4613      	mov	r3, r2
 800592a:	eb42 0303 	adc.w	r3, r2, r3
 800592e:	657b      	str	r3, [r7, #84]	; 0x54
 8005930:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005934:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005938:	f7fa fcaa 	bl	8000290 <__aeabi_uldivmod>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4b61      	ldr	r3, [pc, #388]	; (8005ac8 <UART_SetConfig+0x2d4>)
 8005942:	fba3 2302 	umull	r2, r3, r3, r2
 8005946:	095b      	lsrs	r3, r3, #5
 8005948:	011c      	lsls	r4, r3, #4
 800594a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800594e:	2200      	movs	r2, #0
 8005950:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005954:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005958:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800595c:	4642      	mov	r2, r8
 800595e:	464b      	mov	r3, r9
 8005960:	1891      	adds	r1, r2, r2
 8005962:	64b9      	str	r1, [r7, #72]	; 0x48
 8005964:	415b      	adcs	r3, r3
 8005966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005968:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800596c:	4641      	mov	r1, r8
 800596e:	eb12 0a01 	adds.w	sl, r2, r1
 8005972:	4649      	mov	r1, r9
 8005974:	eb43 0b01 	adc.w	fp, r3, r1
 8005978:	f04f 0200 	mov.w	r2, #0
 800597c:	f04f 0300 	mov.w	r3, #0
 8005980:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005984:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005988:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800598c:	4692      	mov	sl, r2
 800598e:	469b      	mov	fp, r3
 8005990:	4643      	mov	r3, r8
 8005992:	eb1a 0303 	adds.w	r3, sl, r3
 8005996:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800599a:	464b      	mov	r3, r9
 800599c:	eb4b 0303 	adc.w	r3, fp, r3
 80059a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80059a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80059b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80059b8:	460b      	mov	r3, r1
 80059ba:	18db      	adds	r3, r3, r3
 80059bc:	643b      	str	r3, [r7, #64]	; 0x40
 80059be:	4613      	mov	r3, r2
 80059c0:	eb42 0303 	adc.w	r3, r2, r3
 80059c4:	647b      	str	r3, [r7, #68]	; 0x44
 80059c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80059ce:	f7fa fc5f 	bl	8000290 <__aeabi_uldivmod>
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
 80059d6:	4611      	mov	r1, r2
 80059d8:	4b3b      	ldr	r3, [pc, #236]	; (8005ac8 <UART_SetConfig+0x2d4>)
 80059da:	fba3 2301 	umull	r2, r3, r3, r1
 80059de:	095b      	lsrs	r3, r3, #5
 80059e0:	2264      	movs	r2, #100	; 0x64
 80059e2:	fb02 f303 	mul.w	r3, r2, r3
 80059e6:	1acb      	subs	r3, r1, r3
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80059ee:	4b36      	ldr	r3, [pc, #216]	; (8005ac8 <UART_SetConfig+0x2d4>)
 80059f0:	fba3 2302 	umull	r2, r3, r3, r2
 80059f4:	095b      	lsrs	r3, r3, #5
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059fc:	441c      	add	r4, r3
 80059fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a02:	2200      	movs	r2, #0
 8005a04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a08:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a10:	4642      	mov	r2, r8
 8005a12:	464b      	mov	r3, r9
 8005a14:	1891      	adds	r1, r2, r2
 8005a16:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a18:	415b      	adcs	r3, r3
 8005a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a20:	4641      	mov	r1, r8
 8005a22:	1851      	adds	r1, r2, r1
 8005a24:	6339      	str	r1, [r7, #48]	; 0x30
 8005a26:	4649      	mov	r1, r9
 8005a28:	414b      	adcs	r3, r1
 8005a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a2c:	f04f 0200 	mov.w	r2, #0
 8005a30:	f04f 0300 	mov.w	r3, #0
 8005a34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a38:	4659      	mov	r1, fp
 8005a3a:	00cb      	lsls	r3, r1, #3
 8005a3c:	4651      	mov	r1, sl
 8005a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a42:	4651      	mov	r1, sl
 8005a44:	00ca      	lsls	r2, r1, #3
 8005a46:	4610      	mov	r0, r2
 8005a48:	4619      	mov	r1, r3
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	4642      	mov	r2, r8
 8005a4e:	189b      	adds	r3, r3, r2
 8005a50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a54:	464b      	mov	r3, r9
 8005a56:	460a      	mov	r2, r1
 8005a58:	eb42 0303 	adc.w	r3, r2, r3
 8005a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a6c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a74:	460b      	mov	r3, r1
 8005a76:	18db      	adds	r3, r3, r3
 8005a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	eb42 0303 	adc.w	r3, r2, r3
 8005a80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a8a:	f7fa fc01 	bl	8000290 <__aeabi_uldivmod>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	4b0d      	ldr	r3, [pc, #52]	; (8005ac8 <UART_SetConfig+0x2d4>)
 8005a94:	fba3 1302 	umull	r1, r3, r3, r2
 8005a98:	095b      	lsrs	r3, r3, #5
 8005a9a:	2164      	movs	r1, #100	; 0x64
 8005a9c:	fb01 f303 	mul.w	r3, r1, r3
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	3332      	adds	r3, #50	; 0x32
 8005aa6:	4a08      	ldr	r2, [pc, #32]	; (8005ac8 <UART_SetConfig+0x2d4>)
 8005aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aac:	095b      	lsrs	r3, r3, #5
 8005aae:	f003 0207 	and.w	r2, r3, #7
 8005ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4422      	add	r2, r4
 8005aba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005abc:	e106      	b.n	8005ccc <UART_SetConfig+0x4d8>
 8005abe:	bf00      	nop
 8005ac0:	40011000 	.word	0x40011000
 8005ac4:	40011400 	.word	0x40011400
 8005ac8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005acc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ad6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ada:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ade:	4642      	mov	r2, r8
 8005ae0:	464b      	mov	r3, r9
 8005ae2:	1891      	adds	r1, r2, r2
 8005ae4:	6239      	str	r1, [r7, #32]
 8005ae6:	415b      	adcs	r3, r3
 8005ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8005aea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005aee:	4641      	mov	r1, r8
 8005af0:	1854      	adds	r4, r2, r1
 8005af2:	4649      	mov	r1, r9
 8005af4:	eb43 0501 	adc.w	r5, r3, r1
 8005af8:	f04f 0200 	mov.w	r2, #0
 8005afc:	f04f 0300 	mov.w	r3, #0
 8005b00:	00eb      	lsls	r3, r5, #3
 8005b02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b06:	00e2      	lsls	r2, r4, #3
 8005b08:	4614      	mov	r4, r2
 8005b0a:	461d      	mov	r5, r3
 8005b0c:	4643      	mov	r3, r8
 8005b0e:	18e3      	adds	r3, r4, r3
 8005b10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b14:	464b      	mov	r3, r9
 8005b16:	eb45 0303 	adc.w	r3, r5, r3
 8005b1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b2e:	f04f 0200 	mov.w	r2, #0
 8005b32:	f04f 0300 	mov.w	r3, #0
 8005b36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b3a:	4629      	mov	r1, r5
 8005b3c:	008b      	lsls	r3, r1, #2
 8005b3e:	4621      	mov	r1, r4
 8005b40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b44:	4621      	mov	r1, r4
 8005b46:	008a      	lsls	r2, r1, #2
 8005b48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b4c:	f7fa fba0 	bl	8000290 <__aeabi_uldivmod>
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	4b60      	ldr	r3, [pc, #384]	; (8005cd8 <UART_SetConfig+0x4e4>)
 8005b56:	fba3 2302 	umull	r2, r3, r3, r2
 8005b5a:	095b      	lsrs	r3, r3, #5
 8005b5c:	011c      	lsls	r4, r3, #4
 8005b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b70:	4642      	mov	r2, r8
 8005b72:	464b      	mov	r3, r9
 8005b74:	1891      	adds	r1, r2, r2
 8005b76:	61b9      	str	r1, [r7, #24]
 8005b78:	415b      	adcs	r3, r3
 8005b7a:	61fb      	str	r3, [r7, #28]
 8005b7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b80:	4641      	mov	r1, r8
 8005b82:	1851      	adds	r1, r2, r1
 8005b84:	6139      	str	r1, [r7, #16]
 8005b86:	4649      	mov	r1, r9
 8005b88:	414b      	adcs	r3, r1
 8005b8a:	617b      	str	r3, [r7, #20]
 8005b8c:	f04f 0200 	mov.w	r2, #0
 8005b90:	f04f 0300 	mov.w	r3, #0
 8005b94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b98:	4659      	mov	r1, fp
 8005b9a:	00cb      	lsls	r3, r1, #3
 8005b9c:	4651      	mov	r1, sl
 8005b9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ba2:	4651      	mov	r1, sl
 8005ba4:	00ca      	lsls	r2, r1, #3
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	4619      	mov	r1, r3
 8005baa:	4603      	mov	r3, r0
 8005bac:	4642      	mov	r2, r8
 8005bae:	189b      	adds	r3, r3, r2
 8005bb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005bb4:	464b      	mov	r3, r9
 8005bb6:	460a      	mov	r2, r1
 8005bb8:	eb42 0303 	adc.w	r3, r2, r3
 8005bbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bca:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	f04f 0300 	mov.w	r3, #0
 8005bd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005bd8:	4649      	mov	r1, r9
 8005bda:	008b      	lsls	r3, r1, #2
 8005bdc:	4641      	mov	r1, r8
 8005bde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005be2:	4641      	mov	r1, r8
 8005be4:	008a      	lsls	r2, r1, #2
 8005be6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005bea:	f7fa fb51 	bl	8000290 <__aeabi_uldivmod>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4611      	mov	r1, r2
 8005bf4:	4b38      	ldr	r3, [pc, #224]	; (8005cd8 <UART_SetConfig+0x4e4>)
 8005bf6:	fba3 2301 	umull	r2, r3, r3, r1
 8005bfa:	095b      	lsrs	r3, r3, #5
 8005bfc:	2264      	movs	r2, #100	; 0x64
 8005bfe:	fb02 f303 	mul.w	r3, r2, r3
 8005c02:	1acb      	subs	r3, r1, r3
 8005c04:	011b      	lsls	r3, r3, #4
 8005c06:	3332      	adds	r3, #50	; 0x32
 8005c08:	4a33      	ldr	r2, [pc, #204]	; (8005cd8 <UART_SetConfig+0x4e4>)
 8005c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0e:	095b      	lsrs	r3, r3, #5
 8005c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c14:	441c      	add	r4, r3
 8005c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	673b      	str	r3, [r7, #112]	; 0x70
 8005c1e:	677a      	str	r2, [r7, #116]	; 0x74
 8005c20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c24:	4642      	mov	r2, r8
 8005c26:	464b      	mov	r3, r9
 8005c28:	1891      	adds	r1, r2, r2
 8005c2a:	60b9      	str	r1, [r7, #8]
 8005c2c:	415b      	adcs	r3, r3
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c34:	4641      	mov	r1, r8
 8005c36:	1851      	adds	r1, r2, r1
 8005c38:	6039      	str	r1, [r7, #0]
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	414b      	adcs	r3, r1
 8005c3e:	607b      	str	r3, [r7, #4]
 8005c40:	f04f 0200 	mov.w	r2, #0
 8005c44:	f04f 0300 	mov.w	r3, #0
 8005c48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c4c:	4659      	mov	r1, fp
 8005c4e:	00cb      	lsls	r3, r1, #3
 8005c50:	4651      	mov	r1, sl
 8005c52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c56:	4651      	mov	r1, sl
 8005c58:	00ca      	lsls	r2, r1, #3
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4603      	mov	r3, r0
 8005c60:	4642      	mov	r2, r8
 8005c62:	189b      	adds	r3, r3, r2
 8005c64:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c66:	464b      	mov	r3, r9
 8005c68:	460a      	mov	r2, r1
 8005c6a:	eb42 0303 	adc.w	r3, r2, r3
 8005c6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	663b      	str	r3, [r7, #96]	; 0x60
 8005c7a:	667a      	str	r2, [r7, #100]	; 0x64
 8005c7c:	f04f 0200 	mov.w	r2, #0
 8005c80:	f04f 0300 	mov.w	r3, #0
 8005c84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c88:	4649      	mov	r1, r9
 8005c8a:	008b      	lsls	r3, r1, #2
 8005c8c:	4641      	mov	r1, r8
 8005c8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c92:	4641      	mov	r1, r8
 8005c94:	008a      	lsls	r2, r1, #2
 8005c96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c9a:	f7fa faf9 	bl	8000290 <__aeabi_uldivmod>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	4b0d      	ldr	r3, [pc, #52]	; (8005cd8 <UART_SetConfig+0x4e4>)
 8005ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ca8:	095b      	lsrs	r3, r3, #5
 8005caa:	2164      	movs	r1, #100	; 0x64
 8005cac:	fb01 f303 	mul.w	r3, r1, r3
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	3332      	adds	r3, #50	; 0x32
 8005cb6:	4a08      	ldr	r2, [pc, #32]	; (8005cd8 <UART_SetConfig+0x4e4>)
 8005cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cbc:	095b      	lsrs	r3, r3, #5
 8005cbe:	f003 020f 	and.w	r2, r3, #15
 8005cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4422      	add	r2, r4
 8005cca:	609a      	str	r2, [r3, #8]
}
 8005ccc:	bf00      	nop
 8005cce:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cd8:	51eb851f 	.word	0x51eb851f

08005cdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cdc:	b084      	sub	sp, #16
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b084      	sub	sp, #16
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
 8005ce6:	f107 001c 	add.w	r0, r7, #28
 8005cea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d122      	bne.n	8005d3a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d105      	bne.n	8005d2e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 faa2 	bl	8006278 <USB_CoreReset>
 8005d34:	4603      	mov	r3, r0
 8005d36:	73fb      	strb	r3, [r7, #15]
 8005d38:	e01a      	b.n	8005d70 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fa96 	bl	8006278 <USB_CoreReset>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d106      	bne.n	8005d64 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	639a      	str	r2, [r3, #56]	; 0x38
 8005d62:	e005      	b.n	8005d70 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d10b      	bne.n	8005d8e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f043 0206 	orr.w	r2, r3, #6
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f043 0220 	orr.w	r2, r3, #32
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d9a:	b004      	add	sp, #16
 8005d9c:	4770      	bx	lr

08005d9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f023 0201 	bic.w	r2, r3, #1
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	460b      	mov	r3, r1
 8005dca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ddc:	78fb      	ldrb	r3, [r7, #3]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d115      	bne.n	8005e0e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005dee:	2001      	movs	r0, #1
 8005df0:	f7fb fee8 	bl	8001bc4 <HAL_Delay>
      ms++;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	3301      	adds	r3, #1
 8005df8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fa2e 	bl	800625c <USB_GetMode>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d01e      	beq.n	8005e44 <USB_SetCurrentMode+0x84>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b31      	cmp	r3, #49	; 0x31
 8005e0a:	d9f0      	bls.n	8005dee <USB_SetCurrentMode+0x2e>
 8005e0c:	e01a      	b.n	8005e44 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e0e:	78fb      	ldrb	r3, [r7, #3]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d115      	bne.n	8005e40 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e20:	2001      	movs	r0, #1
 8005e22:	f7fb fecf 	bl	8001bc4 <HAL_Delay>
      ms++;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fa15 	bl	800625c <USB_GetMode>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d005      	beq.n	8005e44 <USB_SetCurrentMode+0x84>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2b31      	cmp	r3, #49	; 0x31
 8005e3c:	d9f0      	bls.n	8005e20 <USB_SetCurrentMode+0x60>
 8005e3e:	e001      	b.n	8005e44 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e005      	b.n	8005e50 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b32      	cmp	r3, #50	; 0x32
 8005e48:	d101      	bne.n	8005e4e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e000      	b.n	8005e50 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e58:	b084      	sub	sp, #16
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b086      	sub	sp, #24
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005e66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e72:	2300      	movs	r3, #0
 8005e74:	613b      	str	r3, [r7, #16]
 8005e76:	e009      	b.n	8005e8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	3340      	adds	r3, #64	; 0x40
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	2200      	movs	r2, #0
 8005e84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	613b      	str	r3, [r7, #16]
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	2b0e      	cmp	r3, #14
 8005e90:	d9f2      	bls.n	8005e78 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d11c      	bne.n	8005ed2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ea6:	f043 0302 	orr.w	r3, r3, #2
 8005eaa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	639a      	str	r2, [r3, #56]	; 0x38
 8005ed0:	e00b      	b.n	8005eea <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efc:	4619      	mov	r1, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f04:	461a      	mov	r2, r3
 8005f06:	680b      	ldr	r3, [r1, #0]
 8005f08:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d10c      	bne.n	8005f2a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d104      	bne.n	8005f20 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f16:	2100      	movs	r1, #0
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f965 	bl	80061e8 <USB_SetDevSpeed>
 8005f1e:	e008      	b.n	8005f32 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f20:	2101      	movs	r1, #1
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f960 	bl	80061e8 <USB_SetDevSpeed>
 8005f28:	e003      	b.n	8005f32 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f2a:	2103      	movs	r1, #3
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f95b 	bl	80061e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f32:	2110      	movs	r1, #16
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f8f3 	bl	8006120 <USB_FlushTxFifo>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f91f 	bl	8006188 <USB_FlushRxFifo>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f66:	461a      	mov	r2, r3
 8005f68:	2300      	movs	r3, #0
 8005f6a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f72:	461a      	mov	r2, r3
 8005f74:	2300      	movs	r3, #0
 8005f76:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f78:	2300      	movs	r3, #0
 8005f7a:	613b      	str	r3, [r7, #16]
 8005f7c:	e043      	b.n	8006006 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f94:	d118      	bne.n	8005fc8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10a      	bne.n	8005fb2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	015a      	lsls	r2, r3, #5
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa8:	461a      	mov	r2, r3
 8005faa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fae:	6013      	str	r3, [r2, #0]
 8005fb0:	e013      	b.n	8005fda <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fc4:	6013      	str	r3, [r2, #0]
 8005fc6:	e008      	b.n	8005fda <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	2300      	movs	r3, #0
 8005fea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ffe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	3301      	adds	r3, #1
 8006004:	613b      	str	r3, [r7, #16]
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	429a      	cmp	r2, r3
 800600c:	d3b7      	bcc.n	8005f7e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800600e:	2300      	movs	r3, #0
 8006010:	613b      	str	r3, [r7, #16]
 8006012:	e043      	b.n	800609c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	4413      	add	r3, r2
 800601c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006026:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800602a:	d118      	bne.n	800605e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10a      	bne.n	8006048 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603e:	461a      	mov	r2, r3
 8006040:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	e013      	b.n	8006070 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4413      	add	r3, r2
 8006050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006054:	461a      	mov	r2, r3
 8006056:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800605a:	6013      	str	r3, [r2, #0]
 800605c:	e008      	b.n	8006070 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4413      	add	r3, r2
 8006066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606a:	461a      	mov	r2, r3
 800606c:	2300      	movs	r3, #0
 800606e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607c:	461a      	mov	r2, r3
 800607e:	2300      	movs	r3, #0
 8006080:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	015a      	lsls	r2, r3, #5
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4413      	add	r3, r2
 800608a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608e:	461a      	mov	r2, r3
 8006090:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006094:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	3301      	adds	r3, #1
 800609a:	613b      	str	r3, [r7, #16]
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d3b7      	bcc.n	8006014 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80060c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80060c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d105      	bne.n	80060d8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	f043 0210 	orr.w	r2, r3, #16
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	699a      	ldr	r2, [r3, #24]
 80060dc:	4b0f      	ldr	r3, [pc, #60]	; (800611c <USB_DevInit+0x2c4>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80060e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d005      	beq.n	80060f6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	f043 0208 	orr.w	r2, r3, #8
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80060f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d107      	bne.n	800610c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006104:	f043 0304 	orr.w	r3, r3, #4
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800610c:	7dfb      	ldrb	r3, [r7, #23]
}
 800610e:	4618      	mov	r0, r3
 8006110:	3718      	adds	r7, #24
 8006112:	46bd      	mov	sp, r7
 8006114:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006118:	b004      	add	sp, #16
 800611a:	4770      	bx	lr
 800611c:	803c3800 	.word	0x803c3800

08006120 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	3301      	adds	r3, #1
 8006132:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4a13      	ldr	r2, [pc, #76]	; (8006184 <USB_FlushTxFifo+0x64>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d901      	bls.n	8006140 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e01b      	b.n	8006178 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	2b00      	cmp	r3, #0
 8006146:	daf2      	bge.n	800612e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006148:	2300      	movs	r3, #0
 800614a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	019b      	lsls	r3, r3, #6
 8006150:	f043 0220 	orr.w	r2, r3, #32
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	3301      	adds	r3, #1
 800615c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4a08      	ldr	r2, [pc, #32]	; (8006184 <USB_FlushTxFifo+0x64>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d901      	bls.n	800616a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e006      	b.n	8006178 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f003 0320 	and.w	r3, r3, #32
 8006172:	2b20      	cmp	r3, #32
 8006174:	d0f0      	beq.n	8006158 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	00030d40 	.word	0x00030d40

08006188 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	3301      	adds	r3, #1
 8006198:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4a11      	ldr	r2, [pc, #68]	; (80061e4 <USB_FlushRxFifo+0x5c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d901      	bls.n	80061a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e018      	b.n	80061d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	daf2      	bge.n	8006194 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2210      	movs	r2, #16
 80061b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	3301      	adds	r3, #1
 80061bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	4a08      	ldr	r2, [pc, #32]	; (80061e4 <USB_FlushRxFifo+0x5c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d901      	bls.n	80061ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e006      	b.n	80061d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	f003 0310 	and.w	r3, r3, #16
 80061d2:	2b10      	cmp	r3, #16
 80061d4:	d0f0      	beq.n	80061b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr
 80061e4:	00030d40 	.word	0x00030d40

080061e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	460b      	mov	r3, r1
 80061f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	78fb      	ldrb	r3, [r7, #3]
 8006202:	68f9      	ldr	r1, [r7, #12]
 8006204:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006208:	4313      	orrs	r3, r2
 800620a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800621a:	b480      	push	{r7}
 800621c:	b085      	sub	sp, #20
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006234:	f023 0303 	bic.w	r3, r3, #3
 8006238:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006248:	f043 0302 	orr.w	r3, r3, #2
 800624c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3714      	adds	r7, #20
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	f003 0301 	and.w	r3, r3, #1
}
 800626c:	4618      	mov	r0, r3
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006280:	2300      	movs	r3, #0
 8006282:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	3301      	adds	r3, #1
 8006288:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4a13      	ldr	r2, [pc, #76]	; (80062dc <USB_CoreReset+0x64>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d901      	bls.n	8006296 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e01b      	b.n	80062ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	daf2      	bge.n	8006284 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	f043 0201 	orr.w	r2, r3, #1
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	3301      	adds	r3, #1
 80062b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	4a09      	ldr	r2, [pc, #36]	; (80062dc <USB_CoreReset+0x64>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d901      	bls.n	80062c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e006      	b.n	80062ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d0f0      	beq.n	80062ae <USB_CoreReset+0x36>

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	00030d40 	.word	0x00030d40

080062e0 <siprintf>:
 80062e0:	b40e      	push	{r1, r2, r3}
 80062e2:	b500      	push	{lr}
 80062e4:	b09c      	sub	sp, #112	; 0x70
 80062e6:	ab1d      	add	r3, sp, #116	; 0x74
 80062e8:	9002      	str	r0, [sp, #8]
 80062ea:	9006      	str	r0, [sp, #24]
 80062ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062f0:	4809      	ldr	r0, [pc, #36]	; (8006318 <siprintf+0x38>)
 80062f2:	9107      	str	r1, [sp, #28]
 80062f4:	9104      	str	r1, [sp, #16]
 80062f6:	4909      	ldr	r1, [pc, #36]	; (800631c <siprintf+0x3c>)
 80062f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80062fc:	9105      	str	r1, [sp, #20]
 80062fe:	6800      	ldr	r0, [r0, #0]
 8006300:	9301      	str	r3, [sp, #4]
 8006302:	a902      	add	r1, sp, #8
 8006304:	f000 f9cc 	bl	80066a0 <_svfiprintf_r>
 8006308:	9b02      	ldr	r3, [sp, #8]
 800630a:	2200      	movs	r2, #0
 800630c:	701a      	strb	r2, [r3, #0]
 800630e:	b01c      	add	sp, #112	; 0x70
 8006310:	f85d eb04 	ldr.w	lr, [sp], #4
 8006314:	b003      	add	sp, #12
 8006316:	4770      	bx	lr
 8006318:	2000005c 	.word	0x2000005c
 800631c:	ffff0208 	.word	0xffff0208

08006320 <_vsniprintf_r>:
 8006320:	b530      	push	{r4, r5, lr}
 8006322:	4614      	mov	r4, r2
 8006324:	2c00      	cmp	r4, #0
 8006326:	b09b      	sub	sp, #108	; 0x6c
 8006328:	4605      	mov	r5, r0
 800632a:	461a      	mov	r2, r3
 800632c:	da05      	bge.n	800633a <_vsniprintf_r+0x1a>
 800632e:	238b      	movs	r3, #139	; 0x8b
 8006330:	6003      	str	r3, [r0, #0]
 8006332:	f04f 30ff 	mov.w	r0, #4294967295
 8006336:	b01b      	add	sp, #108	; 0x6c
 8006338:	bd30      	pop	{r4, r5, pc}
 800633a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800633e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006342:	bf14      	ite	ne
 8006344:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006348:	4623      	moveq	r3, r4
 800634a:	9302      	str	r3, [sp, #8]
 800634c:	9305      	str	r3, [sp, #20]
 800634e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006352:	9100      	str	r1, [sp, #0]
 8006354:	9104      	str	r1, [sp, #16]
 8006356:	f8ad 300e 	strh.w	r3, [sp, #14]
 800635a:	4669      	mov	r1, sp
 800635c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800635e:	f000 f99f 	bl	80066a0 <_svfiprintf_r>
 8006362:	1c43      	adds	r3, r0, #1
 8006364:	bfbc      	itt	lt
 8006366:	238b      	movlt	r3, #139	; 0x8b
 8006368:	602b      	strlt	r3, [r5, #0]
 800636a:	2c00      	cmp	r4, #0
 800636c:	d0e3      	beq.n	8006336 <_vsniprintf_r+0x16>
 800636e:	9b00      	ldr	r3, [sp, #0]
 8006370:	2200      	movs	r2, #0
 8006372:	701a      	strb	r2, [r3, #0]
 8006374:	e7df      	b.n	8006336 <_vsniprintf_r+0x16>
	...

08006378 <vsniprintf>:
 8006378:	b507      	push	{r0, r1, r2, lr}
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	4613      	mov	r3, r2
 800637e:	460a      	mov	r2, r1
 8006380:	4601      	mov	r1, r0
 8006382:	4803      	ldr	r0, [pc, #12]	; (8006390 <vsniprintf+0x18>)
 8006384:	6800      	ldr	r0, [r0, #0]
 8006386:	f7ff ffcb 	bl	8006320 <_vsniprintf_r>
 800638a:	b003      	add	sp, #12
 800638c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006390:	2000005c 	.word	0x2000005c

08006394 <memset>:
 8006394:	4402      	add	r2, r0
 8006396:	4603      	mov	r3, r0
 8006398:	4293      	cmp	r3, r2
 800639a:	d100      	bne.n	800639e <memset+0xa>
 800639c:	4770      	bx	lr
 800639e:	f803 1b01 	strb.w	r1, [r3], #1
 80063a2:	e7f9      	b.n	8006398 <memset+0x4>

080063a4 <__errno>:
 80063a4:	4b01      	ldr	r3, [pc, #4]	; (80063ac <__errno+0x8>)
 80063a6:	6818      	ldr	r0, [r3, #0]
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	2000005c 	.word	0x2000005c

080063b0 <__libc_init_array>:
 80063b0:	b570      	push	{r4, r5, r6, lr}
 80063b2:	4d0d      	ldr	r5, [pc, #52]	; (80063e8 <__libc_init_array+0x38>)
 80063b4:	4c0d      	ldr	r4, [pc, #52]	; (80063ec <__libc_init_array+0x3c>)
 80063b6:	1b64      	subs	r4, r4, r5
 80063b8:	10a4      	asrs	r4, r4, #2
 80063ba:	2600      	movs	r6, #0
 80063bc:	42a6      	cmp	r6, r4
 80063be:	d109      	bne.n	80063d4 <__libc_init_array+0x24>
 80063c0:	4d0b      	ldr	r5, [pc, #44]	; (80063f0 <__libc_init_array+0x40>)
 80063c2:	4c0c      	ldr	r4, [pc, #48]	; (80063f4 <__libc_init_array+0x44>)
 80063c4:	f000 fc6a 	bl	8006c9c <_init>
 80063c8:	1b64      	subs	r4, r4, r5
 80063ca:	10a4      	asrs	r4, r4, #2
 80063cc:	2600      	movs	r6, #0
 80063ce:	42a6      	cmp	r6, r4
 80063d0:	d105      	bne.n	80063de <__libc_init_array+0x2e>
 80063d2:	bd70      	pop	{r4, r5, r6, pc}
 80063d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063d8:	4798      	blx	r3
 80063da:	3601      	adds	r6, #1
 80063dc:	e7ee      	b.n	80063bc <__libc_init_array+0xc>
 80063de:	f855 3b04 	ldr.w	r3, [r5], #4
 80063e2:	4798      	blx	r3
 80063e4:	3601      	adds	r6, #1
 80063e6:	e7f2      	b.n	80063ce <__libc_init_array+0x1e>
 80063e8:	08006d40 	.word	0x08006d40
 80063ec:	08006d40 	.word	0x08006d40
 80063f0:	08006d40 	.word	0x08006d40
 80063f4:	08006d44 	.word	0x08006d44

080063f8 <__retarget_lock_acquire_recursive>:
 80063f8:	4770      	bx	lr

080063fa <__retarget_lock_release_recursive>:
 80063fa:	4770      	bx	lr

080063fc <_free_r>:
 80063fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063fe:	2900      	cmp	r1, #0
 8006400:	d044      	beq.n	800648c <_free_r+0x90>
 8006402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006406:	9001      	str	r0, [sp, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	f1a1 0404 	sub.w	r4, r1, #4
 800640e:	bfb8      	it	lt
 8006410:	18e4      	addlt	r4, r4, r3
 8006412:	f000 f8df 	bl	80065d4 <__malloc_lock>
 8006416:	4a1e      	ldr	r2, [pc, #120]	; (8006490 <_free_r+0x94>)
 8006418:	9801      	ldr	r0, [sp, #4]
 800641a:	6813      	ldr	r3, [r2, #0]
 800641c:	b933      	cbnz	r3, 800642c <_free_r+0x30>
 800641e:	6063      	str	r3, [r4, #4]
 8006420:	6014      	str	r4, [r2, #0]
 8006422:	b003      	add	sp, #12
 8006424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006428:	f000 b8da 	b.w	80065e0 <__malloc_unlock>
 800642c:	42a3      	cmp	r3, r4
 800642e:	d908      	bls.n	8006442 <_free_r+0x46>
 8006430:	6825      	ldr	r5, [r4, #0]
 8006432:	1961      	adds	r1, r4, r5
 8006434:	428b      	cmp	r3, r1
 8006436:	bf01      	itttt	eq
 8006438:	6819      	ldreq	r1, [r3, #0]
 800643a:	685b      	ldreq	r3, [r3, #4]
 800643c:	1949      	addeq	r1, r1, r5
 800643e:	6021      	streq	r1, [r4, #0]
 8006440:	e7ed      	b.n	800641e <_free_r+0x22>
 8006442:	461a      	mov	r2, r3
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	b10b      	cbz	r3, 800644c <_free_r+0x50>
 8006448:	42a3      	cmp	r3, r4
 800644a:	d9fa      	bls.n	8006442 <_free_r+0x46>
 800644c:	6811      	ldr	r1, [r2, #0]
 800644e:	1855      	adds	r5, r2, r1
 8006450:	42a5      	cmp	r5, r4
 8006452:	d10b      	bne.n	800646c <_free_r+0x70>
 8006454:	6824      	ldr	r4, [r4, #0]
 8006456:	4421      	add	r1, r4
 8006458:	1854      	adds	r4, r2, r1
 800645a:	42a3      	cmp	r3, r4
 800645c:	6011      	str	r1, [r2, #0]
 800645e:	d1e0      	bne.n	8006422 <_free_r+0x26>
 8006460:	681c      	ldr	r4, [r3, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	6053      	str	r3, [r2, #4]
 8006466:	440c      	add	r4, r1
 8006468:	6014      	str	r4, [r2, #0]
 800646a:	e7da      	b.n	8006422 <_free_r+0x26>
 800646c:	d902      	bls.n	8006474 <_free_r+0x78>
 800646e:	230c      	movs	r3, #12
 8006470:	6003      	str	r3, [r0, #0]
 8006472:	e7d6      	b.n	8006422 <_free_r+0x26>
 8006474:	6825      	ldr	r5, [r4, #0]
 8006476:	1961      	adds	r1, r4, r5
 8006478:	428b      	cmp	r3, r1
 800647a:	bf04      	itt	eq
 800647c:	6819      	ldreq	r1, [r3, #0]
 800647e:	685b      	ldreq	r3, [r3, #4]
 8006480:	6063      	str	r3, [r4, #4]
 8006482:	bf04      	itt	eq
 8006484:	1949      	addeq	r1, r1, r5
 8006486:	6021      	streq	r1, [r4, #0]
 8006488:	6054      	str	r4, [r2, #4]
 800648a:	e7ca      	b.n	8006422 <_free_r+0x26>
 800648c:	b003      	add	sp, #12
 800648e:	bd30      	pop	{r4, r5, pc}
 8006490:	20000ac4 	.word	0x20000ac4

08006494 <sbrk_aligned>:
 8006494:	b570      	push	{r4, r5, r6, lr}
 8006496:	4e0e      	ldr	r6, [pc, #56]	; (80064d0 <sbrk_aligned+0x3c>)
 8006498:	460c      	mov	r4, r1
 800649a:	6831      	ldr	r1, [r6, #0]
 800649c:	4605      	mov	r5, r0
 800649e:	b911      	cbnz	r1, 80064a6 <sbrk_aligned+0x12>
 80064a0:	f000 fba6 	bl	8006bf0 <_sbrk_r>
 80064a4:	6030      	str	r0, [r6, #0]
 80064a6:	4621      	mov	r1, r4
 80064a8:	4628      	mov	r0, r5
 80064aa:	f000 fba1 	bl	8006bf0 <_sbrk_r>
 80064ae:	1c43      	adds	r3, r0, #1
 80064b0:	d00a      	beq.n	80064c8 <sbrk_aligned+0x34>
 80064b2:	1cc4      	adds	r4, r0, #3
 80064b4:	f024 0403 	bic.w	r4, r4, #3
 80064b8:	42a0      	cmp	r0, r4
 80064ba:	d007      	beq.n	80064cc <sbrk_aligned+0x38>
 80064bc:	1a21      	subs	r1, r4, r0
 80064be:	4628      	mov	r0, r5
 80064c0:	f000 fb96 	bl	8006bf0 <_sbrk_r>
 80064c4:	3001      	adds	r0, #1
 80064c6:	d101      	bne.n	80064cc <sbrk_aligned+0x38>
 80064c8:	f04f 34ff 	mov.w	r4, #4294967295
 80064cc:	4620      	mov	r0, r4
 80064ce:	bd70      	pop	{r4, r5, r6, pc}
 80064d0:	20000ac8 	.word	0x20000ac8

080064d4 <_malloc_r>:
 80064d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064d8:	1ccd      	adds	r5, r1, #3
 80064da:	f025 0503 	bic.w	r5, r5, #3
 80064de:	3508      	adds	r5, #8
 80064e0:	2d0c      	cmp	r5, #12
 80064e2:	bf38      	it	cc
 80064e4:	250c      	movcc	r5, #12
 80064e6:	2d00      	cmp	r5, #0
 80064e8:	4607      	mov	r7, r0
 80064ea:	db01      	blt.n	80064f0 <_malloc_r+0x1c>
 80064ec:	42a9      	cmp	r1, r5
 80064ee:	d905      	bls.n	80064fc <_malloc_r+0x28>
 80064f0:	230c      	movs	r3, #12
 80064f2:	603b      	str	r3, [r7, #0]
 80064f4:	2600      	movs	r6, #0
 80064f6:	4630      	mov	r0, r6
 80064f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80065d0 <_malloc_r+0xfc>
 8006500:	f000 f868 	bl	80065d4 <__malloc_lock>
 8006504:	f8d8 3000 	ldr.w	r3, [r8]
 8006508:	461c      	mov	r4, r3
 800650a:	bb5c      	cbnz	r4, 8006564 <_malloc_r+0x90>
 800650c:	4629      	mov	r1, r5
 800650e:	4638      	mov	r0, r7
 8006510:	f7ff ffc0 	bl	8006494 <sbrk_aligned>
 8006514:	1c43      	adds	r3, r0, #1
 8006516:	4604      	mov	r4, r0
 8006518:	d155      	bne.n	80065c6 <_malloc_r+0xf2>
 800651a:	f8d8 4000 	ldr.w	r4, [r8]
 800651e:	4626      	mov	r6, r4
 8006520:	2e00      	cmp	r6, #0
 8006522:	d145      	bne.n	80065b0 <_malloc_r+0xdc>
 8006524:	2c00      	cmp	r4, #0
 8006526:	d048      	beq.n	80065ba <_malloc_r+0xe6>
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	4631      	mov	r1, r6
 800652c:	4638      	mov	r0, r7
 800652e:	eb04 0903 	add.w	r9, r4, r3
 8006532:	f000 fb5d 	bl	8006bf0 <_sbrk_r>
 8006536:	4581      	cmp	r9, r0
 8006538:	d13f      	bne.n	80065ba <_malloc_r+0xe6>
 800653a:	6821      	ldr	r1, [r4, #0]
 800653c:	1a6d      	subs	r5, r5, r1
 800653e:	4629      	mov	r1, r5
 8006540:	4638      	mov	r0, r7
 8006542:	f7ff ffa7 	bl	8006494 <sbrk_aligned>
 8006546:	3001      	adds	r0, #1
 8006548:	d037      	beq.n	80065ba <_malloc_r+0xe6>
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	442b      	add	r3, r5
 800654e:	6023      	str	r3, [r4, #0]
 8006550:	f8d8 3000 	ldr.w	r3, [r8]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d038      	beq.n	80065ca <_malloc_r+0xf6>
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	42a2      	cmp	r2, r4
 800655c:	d12b      	bne.n	80065b6 <_malloc_r+0xe2>
 800655e:	2200      	movs	r2, #0
 8006560:	605a      	str	r2, [r3, #4]
 8006562:	e00f      	b.n	8006584 <_malloc_r+0xb0>
 8006564:	6822      	ldr	r2, [r4, #0]
 8006566:	1b52      	subs	r2, r2, r5
 8006568:	d41f      	bmi.n	80065aa <_malloc_r+0xd6>
 800656a:	2a0b      	cmp	r2, #11
 800656c:	d917      	bls.n	800659e <_malloc_r+0xca>
 800656e:	1961      	adds	r1, r4, r5
 8006570:	42a3      	cmp	r3, r4
 8006572:	6025      	str	r5, [r4, #0]
 8006574:	bf18      	it	ne
 8006576:	6059      	strne	r1, [r3, #4]
 8006578:	6863      	ldr	r3, [r4, #4]
 800657a:	bf08      	it	eq
 800657c:	f8c8 1000 	streq.w	r1, [r8]
 8006580:	5162      	str	r2, [r4, r5]
 8006582:	604b      	str	r3, [r1, #4]
 8006584:	4638      	mov	r0, r7
 8006586:	f104 060b 	add.w	r6, r4, #11
 800658a:	f000 f829 	bl	80065e0 <__malloc_unlock>
 800658e:	f026 0607 	bic.w	r6, r6, #7
 8006592:	1d23      	adds	r3, r4, #4
 8006594:	1af2      	subs	r2, r6, r3
 8006596:	d0ae      	beq.n	80064f6 <_malloc_r+0x22>
 8006598:	1b9b      	subs	r3, r3, r6
 800659a:	50a3      	str	r3, [r4, r2]
 800659c:	e7ab      	b.n	80064f6 <_malloc_r+0x22>
 800659e:	42a3      	cmp	r3, r4
 80065a0:	6862      	ldr	r2, [r4, #4]
 80065a2:	d1dd      	bne.n	8006560 <_malloc_r+0x8c>
 80065a4:	f8c8 2000 	str.w	r2, [r8]
 80065a8:	e7ec      	b.n	8006584 <_malloc_r+0xb0>
 80065aa:	4623      	mov	r3, r4
 80065ac:	6864      	ldr	r4, [r4, #4]
 80065ae:	e7ac      	b.n	800650a <_malloc_r+0x36>
 80065b0:	4634      	mov	r4, r6
 80065b2:	6876      	ldr	r6, [r6, #4]
 80065b4:	e7b4      	b.n	8006520 <_malloc_r+0x4c>
 80065b6:	4613      	mov	r3, r2
 80065b8:	e7cc      	b.n	8006554 <_malloc_r+0x80>
 80065ba:	230c      	movs	r3, #12
 80065bc:	603b      	str	r3, [r7, #0]
 80065be:	4638      	mov	r0, r7
 80065c0:	f000 f80e 	bl	80065e0 <__malloc_unlock>
 80065c4:	e797      	b.n	80064f6 <_malloc_r+0x22>
 80065c6:	6025      	str	r5, [r4, #0]
 80065c8:	e7dc      	b.n	8006584 <_malloc_r+0xb0>
 80065ca:	605b      	str	r3, [r3, #4]
 80065cc:	deff      	udf	#255	; 0xff
 80065ce:	bf00      	nop
 80065d0:	20000ac4 	.word	0x20000ac4

080065d4 <__malloc_lock>:
 80065d4:	4801      	ldr	r0, [pc, #4]	; (80065dc <__malloc_lock+0x8>)
 80065d6:	f7ff bf0f 	b.w	80063f8 <__retarget_lock_acquire_recursive>
 80065da:	bf00      	nop
 80065dc:	20000ac0 	.word	0x20000ac0

080065e0 <__malloc_unlock>:
 80065e0:	4801      	ldr	r0, [pc, #4]	; (80065e8 <__malloc_unlock+0x8>)
 80065e2:	f7ff bf0a 	b.w	80063fa <__retarget_lock_release_recursive>
 80065e6:	bf00      	nop
 80065e8:	20000ac0 	.word	0x20000ac0

080065ec <__ssputs_r>:
 80065ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065f0:	688e      	ldr	r6, [r1, #8]
 80065f2:	461f      	mov	r7, r3
 80065f4:	42be      	cmp	r6, r7
 80065f6:	680b      	ldr	r3, [r1, #0]
 80065f8:	4682      	mov	sl, r0
 80065fa:	460c      	mov	r4, r1
 80065fc:	4690      	mov	r8, r2
 80065fe:	d82c      	bhi.n	800665a <__ssputs_r+0x6e>
 8006600:	898a      	ldrh	r2, [r1, #12]
 8006602:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006606:	d026      	beq.n	8006656 <__ssputs_r+0x6a>
 8006608:	6965      	ldr	r5, [r4, #20]
 800660a:	6909      	ldr	r1, [r1, #16]
 800660c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006610:	eba3 0901 	sub.w	r9, r3, r1
 8006614:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006618:	1c7b      	adds	r3, r7, #1
 800661a:	444b      	add	r3, r9
 800661c:	106d      	asrs	r5, r5, #1
 800661e:	429d      	cmp	r5, r3
 8006620:	bf38      	it	cc
 8006622:	461d      	movcc	r5, r3
 8006624:	0553      	lsls	r3, r2, #21
 8006626:	d527      	bpl.n	8006678 <__ssputs_r+0x8c>
 8006628:	4629      	mov	r1, r5
 800662a:	f7ff ff53 	bl	80064d4 <_malloc_r>
 800662e:	4606      	mov	r6, r0
 8006630:	b360      	cbz	r0, 800668c <__ssputs_r+0xa0>
 8006632:	6921      	ldr	r1, [r4, #16]
 8006634:	464a      	mov	r2, r9
 8006636:	f000 faeb 	bl	8006c10 <memcpy>
 800663a:	89a3      	ldrh	r3, [r4, #12]
 800663c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006644:	81a3      	strh	r3, [r4, #12]
 8006646:	6126      	str	r6, [r4, #16]
 8006648:	6165      	str	r5, [r4, #20]
 800664a:	444e      	add	r6, r9
 800664c:	eba5 0509 	sub.w	r5, r5, r9
 8006650:	6026      	str	r6, [r4, #0]
 8006652:	60a5      	str	r5, [r4, #8]
 8006654:	463e      	mov	r6, r7
 8006656:	42be      	cmp	r6, r7
 8006658:	d900      	bls.n	800665c <__ssputs_r+0x70>
 800665a:	463e      	mov	r6, r7
 800665c:	6820      	ldr	r0, [r4, #0]
 800665e:	4632      	mov	r2, r6
 8006660:	4641      	mov	r1, r8
 8006662:	f000 faab 	bl	8006bbc <memmove>
 8006666:	68a3      	ldr	r3, [r4, #8]
 8006668:	1b9b      	subs	r3, r3, r6
 800666a:	60a3      	str	r3, [r4, #8]
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	4433      	add	r3, r6
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	2000      	movs	r0, #0
 8006674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006678:	462a      	mov	r2, r5
 800667a:	f000 fad7 	bl	8006c2c <_realloc_r>
 800667e:	4606      	mov	r6, r0
 8006680:	2800      	cmp	r0, #0
 8006682:	d1e0      	bne.n	8006646 <__ssputs_r+0x5a>
 8006684:	6921      	ldr	r1, [r4, #16]
 8006686:	4650      	mov	r0, sl
 8006688:	f7ff feb8 	bl	80063fc <_free_r>
 800668c:	230c      	movs	r3, #12
 800668e:	f8ca 3000 	str.w	r3, [sl]
 8006692:	89a3      	ldrh	r3, [r4, #12]
 8006694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006698:	81a3      	strh	r3, [r4, #12]
 800669a:	f04f 30ff 	mov.w	r0, #4294967295
 800669e:	e7e9      	b.n	8006674 <__ssputs_r+0x88>

080066a0 <_svfiprintf_r>:
 80066a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a4:	4698      	mov	r8, r3
 80066a6:	898b      	ldrh	r3, [r1, #12]
 80066a8:	061b      	lsls	r3, r3, #24
 80066aa:	b09d      	sub	sp, #116	; 0x74
 80066ac:	4607      	mov	r7, r0
 80066ae:	460d      	mov	r5, r1
 80066b0:	4614      	mov	r4, r2
 80066b2:	d50e      	bpl.n	80066d2 <_svfiprintf_r+0x32>
 80066b4:	690b      	ldr	r3, [r1, #16]
 80066b6:	b963      	cbnz	r3, 80066d2 <_svfiprintf_r+0x32>
 80066b8:	2140      	movs	r1, #64	; 0x40
 80066ba:	f7ff ff0b 	bl	80064d4 <_malloc_r>
 80066be:	6028      	str	r0, [r5, #0]
 80066c0:	6128      	str	r0, [r5, #16]
 80066c2:	b920      	cbnz	r0, 80066ce <_svfiprintf_r+0x2e>
 80066c4:	230c      	movs	r3, #12
 80066c6:	603b      	str	r3, [r7, #0]
 80066c8:	f04f 30ff 	mov.w	r0, #4294967295
 80066cc:	e0d0      	b.n	8006870 <_svfiprintf_r+0x1d0>
 80066ce:	2340      	movs	r3, #64	; 0x40
 80066d0:	616b      	str	r3, [r5, #20]
 80066d2:	2300      	movs	r3, #0
 80066d4:	9309      	str	r3, [sp, #36]	; 0x24
 80066d6:	2320      	movs	r3, #32
 80066d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80066e0:	2330      	movs	r3, #48	; 0x30
 80066e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006888 <_svfiprintf_r+0x1e8>
 80066e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066ea:	f04f 0901 	mov.w	r9, #1
 80066ee:	4623      	mov	r3, r4
 80066f0:	469a      	mov	sl, r3
 80066f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066f6:	b10a      	cbz	r2, 80066fc <_svfiprintf_r+0x5c>
 80066f8:	2a25      	cmp	r2, #37	; 0x25
 80066fa:	d1f9      	bne.n	80066f0 <_svfiprintf_r+0x50>
 80066fc:	ebba 0b04 	subs.w	fp, sl, r4
 8006700:	d00b      	beq.n	800671a <_svfiprintf_r+0x7a>
 8006702:	465b      	mov	r3, fp
 8006704:	4622      	mov	r2, r4
 8006706:	4629      	mov	r1, r5
 8006708:	4638      	mov	r0, r7
 800670a:	f7ff ff6f 	bl	80065ec <__ssputs_r>
 800670e:	3001      	adds	r0, #1
 8006710:	f000 80a9 	beq.w	8006866 <_svfiprintf_r+0x1c6>
 8006714:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006716:	445a      	add	r2, fp
 8006718:	9209      	str	r2, [sp, #36]	; 0x24
 800671a:	f89a 3000 	ldrb.w	r3, [sl]
 800671e:	2b00      	cmp	r3, #0
 8006720:	f000 80a1 	beq.w	8006866 <_svfiprintf_r+0x1c6>
 8006724:	2300      	movs	r3, #0
 8006726:	f04f 32ff 	mov.w	r2, #4294967295
 800672a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800672e:	f10a 0a01 	add.w	sl, sl, #1
 8006732:	9304      	str	r3, [sp, #16]
 8006734:	9307      	str	r3, [sp, #28]
 8006736:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800673a:	931a      	str	r3, [sp, #104]	; 0x68
 800673c:	4654      	mov	r4, sl
 800673e:	2205      	movs	r2, #5
 8006740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006744:	4850      	ldr	r0, [pc, #320]	; (8006888 <_svfiprintf_r+0x1e8>)
 8006746:	f7f9 fd53 	bl	80001f0 <memchr>
 800674a:	9a04      	ldr	r2, [sp, #16]
 800674c:	b9d8      	cbnz	r0, 8006786 <_svfiprintf_r+0xe6>
 800674e:	06d0      	lsls	r0, r2, #27
 8006750:	bf44      	itt	mi
 8006752:	2320      	movmi	r3, #32
 8006754:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006758:	0711      	lsls	r1, r2, #28
 800675a:	bf44      	itt	mi
 800675c:	232b      	movmi	r3, #43	; 0x2b
 800675e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006762:	f89a 3000 	ldrb.w	r3, [sl]
 8006766:	2b2a      	cmp	r3, #42	; 0x2a
 8006768:	d015      	beq.n	8006796 <_svfiprintf_r+0xf6>
 800676a:	9a07      	ldr	r2, [sp, #28]
 800676c:	4654      	mov	r4, sl
 800676e:	2000      	movs	r0, #0
 8006770:	f04f 0c0a 	mov.w	ip, #10
 8006774:	4621      	mov	r1, r4
 8006776:	f811 3b01 	ldrb.w	r3, [r1], #1
 800677a:	3b30      	subs	r3, #48	; 0x30
 800677c:	2b09      	cmp	r3, #9
 800677e:	d94d      	bls.n	800681c <_svfiprintf_r+0x17c>
 8006780:	b1b0      	cbz	r0, 80067b0 <_svfiprintf_r+0x110>
 8006782:	9207      	str	r2, [sp, #28]
 8006784:	e014      	b.n	80067b0 <_svfiprintf_r+0x110>
 8006786:	eba0 0308 	sub.w	r3, r0, r8
 800678a:	fa09 f303 	lsl.w	r3, r9, r3
 800678e:	4313      	orrs	r3, r2
 8006790:	9304      	str	r3, [sp, #16]
 8006792:	46a2      	mov	sl, r4
 8006794:	e7d2      	b.n	800673c <_svfiprintf_r+0x9c>
 8006796:	9b03      	ldr	r3, [sp, #12]
 8006798:	1d19      	adds	r1, r3, #4
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	9103      	str	r1, [sp, #12]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	bfbb      	ittet	lt
 80067a2:	425b      	neglt	r3, r3
 80067a4:	f042 0202 	orrlt.w	r2, r2, #2
 80067a8:	9307      	strge	r3, [sp, #28]
 80067aa:	9307      	strlt	r3, [sp, #28]
 80067ac:	bfb8      	it	lt
 80067ae:	9204      	strlt	r2, [sp, #16]
 80067b0:	7823      	ldrb	r3, [r4, #0]
 80067b2:	2b2e      	cmp	r3, #46	; 0x2e
 80067b4:	d10c      	bne.n	80067d0 <_svfiprintf_r+0x130>
 80067b6:	7863      	ldrb	r3, [r4, #1]
 80067b8:	2b2a      	cmp	r3, #42	; 0x2a
 80067ba:	d134      	bne.n	8006826 <_svfiprintf_r+0x186>
 80067bc:	9b03      	ldr	r3, [sp, #12]
 80067be:	1d1a      	adds	r2, r3, #4
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	9203      	str	r2, [sp, #12]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	bfb8      	it	lt
 80067c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80067cc:	3402      	adds	r4, #2
 80067ce:	9305      	str	r3, [sp, #20]
 80067d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006898 <_svfiprintf_r+0x1f8>
 80067d4:	7821      	ldrb	r1, [r4, #0]
 80067d6:	2203      	movs	r2, #3
 80067d8:	4650      	mov	r0, sl
 80067da:	f7f9 fd09 	bl	80001f0 <memchr>
 80067de:	b138      	cbz	r0, 80067f0 <_svfiprintf_r+0x150>
 80067e0:	9b04      	ldr	r3, [sp, #16]
 80067e2:	eba0 000a 	sub.w	r0, r0, sl
 80067e6:	2240      	movs	r2, #64	; 0x40
 80067e8:	4082      	lsls	r2, r0
 80067ea:	4313      	orrs	r3, r2
 80067ec:	3401      	adds	r4, #1
 80067ee:	9304      	str	r3, [sp, #16]
 80067f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067f4:	4825      	ldr	r0, [pc, #148]	; (800688c <_svfiprintf_r+0x1ec>)
 80067f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067fa:	2206      	movs	r2, #6
 80067fc:	f7f9 fcf8 	bl	80001f0 <memchr>
 8006800:	2800      	cmp	r0, #0
 8006802:	d038      	beq.n	8006876 <_svfiprintf_r+0x1d6>
 8006804:	4b22      	ldr	r3, [pc, #136]	; (8006890 <_svfiprintf_r+0x1f0>)
 8006806:	bb1b      	cbnz	r3, 8006850 <_svfiprintf_r+0x1b0>
 8006808:	9b03      	ldr	r3, [sp, #12]
 800680a:	3307      	adds	r3, #7
 800680c:	f023 0307 	bic.w	r3, r3, #7
 8006810:	3308      	adds	r3, #8
 8006812:	9303      	str	r3, [sp, #12]
 8006814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006816:	4433      	add	r3, r6
 8006818:	9309      	str	r3, [sp, #36]	; 0x24
 800681a:	e768      	b.n	80066ee <_svfiprintf_r+0x4e>
 800681c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006820:	460c      	mov	r4, r1
 8006822:	2001      	movs	r0, #1
 8006824:	e7a6      	b.n	8006774 <_svfiprintf_r+0xd4>
 8006826:	2300      	movs	r3, #0
 8006828:	3401      	adds	r4, #1
 800682a:	9305      	str	r3, [sp, #20]
 800682c:	4619      	mov	r1, r3
 800682e:	f04f 0c0a 	mov.w	ip, #10
 8006832:	4620      	mov	r0, r4
 8006834:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006838:	3a30      	subs	r2, #48	; 0x30
 800683a:	2a09      	cmp	r2, #9
 800683c:	d903      	bls.n	8006846 <_svfiprintf_r+0x1a6>
 800683e:	2b00      	cmp	r3, #0
 8006840:	d0c6      	beq.n	80067d0 <_svfiprintf_r+0x130>
 8006842:	9105      	str	r1, [sp, #20]
 8006844:	e7c4      	b.n	80067d0 <_svfiprintf_r+0x130>
 8006846:	fb0c 2101 	mla	r1, ip, r1, r2
 800684a:	4604      	mov	r4, r0
 800684c:	2301      	movs	r3, #1
 800684e:	e7f0      	b.n	8006832 <_svfiprintf_r+0x192>
 8006850:	ab03      	add	r3, sp, #12
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	462a      	mov	r2, r5
 8006856:	4b0f      	ldr	r3, [pc, #60]	; (8006894 <_svfiprintf_r+0x1f4>)
 8006858:	a904      	add	r1, sp, #16
 800685a:	4638      	mov	r0, r7
 800685c:	f3af 8000 	nop.w
 8006860:	1c42      	adds	r2, r0, #1
 8006862:	4606      	mov	r6, r0
 8006864:	d1d6      	bne.n	8006814 <_svfiprintf_r+0x174>
 8006866:	89ab      	ldrh	r3, [r5, #12]
 8006868:	065b      	lsls	r3, r3, #25
 800686a:	f53f af2d 	bmi.w	80066c8 <_svfiprintf_r+0x28>
 800686e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006870:	b01d      	add	sp, #116	; 0x74
 8006872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006876:	ab03      	add	r3, sp, #12
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	462a      	mov	r2, r5
 800687c:	4b05      	ldr	r3, [pc, #20]	; (8006894 <_svfiprintf_r+0x1f4>)
 800687e:	a904      	add	r1, sp, #16
 8006880:	4638      	mov	r0, r7
 8006882:	f000 f879 	bl	8006978 <_printf_i>
 8006886:	e7eb      	b.n	8006860 <_svfiprintf_r+0x1c0>
 8006888:	08006d04 	.word	0x08006d04
 800688c:	08006d0e 	.word	0x08006d0e
 8006890:	00000000 	.word	0x00000000
 8006894:	080065ed 	.word	0x080065ed
 8006898:	08006d0a 	.word	0x08006d0a

0800689c <_printf_common>:
 800689c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068a0:	4616      	mov	r6, r2
 80068a2:	4699      	mov	r9, r3
 80068a4:	688a      	ldr	r2, [r1, #8]
 80068a6:	690b      	ldr	r3, [r1, #16]
 80068a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068ac:	4293      	cmp	r3, r2
 80068ae:	bfb8      	it	lt
 80068b0:	4613      	movlt	r3, r2
 80068b2:	6033      	str	r3, [r6, #0]
 80068b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068b8:	4607      	mov	r7, r0
 80068ba:	460c      	mov	r4, r1
 80068bc:	b10a      	cbz	r2, 80068c2 <_printf_common+0x26>
 80068be:	3301      	adds	r3, #1
 80068c0:	6033      	str	r3, [r6, #0]
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	0699      	lsls	r1, r3, #26
 80068c6:	bf42      	ittt	mi
 80068c8:	6833      	ldrmi	r3, [r6, #0]
 80068ca:	3302      	addmi	r3, #2
 80068cc:	6033      	strmi	r3, [r6, #0]
 80068ce:	6825      	ldr	r5, [r4, #0]
 80068d0:	f015 0506 	ands.w	r5, r5, #6
 80068d4:	d106      	bne.n	80068e4 <_printf_common+0x48>
 80068d6:	f104 0a19 	add.w	sl, r4, #25
 80068da:	68e3      	ldr	r3, [r4, #12]
 80068dc:	6832      	ldr	r2, [r6, #0]
 80068de:	1a9b      	subs	r3, r3, r2
 80068e0:	42ab      	cmp	r3, r5
 80068e2:	dc26      	bgt.n	8006932 <_printf_common+0x96>
 80068e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068e8:	1e13      	subs	r3, r2, #0
 80068ea:	6822      	ldr	r2, [r4, #0]
 80068ec:	bf18      	it	ne
 80068ee:	2301      	movne	r3, #1
 80068f0:	0692      	lsls	r2, r2, #26
 80068f2:	d42b      	bmi.n	800694c <_printf_common+0xb0>
 80068f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068f8:	4649      	mov	r1, r9
 80068fa:	4638      	mov	r0, r7
 80068fc:	47c0      	blx	r8
 80068fe:	3001      	adds	r0, #1
 8006900:	d01e      	beq.n	8006940 <_printf_common+0xa4>
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	6922      	ldr	r2, [r4, #16]
 8006906:	f003 0306 	and.w	r3, r3, #6
 800690a:	2b04      	cmp	r3, #4
 800690c:	bf02      	ittt	eq
 800690e:	68e5      	ldreq	r5, [r4, #12]
 8006910:	6833      	ldreq	r3, [r6, #0]
 8006912:	1aed      	subeq	r5, r5, r3
 8006914:	68a3      	ldr	r3, [r4, #8]
 8006916:	bf0c      	ite	eq
 8006918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800691c:	2500      	movne	r5, #0
 800691e:	4293      	cmp	r3, r2
 8006920:	bfc4      	itt	gt
 8006922:	1a9b      	subgt	r3, r3, r2
 8006924:	18ed      	addgt	r5, r5, r3
 8006926:	2600      	movs	r6, #0
 8006928:	341a      	adds	r4, #26
 800692a:	42b5      	cmp	r5, r6
 800692c:	d11a      	bne.n	8006964 <_printf_common+0xc8>
 800692e:	2000      	movs	r0, #0
 8006930:	e008      	b.n	8006944 <_printf_common+0xa8>
 8006932:	2301      	movs	r3, #1
 8006934:	4652      	mov	r2, sl
 8006936:	4649      	mov	r1, r9
 8006938:	4638      	mov	r0, r7
 800693a:	47c0      	blx	r8
 800693c:	3001      	adds	r0, #1
 800693e:	d103      	bne.n	8006948 <_printf_common+0xac>
 8006940:	f04f 30ff 	mov.w	r0, #4294967295
 8006944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006948:	3501      	adds	r5, #1
 800694a:	e7c6      	b.n	80068da <_printf_common+0x3e>
 800694c:	18e1      	adds	r1, r4, r3
 800694e:	1c5a      	adds	r2, r3, #1
 8006950:	2030      	movs	r0, #48	; 0x30
 8006952:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006956:	4422      	add	r2, r4
 8006958:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800695c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006960:	3302      	adds	r3, #2
 8006962:	e7c7      	b.n	80068f4 <_printf_common+0x58>
 8006964:	2301      	movs	r3, #1
 8006966:	4622      	mov	r2, r4
 8006968:	4649      	mov	r1, r9
 800696a:	4638      	mov	r0, r7
 800696c:	47c0      	blx	r8
 800696e:	3001      	adds	r0, #1
 8006970:	d0e6      	beq.n	8006940 <_printf_common+0xa4>
 8006972:	3601      	adds	r6, #1
 8006974:	e7d9      	b.n	800692a <_printf_common+0x8e>
	...

08006978 <_printf_i>:
 8006978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800697c:	7e0f      	ldrb	r7, [r1, #24]
 800697e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006980:	2f78      	cmp	r7, #120	; 0x78
 8006982:	4691      	mov	r9, r2
 8006984:	4680      	mov	r8, r0
 8006986:	460c      	mov	r4, r1
 8006988:	469a      	mov	sl, r3
 800698a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800698e:	d807      	bhi.n	80069a0 <_printf_i+0x28>
 8006990:	2f62      	cmp	r7, #98	; 0x62
 8006992:	d80a      	bhi.n	80069aa <_printf_i+0x32>
 8006994:	2f00      	cmp	r7, #0
 8006996:	f000 80d4 	beq.w	8006b42 <_printf_i+0x1ca>
 800699a:	2f58      	cmp	r7, #88	; 0x58
 800699c:	f000 80c0 	beq.w	8006b20 <_printf_i+0x1a8>
 80069a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069a8:	e03a      	b.n	8006a20 <_printf_i+0xa8>
 80069aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069ae:	2b15      	cmp	r3, #21
 80069b0:	d8f6      	bhi.n	80069a0 <_printf_i+0x28>
 80069b2:	a101      	add	r1, pc, #4	; (adr r1, 80069b8 <_printf_i+0x40>)
 80069b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069b8:	08006a11 	.word	0x08006a11
 80069bc:	08006a25 	.word	0x08006a25
 80069c0:	080069a1 	.word	0x080069a1
 80069c4:	080069a1 	.word	0x080069a1
 80069c8:	080069a1 	.word	0x080069a1
 80069cc:	080069a1 	.word	0x080069a1
 80069d0:	08006a25 	.word	0x08006a25
 80069d4:	080069a1 	.word	0x080069a1
 80069d8:	080069a1 	.word	0x080069a1
 80069dc:	080069a1 	.word	0x080069a1
 80069e0:	080069a1 	.word	0x080069a1
 80069e4:	08006b29 	.word	0x08006b29
 80069e8:	08006a51 	.word	0x08006a51
 80069ec:	08006ae3 	.word	0x08006ae3
 80069f0:	080069a1 	.word	0x080069a1
 80069f4:	080069a1 	.word	0x080069a1
 80069f8:	08006b4b 	.word	0x08006b4b
 80069fc:	080069a1 	.word	0x080069a1
 8006a00:	08006a51 	.word	0x08006a51
 8006a04:	080069a1 	.word	0x080069a1
 8006a08:	080069a1 	.word	0x080069a1
 8006a0c:	08006aeb 	.word	0x08006aeb
 8006a10:	682b      	ldr	r3, [r5, #0]
 8006a12:	1d1a      	adds	r2, r3, #4
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	602a      	str	r2, [r5, #0]
 8006a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a20:	2301      	movs	r3, #1
 8006a22:	e09f      	b.n	8006b64 <_printf_i+0x1ec>
 8006a24:	6820      	ldr	r0, [r4, #0]
 8006a26:	682b      	ldr	r3, [r5, #0]
 8006a28:	0607      	lsls	r7, r0, #24
 8006a2a:	f103 0104 	add.w	r1, r3, #4
 8006a2e:	6029      	str	r1, [r5, #0]
 8006a30:	d501      	bpl.n	8006a36 <_printf_i+0xbe>
 8006a32:	681e      	ldr	r6, [r3, #0]
 8006a34:	e003      	b.n	8006a3e <_printf_i+0xc6>
 8006a36:	0646      	lsls	r6, r0, #25
 8006a38:	d5fb      	bpl.n	8006a32 <_printf_i+0xba>
 8006a3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006a3e:	2e00      	cmp	r6, #0
 8006a40:	da03      	bge.n	8006a4a <_printf_i+0xd2>
 8006a42:	232d      	movs	r3, #45	; 0x2d
 8006a44:	4276      	negs	r6, r6
 8006a46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a4a:	485a      	ldr	r0, [pc, #360]	; (8006bb4 <_printf_i+0x23c>)
 8006a4c:	230a      	movs	r3, #10
 8006a4e:	e012      	b.n	8006a76 <_printf_i+0xfe>
 8006a50:	682b      	ldr	r3, [r5, #0]
 8006a52:	6820      	ldr	r0, [r4, #0]
 8006a54:	1d19      	adds	r1, r3, #4
 8006a56:	6029      	str	r1, [r5, #0]
 8006a58:	0605      	lsls	r5, r0, #24
 8006a5a:	d501      	bpl.n	8006a60 <_printf_i+0xe8>
 8006a5c:	681e      	ldr	r6, [r3, #0]
 8006a5e:	e002      	b.n	8006a66 <_printf_i+0xee>
 8006a60:	0641      	lsls	r1, r0, #25
 8006a62:	d5fb      	bpl.n	8006a5c <_printf_i+0xe4>
 8006a64:	881e      	ldrh	r6, [r3, #0]
 8006a66:	4853      	ldr	r0, [pc, #332]	; (8006bb4 <_printf_i+0x23c>)
 8006a68:	2f6f      	cmp	r7, #111	; 0x6f
 8006a6a:	bf0c      	ite	eq
 8006a6c:	2308      	moveq	r3, #8
 8006a6e:	230a      	movne	r3, #10
 8006a70:	2100      	movs	r1, #0
 8006a72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a76:	6865      	ldr	r5, [r4, #4]
 8006a78:	60a5      	str	r5, [r4, #8]
 8006a7a:	2d00      	cmp	r5, #0
 8006a7c:	bfa2      	ittt	ge
 8006a7e:	6821      	ldrge	r1, [r4, #0]
 8006a80:	f021 0104 	bicge.w	r1, r1, #4
 8006a84:	6021      	strge	r1, [r4, #0]
 8006a86:	b90e      	cbnz	r6, 8006a8c <_printf_i+0x114>
 8006a88:	2d00      	cmp	r5, #0
 8006a8a:	d04b      	beq.n	8006b24 <_printf_i+0x1ac>
 8006a8c:	4615      	mov	r5, r2
 8006a8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a92:	fb03 6711 	mls	r7, r3, r1, r6
 8006a96:	5dc7      	ldrb	r7, [r0, r7]
 8006a98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a9c:	4637      	mov	r7, r6
 8006a9e:	42bb      	cmp	r3, r7
 8006aa0:	460e      	mov	r6, r1
 8006aa2:	d9f4      	bls.n	8006a8e <_printf_i+0x116>
 8006aa4:	2b08      	cmp	r3, #8
 8006aa6:	d10b      	bne.n	8006ac0 <_printf_i+0x148>
 8006aa8:	6823      	ldr	r3, [r4, #0]
 8006aaa:	07de      	lsls	r6, r3, #31
 8006aac:	d508      	bpl.n	8006ac0 <_printf_i+0x148>
 8006aae:	6923      	ldr	r3, [r4, #16]
 8006ab0:	6861      	ldr	r1, [r4, #4]
 8006ab2:	4299      	cmp	r1, r3
 8006ab4:	bfde      	ittt	le
 8006ab6:	2330      	movle	r3, #48	; 0x30
 8006ab8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006abc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ac0:	1b52      	subs	r2, r2, r5
 8006ac2:	6122      	str	r2, [r4, #16]
 8006ac4:	f8cd a000 	str.w	sl, [sp]
 8006ac8:	464b      	mov	r3, r9
 8006aca:	aa03      	add	r2, sp, #12
 8006acc:	4621      	mov	r1, r4
 8006ace:	4640      	mov	r0, r8
 8006ad0:	f7ff fee4 	bl	800689c <_printf_common>
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	d14a      	bne.n	8006b6e <_printf_i+0x1f6>
 8006ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8006adc:	b004      	add	sp, #16
 8006ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	f043 0320 	orr.w	r3, r3, #32
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	4833      	ldr	r0, [pc, #204]	; (8006bb8 <_printf_i+0x240>)
 8006aec:	2778      	movs	r7, #120	; 0x78
 8006aee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	6829      	ldr	r1, [r5, #0]
 8006af6:	061f      	lsls	r7, r3, #24
 8006af8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006afc:	d402      	bmi.n	8006b04 <_printf_i+0x18c>
 8006afe:	065f      	lsls	r7, r3, #25
 8006b00:	bf48      	it	mi
 8006b02:	b2b6      	uxthmi	r6, r6
 8006b04:	07df      	lsls	r7, r3, #31
 8006b06:	bf48      	it	mi
 8006b08:	f043 0320 	orrmi.w	r3, r3, #32
 8006b0c:	6029      	str	r1, [r5, #0]
 8006b0e:	bf48      	it	mi
 8006b10:	6023      	strmi	r3, [r4, #0]
 8006b12:	b91e      	cbnz	r6, 8006b1c <_printf_i+0x1a4>
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	f023 0320 	bic.w	r3, r3, #32
 8006b1a:	6023      	str	r3, [r4, #0]
 8006b1c:	2310      	movs	r3, #16
 8006b1e:	e7a7      	b.n	8006a70 <_printf_i+0xf8>
 8006b20:	4824      	ldr	r0, [pc, #144]	; (8006bb4 <_printf_i+0x23c>)
 8006b22:	e7e4      	b.n	8006aee <_printf_i+0x176>
 8006b24:	4615      	mov	r5, r2
 8006b26:	e7bd      	b.n	8006aa4 <_printf_i+0x12c>
 8006b28:	682b      	ldr	r3, [r5, #0]
 8006b2a:	6826      	ldr	r6, [r4, #0]
 8006b2c:	6961      	ldr	r1, [r4, #20]
 8006b2e:	1d18      	adds	r0, r3, #4
 8006b30:	6028      	str	r0, [r5, #0]
 8006b32:	0635      	lsls	r5, r6, #24
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	d501      	bpl.n	8006b3c <_printf_i+0x1c4>
 8006b38:	6019      	str	r1, [r3, #0]
 8006b3a:	e002      	b.n	8006b42 <_printf_i+0x1ca>
 8006b3c:	0670      	lsls	r0, r6, #25
 8006b3e:	d5fb      	bpl.n	8006b38 <_printf_i+0x1c0>
 8006b40:	8019      	strh	r1, [r3, #0]
 8006b42:	2300      	movs	r3, #0
 8006b44:	6123      	str	r3, [r4, #16]
 8006b46:	4615      	mov	r5, r2
 8006b48:	e7bc      	b.n	8006ac4 <_printf_i+0x14c>
 8006b4a:	682b      	ldr	r3, [r5, #0]
 8006b4c:	1d1a      	adds	r2, r3, #4
 8006b4e:	602a      	str	r2, [r5, #0]
 8006b50:	681d      	ldr	r5, [r3, #0]
 8006b52:	6862      	ldr	r2, [r4, #4]
 8006b54:	2100      	movs	r1, #0
 8006b56:	4628      	mov	r0, r5
 8006b58:	f7f9 fb4a 	bl	80001f0 <memchr>
 8006b5c:	b108      	cbz	r0, 8006b62 <_printf_i+0x1ea>
 8006b5e:	1b40      	subs	r0, r0, r5
 8006b60:	6060      	str	r0, [r4, #4]
 8006b62:	6863      	ldr	r3, [r4, #4]
 8006b64:	6123      	str	r3, [r4, #16]
 8006b66:	2300      	movs	r3, #0
 8006b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b6c:	e7aa      	b.n	8006ac4 <_printf_i+0x14c>
 8006b6e:	6923      	ldr	r3, [r4, #16]
 8006b70:	462a      	mov	r2, r5
 8006b72:	4649      	mov	r1, r9
 8006b74:	4640      	mov	r0, r8
 8006b76:	47d0      	blx	sl
 8006b78:	3001      	adds	r0, #1
 8006b7a:	d0ad      	beq.n	8006ad8 <_printf_i+0x160>
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	079b      	lsls	r3, r3, #30
 8006b80:	d413      	bmi.n	8006baa <_printf_i+0x232>
 8006b82:	68e0      	ldr	r0, [r4, #12]
 8006b84:	9b03      	ldr	r3, [sp, #12]
 8006b86:	4298      	cmp	r0, r3
 8006b88:	bfb8      	it	lt
 8006b8a:	4618      	movlt	r0, r3
 8006b8c:	e7a6      	b.n	8006adc <_printf_i+0x164>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	4632      	mov	r2, r6
 8006b92:	4649      	mov	r1, r9
 8006b94:	4640      	mov	r0, r8
 8006b96:	47d0      	blx	sl
 8006b98:	3001      	adds	r0, #1
 8006b9a:	d09d      	beq.n	8006ad8 <_printf_i+0x160>
 8006b9c:	3501      	adds	r5, #1
 8006b9e:	68e3      	ldr	r3, [r4, #12]
 8006ba0:	9903      	ldr	r1, [sp, #12]
 8006ba2:	1a5b      	subs	r3, r3, r1
 8006ba4:	42ab      	cmp	r3, r5
 8006ba6:	dcf2      	bgt.n	8006b8e <_printf_i+0x216>
 8006ba8:	e7eb      	b.n	8006b82 <_printf_i+0x20a>
 8006baa:	2500      	movs	r5, #0
 8006bac:	f104 0619 	add.w	r6, r4, #25
 8006bb0:	e7f5      	b.n	8006b9e <_printf_i+0x226>
 8006bb2:	bf00      	nop
 8006bb4:	08006d15 	.word	0x08006d15
 8006bb8:	08006d26 	.word	0x08006d26

08006bbc <memmove>:
 8006bbc:	4288      	cmp	r0, r1
 8006bbe:	b510      	push	{r4, lr}
 8006bc0:	eb01 0402 	add.w	r4, r1, r2
 8006bc4:	d902      	bls.n	8006bcc <memmove+0x10>
 8006bc6:	4284      	cmp	r4, r0
 8006bc8:	4623      	mov	r3, r4
 8006bca:	d807      	bhi.n	8006bdc <memmove+0x20>
 8006bcc:	1e43      	subs	r3, r0, #1
 8006bce:	42a1      	cmp	r1, r4
 8006bd0:	d008      	beq.n	8006be4 <memmove+0x28>
 8006bd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006bda:	e7f8      	b.n	8006bce <memmove+0x12>
 8006bdc:	4402      	add	r2, r0
 8006bde:	4601      	mov	r1, r0
 8006be0:	428a      	cmp	r2, r1
 8006be2:	d100      	bne.n	8006be6 <memmove+0x2a>
 8006be4:	bd10      	pop	{r4, pc}
 8006be6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bee:	e7f7      	b.n	8006be0 <memmove+0x24>

08006bf0 <_sbrk_r>:
 8006bf0:	b538      	push	{r3, r4, r5, lr}
 8006bf2:	4d06      	ldr	r5, [pc, #24]	; (8006c0c <_sbrk_r+0x1c>)
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	4608      	mov	r0, r1
 8006bfa:	602b      	str	r3, [r5, #0]
 8006bfc:	f7fa fefe 	bl	80019fc <_sbrk>
 8006c00:	1c43      	adds	r3, r0, #1
 8006c02:	d102      	bne.n	8006c0a <_sbrk_r+0x1a>
 8006c04:	682b      	ldr	r3, [r5, #0]
 8006c06:	b103      	cbz	r3, 8006c0a <_sbrk_r+0x1a>
 8006c08:	6023      	str	r3, [r4, #0]
 8006c0a:	bd38      	pop	{r3, r4, r5, pc}
 8006c0c:	20000abc 	.word	0x20000abc

08006c10 <memcpy>:
 8006c10:	440a      	add	r2, r1
 8006c12:	4291      	cmp	r1, r2
 8006c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c18:	d100      	bne.n	8006c1c <memcpy+0xc>
 8006c1a:	4770      	bx	lr
 8006c1c:	b510      	push	{r4, lr}
 8006c1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c26:	4291      	cmp	r1, r2
 8006c28:	d1f9      	bne.n	8006c1e <memcpy+0xe>
 8006c2a:	bd10      	pop	{r4, pc}

08006c2c <_realloc_r>:
 8006c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c30:	4680      	mov	r8, r0
 8006c32:	4614      	mov	r4, r2
 8006c34:	460e      	mov	r6, r1
 8006c36:	b921      	cbnz	r1, 8006c42 <_realloc_r+0x16>
 8006c38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c3c:	4611      	mov	r1, r2
 8006c3e:	f7ff bc49 	b.w	80064d4 <_malloc_r>
 8006c42:	b92a      	cbnz	r2, 8006c50 <_realloc_r+0x24>
 8006c44:	f7ff fbda 	bl	80063fc <_free_r>
 8006c48:	4625      	mov	r5, r4
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c50:	f000 f81b 	bl	8006c8a <_malloc_usable_size_r>
 8006c54:	4284      	cmp	r4, r0
 8006c56:	4607      	mov	r7, r0
 8006c58:	d802      	bhi.n	8006c60 <_realloc_r+0x34>
 8006c5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c5e:	d812      	bhi.n	8006c86 <_realloc_r+0x5a>
 8006c60:	4621      	mov	r1, r4
 8006c62:	4640      	mov	r0, r8
 8006c64:	f7ff fc36 	bl	80064d4 <_malloc_r>
 8006c68:	4605      	mov	r5, r0
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	d0ed      	beq.n	8006c4a <_realloc_r+0x1e>
 8006c6e:	42bc      	cmp	r4, r7
 8006c70:	4622      	mov	r2, r4
 8006c72:	4631      	mov	r1, r6
 8006c74:	bf28      	it	cs
 8006c76:	463a      	movcs	r2, r7
 8006c78:	f7ff ffca 	bl	8006c10 <memcpy>
 8006c7c:	4631      	mov	r1, r6
 8006c7e:	4640      	mov	r0, r8
 8006c80:	f7ff fbbc 	bl	80063fc <_free_r>
 8006c84:	e7e1      	b.n	8006c4a <_realloc_r+0x1e>
 8006c86:	4635      	mov	r5, r6
 8006c88:	e7df      	b.n	8006c4a <_realloc_r+0x1e>

08006c8a <_malloc_usable_size_r>:
 8006c8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c8e:	1f18      	subs	r0, r3, #4
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	bfbc      	itt	lt
 8006c94:	580b      	ldrlt	r3, [r1, r0]
 8006c96:	18c0      	addlt	r0, r0, r3
 8006c98:	4770      	bx	lr
	...

08006c9c <_init>:
 8006c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9e:	bf00      	nop
 8006ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ca2:	bc08      	pop	{r3}
 8006ca4:	469e      	mov	lr, r3
 8006ca6:	4770      	bx	lr

08006ca8 <_fini>:
 8006ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006caa:	bf00      	nop
 8006cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cae:	bc08      	pop	{r3}
 8006cb0:	469e      	mov	lr, r3
 8006cb2:	4770      	bx	lr
